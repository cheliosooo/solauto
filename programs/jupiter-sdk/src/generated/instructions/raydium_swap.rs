//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct RaydiumSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub amm_id: solana_program::pubkey::Pubkey,

    pub amm_authority: solana_program::pubkey::Pubkey,

    pub amm_open_orders: solana_program::pubkey::Pubkey,

    pub pool_coin_token_account: solana_program::pubkey::Pubkey,

    pub pool_pc_token_account: solana_program::pubkey::Pubkey,

    pub serum_program_id: solana_program::pubkey::Pubkey,

    pub serum_market: solana_program::pubkey::Pubkey,

    pub serum_bids: solana_program::pubkey::Pubkey,

    pub serum_asks: solana_program::pubkey::Pubkey,

    pub serum_event_queue: solana_program::pubkey::Pubkey,

    pub serum_coin_vault_account: solana_program::pubkey::Pubkey,

    pub serum_pc_vault_account: solana_program::pubkey::Pubkey,

    pub serum_vault_signer: solana_program::pubkey::Pubkey,

    pub user_source_token_account: solana_program::pubkey::Pubkey,

    pub user_destination_token_account: solana_program::pubkey::Pubkey,

    pub user_source_owner: solana_program::pubkey::Pubkey,
}

impl RaydiumSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_open_orders,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_coin_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_pc_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_program_id,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_bids,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_asks,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_event_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_coin_vault_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.serum_pc_vault_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.serum_vault_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_source_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_destination_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_source_owner,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = RaydiumSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct RaydiumSwapInstructionData {
    discriminator: [u8; 8],
}

impl RaydiumSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [177, 173, 42, 240, 184, 4, 124, 81],
        }
    }
}

/// Instruction builder for `RaydiumSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   2. `[writable]` amm_id
///   3. `[]` amm_authority
///   4. `[writable]` amm_open_orders
///   5. `[writable]` pool_coin_token_account
///   6. `[writable]` pool_pc_token_account
///   7. `[]` serum_program_id
///   8. `[writable]` serum_market
///   9. `[writable]` serum_bids
///   10. `[writable]` serum_asks
///   11. `[writable]` serum_event_queue
///   12. `[writable]` serum_coin_vault_account
///   13. `[writable]` serum_pc_vault_account
///   14. `[]` serum_vault_signer
///   15. `[writable]` user_source_token_account
///   16. `[writable]` user_destination_token_account
///   17. `[]` user_source_owner
#[derive(Default)]
pub struct RaydiumSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    amm_id: Option<solana_program::pubkey::Pubkey>,
    amm_authority: Option<solana_program::pubkey::Pubkey>,
    amm_open_orders: Option<solana_program::pubkey::Pubkey>,
    pool_coin_token_account: Option<solana_program::pubkey::Pubkey>,
    pool_pc_token_account: Option<solana_program::pubkey::Pubkey>,
    serum_program_id: Option<solana_program::pubkey::Pubkey>,
    serum_market: Option<solana_program::pubkey::Pubkey>,
    serum_bids: Option<solana_program::pubkey::Pubkey>,
    serum_asks: Option<solana_program::pubkey::Pubkey>,
    serum_event_queue: Option<solana_program::pubkey::Pubkey>,
    serum_coin_vault_account: Option<solana_program::pubkey::Pubkey>,
    serum_pc_vault_account: Option<solana_program::pubkey::Pubkey>,
    serum_vault_signer: Option<solana_program::pubkey::Pubkey>,
    user_source_token_account: Option<solana_program::pubkey::Pubkey>,
    user_destination_token_account: Option<solana_program::pubkey::Pubkey>,
    user_source_owner: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RaydiumSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amm_id(&mut self, amm_id: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_id = Some(amm_id);
        self
    }
    #[inline(always)]
    pub fn amm_authority(&mut self, amm_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_authority = Some(amm_authority);
        self
    }
    #[inline(always)]
    pub fn amm_open_orders(
        &mut self,
        amm_open_orders: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.amm_open_orders = Some(amm_open_orders);
        self
    }
    #[inline(always)]
    pub fn pool_coin_token_account(
        &mut self,
        pool_coin_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_coin_token_account = Some(pool_coin_token_account);
        self
    }
    #[inline(always)]
    pub fn pool_pc_token_account(
        &mut self,
        pool_pc_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_pc_token_account = Some(pool_pc_token_account);
        self
    }
    #[inline(always)]
    pub fn serum_program_id(
        &mut self,
        serum_program_id: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_program_id = Some(serum_program_id);
        self
    }
    #[inline(always)]
    pub fn serum_market(&mut self, serum_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.serum_market = Some(serum_market);
        self
    }
    #[inline(always)]
    pub fn serum_bids(&mut self, serum_bids: solana_program::pubkey::Pubkey) -> &mut Self {
        self.serum_bids = Some(serum_bids);
        self
    }
    #[inline(always)]
    pub fn serum_asks(&mut self, serum_asks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.serum_asks = Some(serum_asks);
        self
    }
    #[inline(always)]
    pub fn serum_event_queue(
        &mut self,
        serum_event_queue: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_event_queue = Some(serum_event_queue);
        self
    }
    #[inline(always)]
    pub fn serum_coin_vault_account(
        &mut self,
        serum_coin_vault_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_coin_vault_account = Some(serum_coin_vault_account);
        self
    }
    #[inline(always)]
    pub fn serum_pc_vault_account(
        &mut self,
        serum_pc_vault_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_pc_vault_account = Some(serum_pc_vault_account);
        self
    }
    #[inline(always)]
    pub fn serum_vault_signer(
        &mut self,
        serum_vault_signer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.serum_vault_signer = Some(serum_vault_signer);
        self
    }
    #[inline(always)]
    pub fn user_source_token_account(
        &mut self,
        user_source_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_source_token_account = Some(user_source_token_account);
        self
    }
    #[inline(always)]
    pub fn user_destination_token_account(
        &mut self,
        user_destination_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_destination_token_account = Some(user_destination_token_account);
        self
    }
    #[inline(always)]
    pub fn user_source_owner(
        &mut self,
        user_source_owner: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_source_owner = Some(user_source_owner);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RaydiumSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            amm_id: self.amm_id.expect("amm_id is not set"),
            amm_authority: self.amm_authority.expect("amm_authority is not set"),
            amm_open_orders: self.amm_open_orders.expect("amm_open_orders is not set"),
            pool_coin_token_account: self
                .pool_coin_token_account
                .expect("pool_coin_token_account is not set"),
            pool_pc_token_account: self
                .pool_pc_token_account
                .expect("pool_pc_token_account is not set"),
            serum_program_id: self.serum_program_id.expect("serum_program_id is not set"),
            serum_market: self.serum_market.expect("serum_market is not set"),
            serum_bids: self.serum_bids.expect("serum_bids is not set"),
            serum_asks: self.serum_asks.expect("serum_asks is not set"),
            serum_event_queue: self
                .serum_event_queue
                .expect("serum_event_queue is not set"),
            serum_coin_vault_account: self
                .serum_coin_vault_account
                .expect("serum_coin_vault_account is not set"),
            serum_pc_vault_account: self
                .serum_pc_vault_account
                .expect("serum_pc_vault_account is not set"),
            serum_vault_signer: self
                .serum_vault_signer
                .expect("serum_vault_signer is not set"),
            user_source_token_account: self
                .user_source_token_account
                .expect("user_source_token_account is not set"),
            user_destination_token_account: self
                .user_destination_token_account
                .expect("user_destination_token_account is not set"),
            user_source_owner: self
                .user_source_owner
                .expect("user_source_owner is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `raydium_swap` CPI accounts.
pub struct RaydiumSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_coin_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_pc_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_coin_vault_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_pc_vault_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_owner: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `raydium_swap` CPI instruction.
pub struct RaydiumSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_coin_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_pc_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_program_id: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_coin_vault_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_pc_vault_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub serum_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_owner: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> RaydiumSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RaydiumSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            token_program: accounts.token_program,
            amm_id: accounts.amm_id,
            amm_authority: accounts.amm_authority,
            amm_open_orders: accounts.amm_open_orders,
            pool_coin_token_account: accounts.pool_coin_token_account,
            pool_pc_token_account: accounts.pool_pc_token_account,
            serum_program_id: accounts.serum_program_id,
            serum_market: accounts.serum_market,
            serum_bids: accounts.serum_bids,
            serum_asks: accounts.serum_asks,
            serum_event_queue: accounts.serum_event_queue,
            serum_coin_vault_account: accounts.serum_coin_vault_account,
            serum_pc_vault_account: accounts.serum_pc_vault_account,
            serum_vault_signer: accounts.serum_vault_signer,
            user_source_token_account: accounts.user_source_token_account,
            user_destination_token_account: accounts.user_destination_token_account,
            user_source_owner: accounts.user_source_owner,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_open_orders.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_coin_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_pc_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_program_id.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_bids.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_asks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_event_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_coin_vault_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.serum_pc_vault_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.serum_vault_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_source_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_destination_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_source_owner.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = RaydiumSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.amm_id.clone());
        account_infos.push(self.amm_authority.clone());
        account_infos.push(self.amm_open_orders.clone());
        account_infos.push(self.pool_coin_token_account.clone());
        account_infos.push(self.pool_pc_token_account.clone());
        account_infos.push(self.serum_program_id.clone());
        account_infos.push(self.serum_market.clone());
        account_infos.push(self.serum_bids.clone());
        account_infos.push(self.serum_asks.clone());
        account_infos.push(self.serum_event_queue.clone());
        account_infos.push(self.serum_coin_vault_account.clone());
        account_infos.push(self.serum_pc_vault_account.clone());
        account_infos.push(self.serum_vault_signer.clone());
        account_infos.push(self.user_source_token_account.clone());
        account_infos.push(self.user_destination_token_account.clone());
        account_infos.push(self.user_source_owner.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RaydiumSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` token_program
///   2. `[writable]` amm_id
///   3. `[]` amm_authority
///   4. `[writable]` amm_open_orders
///   5. `[writable]` pool_coin_token_account
///   6. `[writable]` pool_pc_token_account
///   7. `[]` serum_program_id
///   8. `[writable]` serum_market
///   9. `[writable]` serum_bids
///   10. `[writable]` serum_asks
///   11. `[writable]` serum_event_queue
///   12. `[writable]` serum_coin_vault_account
///   13. `[writable]` serum_pc_vault_account
///   14. `[]` serum_vault_signer
///   15. `[writable]` user_source_token_account
///   16. `[writable]` user_destination_token_account
///   17. `[]` user_source_owner
pub struct RaydiumSwapCpiBuilder<'a, 'b> {
    instruction: Box<RaydiumSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RaydiumSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RaydiumSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            token_program: None,
            amm_id: None,
            amm_authority: None,
            amm_open_orders: None,
            pool_coin_token_account: None,
            pool_pc_token_account: None,
            serum_program_id: None,
            serum_market: None,
            serum_bids: None,
            serum_asks: None,
            serum_event_queue: None,
            serum_coin_vault_account: None,
            serum_pc_vault_account: None,
            serum_vault_signer: None,
            user_source_token_account: None,
            user_destination_token_account: None,
            user_source_owner: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn amm_id(
        &mut self,
        amm_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_id = Some(amm_id);
        self
    }
    #[inline(always)]
    pub fn amm_authority(
        &mut self,
        amm_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_authority = Some(amm_authority);
        self
    }
    #[inline(always)]
    pub fn amm_open_orders(
        &mut self,
        amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_open_orders = Some(amm_open_orders);
        self
    }
    #[inline(always)]
    pub fn pool_coin_token_account(
        &mut self,
        pool_coin_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_coin_token_account = Some(pool_coin_token_account);
        self
    }
    #[inline(always)]
    pub fn pool_pc_token_account(
        &mut self,
        pool_pc_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_pc_token_account = Some(pool_pc_token_account);
        self
    }
    #[inline(always)]
    pub fn serum_program_id(
        &mut self,
        serum_program_id: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_program_id = Some(serum_program_id);
        self
    }
    #[inline(always)]
    pub fn serum_market(
        &mut self,
        serum_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_market = Some(serum_market);
        self
    }
    #[inline(always)]
    pub fn serum_bids(
        &mut self,
        serum_bids: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_bids = Some(serum_bids);
        self
    }
    #[inline(always)]
    pub fn serum_asks(
        &mut self,
        serum_asks: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_asks = Some(serum_asks);
        self
    }
    #[inline(always)]
    pub fn serum_event_queue(
        &mut self,
        serum_event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_event_queue = Some(serum_event_queue);
        self
    }
    #[inline(always)]
    pub fn serum_coin_vault_account(
        &mut self,
        serum_coin_vault_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_coin_vault_account = Some(serum_coin_vault_account);
        self
    }
    #[inline(always)]
    pub fn serum_pc_vault_account(
        &mut self,
        serum_pc_vault_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_pc_vault_account = Some(serum_pc_vault_account);
        self
    }
    #[inline(always)]
    pub fn serum_vault_signer(
        &mut self,
        serum_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.serum_vault_signer = Some(serum_vault_signer);
        self
    }
    #[inline(always)]
    pub fn user_source_token_account(
        &mut self,
        user_source_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_source_token_account = Some(user_source_token_account);
        self
    }
    #[inline(always)]
    pub fn user_destination_token_account(
        &mut self,
        user_destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_destination_token_account = Some(user_destination_token_account);
        self
    }
    #[inline(always)]
    pub fn user_source_owner(
        &mut self,
        user_source_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_source_owner = Some(user_source_owner);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = RaydiumSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            amm_id: self.instruction.amm_id.expect("amm_id is not set"),

            amm_authority: self
                .instruction
                .amm_authority
                .expect("amm_authority is not set"),

            amm_open_orders: self
                .instruction
                .amm_open_orders
                .expect("amm_open_orders is not set"),

            pool_coin_token_account: self
                .instruction
                .pool_coin_token_account
                .expect("pool_coin_token_account is not set"),

            pool_pc_token_account: self
                .instruction
                .pool_pc_token_account
                .expect("pool_pc_token_account is not set"),

            serum_program_id: self
                .instruction
                .serum_program_id
                .expect("serum_program_id is not set"),

            serum_market: self
                .instruction
                .serum_market
                .expect("serum_market is not set"),

            serum_bids: self.instruction.serum_bids.expect("serum_bids is not set"),

            serum_asks: self.instruction.serum_asks.expect("serum_asks is not set"),

            serum_event_queue: self
                .instruction
                .serum_event_queue
                .expect("serum_event_queue is not set"),

            serum_coin_vault_account: self
                .instruction
                .serum_coin_vault_account
                .expect("serum_coin_vault_account is not set"),

            serum_pc_vault_account: self
                .instruction
                .serum_pc_vault_account
                .expect("serum_pc_vault_account is not set"),

            serum_vault_signer: self
                .instruction
                .serum_vault_signer
                .expect("serum_vault_signer is not set"),

            user_source_token_account: self
                .instruction
                .user_source_token_account
                .expect("user_source_token_account is not set"),

            user_destination_token_account: self
                .instruction
                .user_destination_token_account
                .expect("user_destination_token_account is not set"),

            user_source_owner: self
                .instruction
                .user_source_owner
                .expect("user_source_owner is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct RaydiumSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_open_orders: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_coin_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_pc_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_program_id: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_bids: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_asks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_event_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_coin_vault_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_pc_vault_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    serum_vault_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_source_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_destination_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_source_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
