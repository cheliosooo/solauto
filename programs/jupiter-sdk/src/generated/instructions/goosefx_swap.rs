//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct GoosefxSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub controller: solana_program::pubkey::Pubkey,

    pub pair: solana_program::pubkey::Pubkey,

    pub ssl_in: solana_program::pubkey::Pubkey,

    pub ssl_out: solana_program::pubkey::Pubkey,

    pub liability_vault_in: solana_program::pubkey::Pubkey,

    pub swapped_liability_vault_in: solana_program::pubkey::Pubkey,

    pub liability_vault_out: solana_program::pubkey::Pubkey,

    pub swapped_liability_vault_out: solana_program::pubkey::Pubkey,

    pub user_in_ata: solana_program::pubkey::Pubkey,

    pub user_out_ata: solana_program::pubkey::Pubkey,

    pub fee_collector_ata: solana_program::pubkey::Pubkey,

    pub user_wallet: solana_program::pubkey::Pubkey,

    pub fee_collector: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl GoosefxSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.controller,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pair, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_out,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liability_vault_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapped_liability_vault_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liability_vault_out,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapped_liability_vault_out,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_in_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_out_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_collector_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_collector,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = GoosefxSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct GoosefxSwapInstructionData {
    discriminator: [u8; 8],
}

impl GoosefxSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [222, 136, 46, 123, 189, 125, 124, 122],
        }
    }
}

/// Instruction builder for `GoosefxSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` controller
///   2. `[writable]` pair
///   3. `[writable]` ssl_in
///   4. `[writable]` ssl_out
///   5. `[writable]` liability_vault_in
///   6. `[writable]` swapped_liability_vault_in
///   7. `[writable]` liability_vault_out
///   8. `[writable]` swapped_liability_vault_out
///   9. `[writable]` user_in_ata
///   10. `[writable]` user_out_ata
///   11. `[writable]` fee_collector_ata
///   12. `[]` user_wallet
///   13. `[]` fee_collector
///   14. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct GoosefxSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    controller: Option<solana_program::pubkey::Pubkey>,
    pair: Option<solana_program::pubkey::Pubkey>,
    ssl_in: Option<solana_program::pubkey::Pubkey>,
    ssl_out: Option<solana_program::pubkey::Pubkey>,
    liability_vault_in: Option<solana_program::pubkey::Pubkey>,
    swapped_liability_vault_in: Option<solana_program::pubkey::Pubkey>,
    liability_vault_out: Option<solana_program::pubkey::Pubkey>,
    swapped_liability_vault_out: Option<solana_program::pubkey::Pubkey>,
    user_in_ata: Option<solana_program::pubkey::Pubkey>,
    user_out_ata: Option<solana_program::pubkey::Pubkey>,
    fee_collector_ata: Option<solana_program::pubkey::Pubkey>,
    user_wallet: Option<solana_program::pubkey::Pubkey>,
    fee_collector: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl GoosefxSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn controller(&mut self, controller: solana_program::pubkey::Pubkey) -> &mut Self {
        self.controller = Some(controller);
        self
    }
    #[inline(always)]
    pub fn pair(&mut self, pair: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pair = Some(pair);
        self
    }
    #[inline(always)]
    pub fn ssl_in(&mut self, ssl_in: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ssl_in = Some(ssl_in);
        self
    }
    #[inline(always)]
    pub fn ssl_out(&mut self, ssl_out: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ssl_out = Some(ssl_out);
        self
    }
    #[inline(always)]
    pub fn liability_vault_in(
        &mut self,
        liability_vault_in: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liability_vault_in = Some(liability_vault_in);
        self
    }
    #[inline(always)]
    pub fn swapped_liability_vault_in(
        &mut self,
        swapped_liability_vault_in: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swapped_liability_vault_in = Some(swapped_liability_vault_in);
        self
    }
    #[inline(always)]
    pub fn liability_vault_out(
        &mut self,
        liability_vault_out: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liability_vault_out = Some(liability_vault_out);
        self
    }
    #[inline(always)]
    pub fn swapped_liability_vault_out(
        &mut self,
        swapped_liability_vault_out: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swapped_liability_vault_out = Some(swapped_liability_vault_out);
        self
    }
    #[inline(always)]
    pub fn user_in_ata(&mut self, user_in_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_in_ata = Some(user_in_ata);
        self
    }
    #[inline(always)]
    pub fn user_out_ata(&mut self, user_out_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_out_ata = Some(user_out_ata);
        self
    }
    #[inline(always)]
    pub fn fee_collector_ata(
        &mut self,
        fee_collector_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_collector_ata = Some(fee_collector_ata);
        self
    }
    #[inline(always)]
    pub fn user_wallet(&mut self, user_wallet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_wallet = Some(user_wallet);
        self
    }
    #[inline(always)]
    pub fn fee_collector(&mut self, fee_collector: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_collector = Some(fee_collector);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = GoosefxSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            controller: self.controller.expect("controller is not set"),
            pair: self.pair.expect("pair is not set"),
            ssl_in: self.ssl_in.expect("ssl_in is not set"),
            ssl_out: self.ssl_out.expect("ssl_out is not set"),
            liability_vault_in: self
                .liability_vault_in
                .expect("liability_vault_in is not set"),
            swapped_liability_vault_in: self
                .swapped_liability_vault_in
                .expect("swapped_liability_vault_in is not set"),
            liability_vault_out: self
                .liability_vault_out
                .expect("liability_vault_out is not set"),
            swapped_liability_vault_out: self
                .swapped_liability_vault_out
                .expect("swapped_liability_vault_out is not set"),
            user_in_ata: self.user_in_ata.expect("user_in_ata is not set"),
            user_out_ata: self.user_out_ata.expect("user_out_ata is not set"),
            fee_collector_ata: self
                .fee_collector_ata
                .expect("fee_collector_ata is not set"),
            user_wallet: self.user_wallet.expect("user_wallet is not set"),
            fee_collector: self.fee_collector.expect("fee_collector is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `goosefx_swap` CPI accounts.
pub struct GoosefxSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub controller: &'b solana_program::account_info::AccountInfo<'a>,

    pub pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapped_liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapped_liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_in_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_out_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_collector_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_collector: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `goosefx_swap` CPI instruction.
pub struct GoosefxSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub controller: &'b solana_program::account_info::AccountInfo<'a>,

    pub pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapped_liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapped_liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_in_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_out_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_collector_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_collector: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> GoosefxSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: GoosefxSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            controller: accounts.controller,
            pair: accounts.pair,
            ssl_in: accounts.ssl_in,
            ssl_out: accounts.ssl_out,
            liability_vault_in: accounts.liability_vault_in,
            swapped_liability_vault_in: accounts.swapped_liability_vault_in,
            liability_vault_out: accounts.liability_vault_out,
            swapped_liability_vault_out: accounts.swapped_liability_vault_out,
            user_in_ata: accounts.user_in_ata,
            user_out_ata: accounts.user_out_ata,
            fee_collector_ata: accounts.fee_collector_ata,
            user_wallet: accounts.user_wallet,
            fee_collector: accounts.fee_collector,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.controller.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pair.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_out.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liability_vault_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapped_liability_vault_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liability_vault_out.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapped_liability_vault_out.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_in_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_out_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_collector_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_collector.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = GoosefxSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.controller.clone());
        account_infos.push(self.pair.clone());
        account_infos.push(self.ssl_in.clone());
        account_infos.push(self.ssl_out.clone());
        account_infos.push(self.liability_vault_in.clone());
        account_infos.push(self.swapped_liability_vault_in.clone());
        account_infos.push(self.liability_vault_out.clone());
        account_infos.push(self.swapped_liability_vault_out.clone());
        account_infos.push(self.user_in_ata.clone());
        account_infos.push(self.user_out_ata.clone());
        account_infos.push(self.fee_collector_ata.clone());
        account_infos.push(self.user_wallet.clone());
        account_infos.push(self.fee_collector.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `GoosefxSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` controller
///   2. `[writable]` pair
///   3. `[writable]` ssl_in
///   4. `[writable]` ssl_out
///   5. `[writable]` liability_vault_in
///   6. `[writable]` swapped_liability_vault_in
///   7. `[writable]` liability_vault_out
///   8. `[writable]` swapped_liability_vault_out
///   9. `[writable]` user_in_ata
///   10. `[writable]` user_out_ata
///   11. `[writable]` fee_collector_ata
///   12. `[]` user_wallet
///   13. `[]` fee_collector
///   14. `[]` token_program
pub struct GoosefxSwapCpiBuilder<'a, 'b> {
    instruction: Box<GoosefxSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> GoosefxSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(GoosefxSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            controller: None,
            pair: None,
            ssl_in: None,
            ssl_out: None,
            liability_vault_in: None,
            swapped_liability_vault_in: None,
            liability_vault_out: None,
            swapped_liability_vault_out: None,
            user_in_ata: None,
            user_out_ata: None,
            fee_collector_ata: None,
            user_wallet: None,
            fee_collector: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn controller(
        &mut self,
        controller: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.controller = Some(controller);
        self
    }
    #[inline(always)]
    pub fn pair(&mut self, pair: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pair = Some(pair);
        self
    }
    #[inline(always)]
    pub fn ssl_in(
        &mut self,
        ssl_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_in = Some(ssl_in);
        self
    }
    #[inline(always)]
    pub fn ssl_out(
        &mut self,
        ssl_out: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_out = Some(ssl_out);
        self
    }
    #[inline(always)]
    pub fn liability_vault_in(
        &mut self,
        liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liability_vault_in = Some(liability_vault_in);
        self
    }
    #[inline(always)]
    pub fn swapped_liability_vault_in(
        &mut self,
        swapped_liability_vault_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapped_liability_vault_in = Some(swapped_liability_vault_in);
        self
    }
    #[inline(always)]
    pub fn liability_vault_out(
        &mut self,
        liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liability_vault_out = Some(liability_vault_out);
        self
    }
    #[inline(always)]
    pub fn swapped_liability_vault_out(
        &mut self,
        swapped_liability_vault_out: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapped_liability_vault_out = Some(swapped_liability_vault_out);
        self
    }
    #[inline(always)]
    pub fn user_in_ata(
        &mut self,
        user_in_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_in_ata = Some(user_in_ata);
        self
    }
    #[inline(always)]
    pub fn user_out_ata(
        &mut self,
        user_out_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_out_ata = Some(user_out_ata);
        self
    }
    #[inline(always)]
    pub fn fee_collector_ata(
        &mut self,
        fee_collector_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_collector_ata = Some(fee_collector_ata);
        self
    }
    #[inline(always)]
    pub fn user_wallet(
        &mut self,
        user_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_wallet = Some(user_wallet);
        self
    }
    #[inline(always)]
    pub fn fee_collector(
        &mut self,
        fee_collector: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_collector = Some(fee_collector);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = GoosefxSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            controller: self.instruction.controller.expect("controller is not set"),

            pair: self.instruction.pair.expect("pair is not set"),

            ssl_in: self.instruction.ssl_in.expect("ssl_in is not set"),

            ssl_out: self.instruction.ssl_out.expect("ssl_out is not set"),

            liability_vault_in: self
                .instruction
                .liability_vault_in
                .expect("liability_vault_in is not set"),

            swapped_liability_vault_in: self
                .instruction
                .swapped_liability_vault_in
                .expect("swapped_liability_vault_in is not set"),

            liability_vault_out: self
                .instruction
                .liability_vault_out
                .expect("liability_vault_out is not set"),

            swapped_liability_vault_out: self
                .instruction
                .swapped_liability_vault_out
                .expect("swapped_liability_vault_out is not set"),

            user_in_ata: self
                .instruction
                .user_in_ata
                .expect("user_in_ata is not set"),

            user_out_ata: self
                .instruction
                .user_out_ata
                .expect("user_out_ata is not set"),

            fee_collector_ata: self
                .instruction
                .fee_collector_ata
                .expect("fee_collector_ata is not set"),

            user_wallet: self
                .instruction
                .user_wallet
                .expect("user_wallet is not set"),

            fee_collector: self
                .instruction
                .fee_collector
                .expect("fee_collector is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct GoosefxSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    controller: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pair: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_out: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liability_vault_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swapped_liability_vault_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liability_vault_out: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swapped_liability_vault_out: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_in_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_out_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_collector_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_collector: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
