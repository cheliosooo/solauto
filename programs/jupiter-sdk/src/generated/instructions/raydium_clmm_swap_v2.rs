//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct RaydiumClmmSwapV2 {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub amm_config: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,

    pub input_token_account: solana_program::pubkey::Pubkey,

    pub output_token_account: solana_program::pubkey::Pubkey,

    pub input_vault: solana_program::pubkey::Pubkey,

    pub output_vault: solana_program::pubkey::Pubkey,

    pub observation_state: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub token_program2022: solana_program::pubkey::Pubkey,

    pub memo_program: solana_program::pubkey::Pubkey,

    pub input_vault_mint: solana_program::pubkey::Pubkey,

    pub output_vault_mint: solana_program::pubkey::Pubkey,
}

impl RaydiumClmmSwapV2 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.observation_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_vault_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_vault_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = RaydiumClmmSwapV2InstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct RaydiumClmmSwapV2InstructionData {
    discriminator: [u8; 8],
}

impl RaydiumClmmSwapV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [86, 108, 246, 93, 88, 47, 114, 90],
        }
    }
}

/// Instruction builder for `RaydiumClmmSwapV2`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` payer
///   2. `[]` amm_config
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[writable]` observation_state
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[]` token_program2022
///   11. `[]` memo_program
///   12. `[]` input_vault_mint
///   13. `[]` output_vault_mint
#[derive(Default)]
pub struct RaydiumClmmSwapV2Builder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    amm_config: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    input_token_account: Option<solana_program::pubkey::Pubkey>,
    output_token_account: Option<solana_program::pubkey::Pubkey>,
    input_vault: Option<solana_program::pubkey::Pubkey>,
    output_vault: Option<solana_program::pubkey::Pubkey>,
    observation_state: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_program2022: Option<solana_program::pubkey::Pubkey>,
    memo_program: Option<solana_program::pubkey::Pubkey>,
    input_vault_mint: Option<solana_program::pubkey::Pubkey>,
    output_vault_mint: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl RaydiumClmmSwapV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_account = Some(input_token_account);
        self
    }
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_account = Some(output_token_account);
        self
    }
    #[inline(always)]
    pub fn input_vault(&mut self, input_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_vault = Some(input_vault);
        self
    }
    #[inline(always)]
    pub fn output_vault(&mut self, output_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_vault = Some(output_vault);
        self
    }
    #[inline(always)]
    pub fn observation_state(
        &mut self,
        observation_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.observation_state = Some(observation_state);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }
    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }
    #[inline(always)]
    pub fn input_vault_mint(
        &mut self,
        input_vault_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_vault_mint = Some(input_vault_mint);
        self
    }
    #[inline(always)]
    pub fn output_vault_mint(
        &mut self,
        output_vault_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_vault_mint = Some(output_vault_mint);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = RaydiumClmmSwapV2 {
            swap_program: self.swap_program.expect("swap_program is not set"),
            payer: self.payer.expect("payer is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            input_token_account: self
                .input_token_account
                .expect("input_token_account is not set"),
            output_token_account: self
                .output_token_account
                .expect("output_token_account is not set"),
            input_vault: self.input_vault.expect("input_vault is not set"),
            output_vault: self.output_vault.expect("output_vault is not set"),
            observation_state: self
                .observation_state
                .expect("observation_state is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
            memo_program: self.memo_program.expect("memo_program is not set"),
            input_vault_mint: self.input_vault_mint.expect("input_vault_mint is not set"),
            output_vault_mint: self
                .output_vault_mint
                .expect("output_vault_mint is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `raydium_clmm_swap_v2` CPI accounts.
pub struct RaydiumClmmSwapV2CpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub observation_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `raydium_clmm_swap_v2` CPI instruction.
pub struct RaydiumClmmSwapV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub observation_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> RaydiumClmmSwapV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: RaydiumClmmSwapV2CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            payer: accounts.payer,
            amm_config: accounts.amm_config,
            pool_state: accounts.pool_state,
            input_token_account: accounts.input_token_account,
            output_token_account: accounts.output_token_account,
            input_vault: accounts.input_vault,
            output_vault: accounts.output_vault,
            observation_state: accounts.observation_state,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            memo_program: accounts.memo_program,
            input_vault_mint: accounts.input_vault_mint,
            output_vault_mint: accounts.output_vault_mint,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.observation_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_vault_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_vault_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = RaydiumClmmSwapV2InstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.input_token_account.clone());
        account_infos.push(self.output_token_account.clone());
        account_infos.push(self.input_vault.clone());
        account_infos.push(self.output_vault.clone());
        account_infos.push(self.observation_state.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.memo_program.clone());
        account_infos.push(self.input_vault_mint.clone());
        account_infos.push(self.output_vault_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `RaydiumClmmSwapV2` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` payer
///   2. `[]` amm_config
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[writable]` observation_state
///   9. `[]` token_program
///   10. `[]` token_program2022
///   11. `[]` memo_program
///   12. `[]` input_vault_mint
///   13. `[]` output_vault_mint
pub struct RaydiumClmmSwapV2CpiBuilder<'a, 'b> {
    instruction: Box<RaydiumClmmSwapV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RaydiumClmmSwapV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(RaydiumClmmSwapV2CpiBuilderInstruction {
            __program: program,
            swap_program: None,
            payer: None,
            amm_config: None,
            pool_state: None,
            input_token_account: None,
            output_token_account: None,
            input_vault: None,
            output_vault: None,
            observation_state: None,
            token_program: None,
            token_program2022: None,
            memo_program: None,
            input_vault_mint: None,
            output_vault_mint: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_account = Some(input_token_account);
        self
    }
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_account = Some(output_token_account);
        self
    }
    #[inline(always)]
    pub fn input_vault(
        &mut self,
        input_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault = Some(input_vault);
        self
    }
    #[inline(always)]
    pub fn output_vault(
        &mut self,
        output_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_vault = Some(output_vault);
        self
    }
    #[inline(always)]
    pub fn observation_state(
        &mut self,
        observation_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.observation_state = Some(observation_state);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }
    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }
    #[inline(always)]
    pub fn input_vault_mint(
        &mut self,
        input_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault_mint = Some(input_vault_mint);
        self
    }
    #[inline(always)]
    pub fn output_vault_mint(
        &mut self,
        output_vault_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_vault_mint = Some(output_vault_mint);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = RaydiumClmmSwapV2Cpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            input_token_account: self
                .instruction
                .input_token_account
                .expect("input_token_account is not set"),

            output_token_account: self
                .instruction
                .output_token_account
                .expect("output_token_account is not set"),

            input_vault: self
                .instruction
                .input_vault
                .expect("input_vault is not set"),

            output_vault: self
                .instruction
                .output_vault
                .expect("output_vault is not set"),

            observation_state: self
                .instruction
                .observation_state
                .expect("observation_state is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),

            input_vault_mint: self
                .instruction
                .input_vault_mint
                .expect("input_vault_mint is not set"),

            output_vault_mint: self
                .instruction
                .output_vault_mint
                .expect("output_vault_mint is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct RaydiumClmmSwapV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    observation_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_vault_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_vault_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
