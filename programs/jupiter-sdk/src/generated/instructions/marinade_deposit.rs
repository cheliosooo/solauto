//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MarinadeDeposit {
    pub marinade_finance_program: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub msol_mint: solana_program::pubkey::Pubkey,

    pub liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,

    pub liq_pool_msol_leg: solana_program::pubkey::Pubkey,

    pub liq_pool_msol_leg_authority: solana_program::pubkey::Pubkey,

    pub reserve_pda: solana_program::pubkey::Pubkey,

    pub transfer_from: solana_program::pubkey::Pubkey,

    pub mint_to: solana_program::pubkey::Pubkey,

    pub msol_mint_authority: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub user_wsol_token_account: solana_program::pubkey::Pubkey,

    pub temp_wsol_token_account: solana_program::pubkey::Pubkey,

    pub user_transfer_authority: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub wsol_mint: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl MarinadeDeposit {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marinade_finance_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.msol_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liq_pool_sol_leg_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.liq_pool_msol_leg,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.liq_pool_msol_leg_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_pda,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.transfer_from,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint_to,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.msol_mint_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_wsol_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.temp_wsol_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.wsol_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = MarinadeDepositInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MarinadeDepositInstructionData {
    discriminator: [u8; 8],
}

impl MarinadeDepositInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [62, 236, 248, 28, 222, 232, 182, 73],
        }
    }
}

/// Instruction builder for `MarinadeDeposit`.
///
/// ### Accounts:
///
///   0. `[]` marinade_finance_program
///   1. `[writable]` state
///   2. `[writable]` msol_mint
///   3. `[writable]` liq_pool_sol_leg_pda
///   4. `[writable]` liq_pool_msol_leg
///   5. `[]` liq_pool_msol_leg_authority
///   6. `[writable]` reserve_pda
///   7. `[writable]` transfer_from
///   8. `[writable]` mint_to
///   9. `[]` msol_mint_authority
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[writable]` user_wsol_token_account
///   13. `[writable]` temp_wsol_token_account
///   14. `[]` user_transfer_authority
///   15. `[writable]` payer
///   16. `[]` wsol_mint
///   17. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct MarinadeDepositBuilder {
    marinade_finance_program: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    msol_mint: Option<solana_program::pubkey::Pubkey>,
    liq_pool_sol_leg_pda: Option<solana_program::pubkey::Pubkey>,
    liq_pool_msol_leg: Option<solana_program::pubkey::Pubkey>,
    liq_pool_msol_leg_authority: Option<solana_program::pubkey::Pubkey>,
    reserve_pda: Option<solana_program::pubkey::Pubkey>,
    transfer_from: Option<solana_program::pubkey::Pubkey>,
    mint_to: Option<solana_program::pubkey::Pubkey>,
    msol_mint_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    user_wsol_token_account: Option<solana_program::pubkey::Pubkey>,
    temp_wsol_token_account: Option<solana_program::pubkey::Pubkey>,
    user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    wsol_mint: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MarinadeDepositBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn marinade_finance_program(
        &mut self,
        marinade_finance_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marinade_finance_program = Some(marinade_finance_program);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn msol_mint(&mut self, msol_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.msol_mint = Some(msol_mint);
        self
    }
    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }
    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }
    #[inline(always)]
    pub fn liq_pool_msol_leg_authority(
        &mut self,
        liq_pool_msol_leg_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.liq_pool_msol_leg_authority = Some(liq_pool_msol_leg_authority);
        self
    }
    #[inline(always)]
    pub fn reserve_pda(&mut self, reserve_pda: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_pda = Some(reserve_pda);
        self
    }
    #[inline(always)]
    pub fn transfer_from(&mut self, transfer_from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.transfer_from = Some(transfer_from);
        self
    }
    #[inline(always)]
    pub fn mint_to(&mut self, mint_to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_to = Some(mint_to);
        self
    }
    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.msol_mint_authority = Some(msol_mint_authority);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn user_wsol_token_account(
        &mut self,
        user_wsol_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_wsol_token_account = Some(user_wsol_token_account);
        self
    }
    #[inline(always)]
    pub fn temp_wsol_token_account(
        &mut self,
        temp_wsol_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.temp_wsol_token_account = Some(temp_wsol_token_account);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn wsol_mint(&mut self, wsol_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.wsol_mint = Some(wsol_mint);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MarinadeDeposit {
            marinade_finance_program: self
                .marinade_finance_program
                .expect("marinade_finance_program is not set"),
            state: self.state.expect("state is not set"),
            msol_mint: self.msol_mint.expect("msol_mint is not set"),
            liq_pool_sol_leg_pda: self
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),
            liq_pool_msol_leg: self
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),
            liq_pool_msol_leg_authority: self
                .liq_pool_msol_leg_authority
                .expect("liq_pool_msol_leg_authority is not set"),
            reserve_pda: self.reserve_pda.expect("reserve_pda is not set"),
            transfer_from: self.transfer_from.expect("transfer_from is not set"),
            mint_to: self.mint_to.expect("mint_to is not set"),
            msol_mint_authority: self
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            user_wsol_token_account: self
                .user_wsol_token_account
                .expect("user_wsol_token_account is not set"),
            temp_wsol_token_account: self
                .temp_wsol_token_account
                .expect("temp_wsol_token_account is not set"),
            user_transfer_authority: self
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),
            payer: self.payer.expect("payer is not set"),
            wsol_mint: self.wsol_mint.expect("wsol_mint is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `marinade_deposit` CPI accounts.
pub struct MarinadeDepositCpiAccounts<'a, 'b> {
    pub marinade_finance_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub temp_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `marinade_deposit` CPI instruction.
pub struct MarinadeDepositCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub marinade_finance_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,

    pub liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,

    pub transfer_from: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_to: &'b solana_program::account_info::AccountInfo<'a>,

    pub msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub temp_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub wsol_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MarinadeDepositCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MarinadeDepositCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            marinade_finance_program: accounts.marinade_finance_program,
            state: accounts.state,
            msol_mint: accounts.msol_mint,
            liq_pool_sol_leg_pda: accounts.liq_pool_sol_leg_pda,
            liq_pool_msol_leg: accounts.liq_pool_msol_leg,
            liq_pool_msol_leg_authority: accounts.liq_pool_msol_leg_authority,
            reserve_pda: accounts.reserve_pda,
            transfer_from: accounts.transfer_from,
            mint_to: accounts.mint_to,
            msol_mint_authority: accounts.msol_mint_authority,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            user_wsol_token_account: accounts.user_wsol_token_account,
            temp_wsol_token_account: accounts.temp_wsol_token_account,
            user_transfer_authority: accounts.user_transfer_authority,
            payer: accounts.payer,
            wsol_mint: accounts.wsol_mint,
            rent: accounts.rent,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marinade_finance_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.msol_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liq_pool_sol_leg_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.liq_pool_msol_leg.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.liq_pool_msol_leg_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_pda.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.transfer_from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint_to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.msol_mint_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_wsol_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.temp_wsol_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.wsol_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = MarinadeDepositInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.marinade_finance_program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.msol_mint.clone());
        account_infos.push(self.liq_pool_sol_leg_pda.clone());
        account_infos.push(self.liq_pool_msol_leg.clone());
        account_infos.push(self.liq_pool_msol_leg_authority.clone());
        account_infos.push(self.reserve_pda.clone());
        account_infos.push(self.transfer_from.clone());
        account_infos.push(self.mint_to.clone());
        account_infos.push(self.msol_mint_authority.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.user_wsol_token_account.clone());
        account_infos.push(self.temp_wsol_token_account.clone());
        account_infos.push(self.user_transfer_authority.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.wsol_mint.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MarinadeDeposit` via CPI.
///
/// ### Accounts:
///
///   0. `[]` marinade_finance_program
///   1. `[writable]` state
///   2. `[writable]` msol_mint
///   3. `[writable]` liq_pool_sol_leg_pda
///   4. `[writable]` liq_pool_msol_leg
///   5. `[]` liq_pool_msol_leg_authority
///   6. `[writable]` reserve_pda
///   7. `[writable]` transfer_from
///   8. `[writable]` mint_to
///   9. `[]` msol_mint_authority
///   10. `[]` system_program
///   11. `[]` token_program
///   12. `[writable]` user_wsol_token_account
///   13. `[writable]` temp_wsol_token_account
///   14. `[]` user_transfer_authority
///   15. `[writable]` payer
///   16. `[]` wsol_mint
///   17. `[]` rent
pub struct MarinadeDepositCpiBuilder<'a, 'b> {
    instruction: Box<MarinadeDepositCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MarinadeDepositCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MarinadeDepositCpiBuilderInstruction {
            __program: program,
            marinade_finance_program: None,
            state: None,
            msol_mint: None,
            liq_pool_sol_leg_pda: None,
            liq_pool_msol_leg: None,
            liq_pool_msol_leg_authority: None,
            reserve_pda: None,
            transfer_from: None,
            mint_to: None,
            msol_mint_authority: None,
            system_program: None,
            token_program: None,
            user_wsol_token_account: None,
            temp_wsol_token_account: None,
            user_transfer_authority: None,
            payer: None,
            wsol_mint: None,
            rent: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn marinade_finance_program(
        &mut self,
        marinade_finance_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marinade_finance_program = Some(marinade_finance_program);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn msol_mint(
        &mut self,
        msol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint = Some(msol_mint);
        self
    }
    #[inline(always)]
    pub fn liq_pool_sol_leg_pda(
        &mut self,
        liq_pool_sol_leg_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_sol_leg_pda = Some(liq_pool_sol_leg_pda);
        self
    }
    #[inline(always)]
    pub fn liq_pool_msol_leg(
        &mut self,
        liq_pool_msol_leg: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_msol_leg = Some(liq_pool_msol_leg);
        self
    }
    #[inline(always)]
    pub fn liq_pool_msol_leg_authority(
        &mut self,
        liq_pool_msol_leg_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.liq_pool_msol_leg_authority = Some(liq_pool_msol_leg_authority);
        self
    }
    #[inline(always)]
    pub fn reserve_pda(
        &mut self,
        reserve_pda: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_pda = Some(reserve_pda);
        self
    }
    #[inline(always)]
    pub fn transfer_from(
        &mut self,
        transfer_from: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.transfer_from = Some(transfer_from);
        self
    }
    #[inline(always)]
    pub fn mint_to(
        &mut self,
        mint_to: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_to = Some(mint_to);
        self
    }
    #[inline(always)]
    pub fn msol_mint_authority(
        &mut self,
        msol_mint_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.msol_mint_authority = Some(msol_mint_authority);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn user_wsol_token_account(
        &mut self,
        user_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_wsol_token_account = Some(user_wsol_token_account);
        self
    }
    #[inline(always)]
    pub fn temp_wsol_token_account(
        &mut self,
        temp_wsol_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.temp_wsol_token_account = Some(temp_wsol_token_account);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }
    #[inline(always)]
    pub fn wsol_mint(
        &mut self,
        wsol_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.wsol_mint = Some(wsol_mint);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MarinadeDepositCpi {
            __program: self.instruction.__program,

            marinade_finance_program: self
                .instruction
                .marinade_finance_program
                .expect("marinade_finance_program is not set"),

            state: self.instruction.state.expect("state is not set"),

            msol_mint: self.instruction.msol_mint.expect("msol_mint is not set"),

            liq_pool_sol_leg_pda: self
                .instruction
                .liq_pool_sol_leg_pda
                .expect("liq_pool_sol_leg_pda is not set"),

            liq_pool_msol_leg: self
                .instruction
                .liq_pool_msol_leg
                .expect("liq_pool_msol_leg is not set"),

            liq_pool_msol_leg_authority: self
                .instruction
                .liq_pool_msol_leg_authority
                .expect("liq_pool_msol_leg_authority is not set"),

            reserve_pda: self
                .instruction
                .reserve_pda
                .expect("reserve_pda is not set"),

            transfer_from: self
                .instruction
                .transfer_from
                .expect("transfer_from is not set"),

            mint_to: self.instruction.mint_to.expect("mint_to is not set"),

            msol_mint_authority: self
                .instruction
                .msol_mint_authority
                .expect("msol_mint_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            user_wsol_token_account: self
                .instruction
                .user_wsol_token_account
                .expect("user_wsol_token_account is not set"),

            temp_wsol_token_account: self
                .instruction
                .temp_wsol_token_account
                .expect("temp_wsol_token_account is not set"),

            user_transfer_authority: self
                .instruction
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            wsol_mint: self.instruction.wsol_mint.expect("wsol_mint is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MarinadeDepositCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    marinade_finance_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_sol_leg_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_msol_leg: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    liq_pool_msol_leg_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_pda: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    transfer_from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    msol_mint_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_wsol_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    temp_wsol_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wsol_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
