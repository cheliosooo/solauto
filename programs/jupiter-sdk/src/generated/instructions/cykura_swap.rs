//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CykuraSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub signer: solana_program::pubkey::Pubkey,

    pub factory_state: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,

    pub input_token_account: solana_program::pubkey::Pubkey,

    pub output_token_account: solana_program::pubkey::Pubkey,

    pub input_vault: solana_program::pubkey::Pubkey,

    pub output_vault: solana_program::pubkey::Pubkey,

    pub last_observation_state: solana_program::pubkey::Pubkey,

    pub core_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl CykuraSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.factory_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.last_observation_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.core_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = CykuraSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CykuraSwapInstructionData {
    discriminator: [u8; 8],
}

impl CykuraSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [38, 241, 21, 107, 120, 59, 184, 249],
        }
    }
}

/// Instruction builder for `CykuraSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` signer
///   2. `[]` factory_state
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[writable]` last_observation_state
///   9. `[]` core_program
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct CykuraSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    signer: Option<solana_program::pubkey::Pubkey>,
    factory_state: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    input_token_account: Option<solana_program::pubkey::Pubkey>,
    output_token_account: Option<solana_program::pubkey::Pubkey>,
    input_vault: Option<solana_program::pubkey::Pubkey>,
    output_vault: Option<solana_program::pubkey::Pubkey>,
    last_observation_state: Option<solana_program::pubkey::Pubkey>,
    core_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CykuraSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn factory_state(&mut self, factory_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.factory_state = Some(factory_state);
        self
    }
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_account = Some(input_token_account);
        self
    }
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_account = Some(output_token_account);
        self
    }
    #[inline(always)]
    pub fn input_vault(&mut self, input_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_vault = Some(input_vault);
        self
    }
    #[inline(always)]
    pub fn output_vault(&mut self, output_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_vault = Some(output_vault);
        self
    }
    #[inline(always)]
    pub fn last_observation_state(
        &mut self,
        last_observation_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.last_observation_state = Some(last_observation_state);
        self
    }
    #[inline(always)]
    pub fn core_program(&mut self, core_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.core_program = Some(core_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CykuraSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            signer: self.signer.expect("signer is not set"),
            factory_state: self.factory_state.expect("factory_state is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            input_token_account: self
                .input_token_account
                .expect("input_token_account is not set"),
            output_token_account: self
                .output_token_account
                .expect("output_token_account is not set"),
            input_vault: self.input_vault.expect("input_vault is not set"),
            output_vault: self.output_vault.expect("output_vault is not set"),
            last_observation_state: self
                .last_observation_state
                .expect("last_observation_state is not set"),
            core_program: self.core_program.expect("core_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `cykura_swap` CPI accounts.
pub struct CykuraSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub factory_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub last_observation_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub core_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `cykura_swap` CPI instruction.
pub struct CykuraSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub factory_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub last_observation_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub core_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CykuraSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CykuraSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            signer: accounts.signer,
            factory_state: accounts.factory_state,
            pool_state: accounts.pool_state,
            input_token_account: accounts.input_token_account,
            output_token_account: accounts.output_token_account,
            input_vault: accounts.input_vault,
            output_vault: accounts.output_vault,
            last_observation_state: accounts.last_observation_state,
            core_program: accounts.core_program,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.factory_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.last_observation_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.core_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CykuraSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.factory_state.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.input_token_account.clone());
        account_infos.push(self.output_token_account.clone());
        account_infos.push(self.input_vault.clone());
        account_infos.push(self.output_vault.clone());
        account_infos.push(self.last_observation_state.clone());
        account_infos.push(self.core_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CykuraSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` signer
///   2. `[]` factory_state
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[writable]` last_observation_state
///   9. `[]` core_program
///   10. `[]` token_program
pub struct CykuraSwapCpiBuilder<'a, 'b> {
    instruction: Box<CykuraSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CykuraSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CykuraSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            signer: None,
            factory_state: None,
            pool_state: None,
            input_token_account: None,
            output_token_account: None,
            input_vault: None,
            output_vault: None,
            last_observation_state: None,
            core_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn factory_state(
        &mut self,
        factory_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.factory_state = Some(factory_state);
        self
    }
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_account = Some(input_token_account);
        self
    }
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_account = Some(output_token_account);
        self
    }
    #[inline(always)]
    pub fn input_vault(
        &mut self,
        input_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault = Some(input_vault);
        self
    }
    #[inline(always)]
    pub fn output_vault(
        &mut self,
        output_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_vault = Some(output_vault);
        self
    }
    #[inline(always)]
    pub fn last_observation_state(
        &mut self,
        last_observation_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.last_observation_state = Some(last_observation_state);
        self
    }
    #[inline(always)]
    pub fn core_program(
        &mut self,
        core_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.core_program = Some(core_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CykuraSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            signer: self.instruction.signer.expect("signer is not set"),

            factory_state: self
                .instruction
                .factory_state
                .expect("factory_state is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            input_token_account: self
                .instruction
                .input_token_account
                .expect("input_token_account is not set"),

            output_token_account: self
                .instruction
                .output_token_account
                .expect("output_token_account is not set"),

            input_vault: self
                .instruction
                .input_vault
                .expect("input_vault is not set"),

            output_vault: self
                .instruction
                .output_vault
                .expect("output_vault is not set"),

            last_observation_state: self
                .instruction
                .last_observation_state
                .expect("last_observation_state is not set"),

            core_program: self
                .instruction
                .core_program
                .expect("core_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CykuraSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    factory_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    last_observation_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    core_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
