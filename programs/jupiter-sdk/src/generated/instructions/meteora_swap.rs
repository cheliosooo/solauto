//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MeteoraSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub user_source_token: solana_program::pubkey::Pubkey,

    pub user_destination_token: solana_program::pubkey::Pubkey,

    pub a_vault: solana_program::pubkey::Pubkey,

    pub b_vault: solana_program::pubkey::Pubkey,

    pub a_token_vault: solana_program::pubkey::Pubkey,

    pub b_token_vault: solana_program::pubkey::Pubkey,

    pub a_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub b_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub a_vault_lp: solana_program::pubkey::Pubkey,

    pub b_vault_lp: solana_program::pubkey::Pubkey,

    pub admin_token_fee: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub vault_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl MeteoraSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_source_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_destination_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin_token_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = MeteoraSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MeteoraSwapInstructionData {
    discriminator: [u8; 8],
}

impl MeteoraSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [127, 125, 226, 12, 81, 24, 204, 35],
        }
    }
}

/// Instruction builder for `MeteoraSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` pool
///   2. `[writable]` user_source_token
///   3. `[writable]` user_destination_token
///   4. `[writable]` a_vault
///   5. `[writable]` b_vault
///   6. `[writable]` a_token_vault
///   7. `[writable]` b_token_vault
///   8. `[writable]` a_vault_lp_mint
///   9. `[writable]` b_vault_lp_mint
///   10. `[writable]` a_vault_lp
///   11. `[writable]` b_vault_lp
///   12. `[writable]` admin_token_fee
///   13. `[]` user
///   14. `[]` vault_program
///   15. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct MeteoraSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    user_source_token: Option<solana_program::pubkey::Pubkey>,
    user_destination_token: Option<solana_program::pubkey::Pubkey>,
    a_vault: Option<solana_program::pubkey::Pubkey>,
    b_vault: Option<solana_program::pubkey::Pubkey>,
    a_token_vault: Option<solana_program::pubkey::Pubkey>,
    b_token_vault: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp: Option<solana_program::pubkey::Pubkey>,
    admin_token_fee: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    vault_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MeteoraSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn user_source_token(
        &mut self,
        user_source_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_source_token = Some(user_source_token);
        self
    }
    #[inline(always)]
    pub fn user_destination_token(
        &mut self,
        user_destination_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_destination_token = Some(user_destination_token);
        self
    }
    #[inline(always)]
    pub fn a_vault(&mut self, a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault = Some(a_vault);
        self
    }
    #[inline(always)]
    pub fn b_vault(&mut self, b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault = Some(b_vault);
        self
    }
    #[inline(always)]
    pub fn a_token_vault(&mut self, a_token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_token_vault = Some(a_token_vault);
        self
    }
    #[inline(always)]
    pub fn b_token_vault(&mut self, b_token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_token_vault = Some(b_token_vault);
        self
    }
    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }
    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }
    #[inline(always)]
    pub fn a_vault_lp(&mut self, a_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault_lp = Some(a_vault_lp);
        self
    }
    #[inline(always)]
    pub fn b_vault_lp(&mut self, b_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault_lp = Some(b_vault_lp);
        self
    }
    #[inline(always)]
    pub fn admin_token_fee(
        &mut self,
        admin_token_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_token_fee = Some(admin_token_fee);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn vault_program(&mut self, vault_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_program = Some(vault_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MeteoraSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            pool: self.pool.expect("pool is not set"),
            user_source_token: self
                .user_source_token
                .expect("user_source_token is not set"),
            user_destination_token: self
                .user_destination_token
                .expect("user_destination_token is not set"),
            a_vault: self.a_vault.expect("a_vault is not set"),
            b_vault: self.b_vault.expect("b_vault is not set"),
            a_token_vault: self.a_token_vault.expect("a_token_vault is not set"),
            b_token_vault: self.b_token_vault.expect("b_token_vault is not set"),
            a_vault_lp_mint: self.a_vault_lp_mint.expect("a_vault_lp_mint is not set"),
            b_vault_lp_mint: self.b_vault_lp_mint.expect("b_vault_lp_mint is not set"),
            a_vault_lp: self.a_vault_lp.expect("a_vault_lp is not set"),
            b_vault_lp: self.b_vault_lp.expect("b_vault_lp is not set"),
            admin_token_fee: self.admin_token_fee.expect("admin_token_fee is not set"),
            user: self.user.expect("user is not set"),
            vault_program: self.vault_program.expect("vault_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `meteora_swap` CPI accounts.
pub struct MeteoraSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_token_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `meteora_swap` CPI instruction.
pub struct MeteoraSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_token_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MeteoraSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MeteoraSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            pool: accounts.pool,
            user_source_token: accounts.user_source_token,
            user_destination_token: accounts.user_destination_token,
            a_vault: accounts.a_vault,
            b_vault: accounts.b_vault,
            a_token_vault: accounts.a_token_vault,
            b_token_vault: accounts.b_token_vault,
            a_vault_lp_mint: accounts.a_vault_lp_mint,
            b_vault_lp_mint: accounts.b_vault_lp_mint,
            a_vault_lp: accounts.a_vault_lp,
            b_vault_lp: accounts.b_vault_lp,
            admin_token_fee: accounts.admin_token_fee,
            user: accounts.user,
            vault_program: accounts.vault_program,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_source_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_destination_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin_token_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = MeteoraSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.user_source_token.clone());
        account_infos.push(self.user_destination_token.clone());
        account_infos.push(self.a_vault.clone());
        account_infos.push(self.b_vault.clone());
        account_infos.push(self.a_token_vault.clone());
        account_infos.push(self.b_token_vault.clone());
        account_infos.push(self.a_vault_lp_mint.clone());
        account_infos.push(self.b_vault_lp_mint.clone());
        account_infos.push(self.a_vault_lp.clone());
        account_infos.push(self.b_vault_lp.clone());
        account_infos.push(self.admin_token_fee.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.vault_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MeteoraSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` pool
///   2. `[writable]` user_source_token
///   3. `[writable]` user_destination_token
///   4. `[writable]` a_vault
///   5. `[writable]` b_vault
///   6. `[writable]` a_token_vault
///   7. `[writable]` b_token_vault
///   8. `[writable]` a_vault_lp_mint
///   9. `[writable]` b_vault_lp_mint
///   10. `[writable]` a_vault_lp
///   11. `[writable]` b_vault_lp
///   12. `[writable]` admin_token_fee
///   13. `[]` user
///   14. `[]` vault_program
///   15. `[]` token_program
pub struct MeteoraSwapCpiBuilder<'a, 'b> {
    instruction: Box<MeteoraSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MeteoraSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MeteoraSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            pool: None,
            user_source_token: None,
            user_destination_token: None,
            a_vault: None,
            b_vault: None,
            a_token_vault: None,
            b_token_vault: None,
            a_vault_lp_mint: None,
            b_vault_lp_mint: None,
            a_vault_lp: None,
            b_vault_lp: None,
            admin_token_fee: None,
            user: None,
            vault_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn user_source_token(
        &mut self,
        user_source_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_source_token = Some(user_source_token);
        self
    }
    #[inline(always)]
    pub fn user_destination_token(
        &mut self,
        user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_destination_token = Some(user_destination_token);
        self
    }
    #[inline(always)]
    pub fn a_vault(
        &mut self,
        a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault = Some(a_vault);
        self
    }
    #[inline(always)]
    pub fn b_vault(
        &mut self,
        b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault = Some(b_vault);
        self
    }
    #[inline(always)]
    pub fn a_token_vault(
        &mut self,
        a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_token_vault = Some(a_token_vault);
        self
    }
    #[inline(always)]
    pub fn b_token_vault(
        &mut self,
        b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_token_vault = Some(b_token_vault);
        self
    }
    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }
    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }
    #[inline(always)]
    pub fn a_vault_lp(
        &mut self,
        a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp = Some(a_vault_lp);
        self
    }
    #[inline(always)]
    pub fn b_vault_lp(
        &mut self,
        b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp = Some(b_vault_lp);
        self
    }
    #[inline(always)]
    pub fn admin_token_fee(
        &mut self,
        admin_token_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_token_fee = Some(admin_token_fee);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn vault_program(
        &mut self,
        vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_program = Some(vault_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MeteoraSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            user_source_token: self
                .instruction
                .user_source_token
                .expect("user_source_token is not set"),

            user_destination_token: self
                .instruction
                .user_destination_token
                .expect("user_destination_token is not set"),

            a_vault: self.instruction.a_vault.expect("a_vault is not set"),

            b_vault: self.instruction.b_vault.expect("b_vault is not set"),

            a_token_vault: self
                .instruction
                .a_token_vault
                .expect("a_token_vault is not set"),

            b_token_vault: self
                .instruction
                .b_token_vault
                .expect("b_token_vault is not set"),

            a_vault_lp_mint: self
                .instruction
                .a_vault_lp_mint
                .expect("a_vault_lp_mint is not set"),

            b_vault_lp_mint: self
                .instruction
                .b_vault_lp_mint
                .expect("b_vault_lp_mint is not set"),

            a_vault_lp: self.instruction.a_vault_lp.expect("a_vault_lp is not set"),

            b_vault_lp: self.instruction.b_vault_lp.expect("b_vault_lp is not set"),

            admin_token_fee: self
                .instruction
                .admin_token_fee
                .expect("admin_token_fee is not set"),

            user: self.instruction.user.expect("user is not set"),

            vault_program: self
                .instruction
                .vault_program
                .expect("vault_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MeteoraSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_source_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_destination_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin_token_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
