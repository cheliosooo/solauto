//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SerumSwap {
    pub market: solana_program::pubkey::Pubkey,

    pub open_orders: solana_program::pubkey::Pubkey,

    pub request_queue: solana_program::pubkey::Pubkey,

    pub event_queue: solana_program::pubkey::Pubkey,

    pub bids: solana_program::pubkey::Pubkey,

    pub asks: solana_program::pubkey::Pubkey,

    pub coin_vault: solana_program::pubkey::Pubkey,

    pub pc_vault: solana_program::pubkey::Pubkey,

    pub vault_signer: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub order_payer_token_account: solana_program::pubkey::Pubkey,

    pub coin_wallet: solana_program::pubkey::Pubkey,

    pub pc_wallet: solana_program::pubkey::Pubkey,

    pub dex_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl SerumSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.open_orders,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.request_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bids, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asks, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.coin_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pc_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.order_payer_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.coin_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pc_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dex_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = SerumSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct SerumSwapInstructionData {
    discriminator: [u8; 8],
}

impl SerumSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [88, 183, 70, 249, 214, 118, 82, 210],
        }
    }
}

/// Instruction builder for `SerumSwap`.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[writable]` request_queue
///   3. `[writable]` event_queue
///   4. `[writable]` bids
///   5. `[writable]` asks
///   6. `[writable]` coin_vault
///   7. `[writable]` pc_vault
///   8. `[]` vault_signer
///   9. `[]` authority
///   10. `[writable]` order_payer_token_account
///   11. `[writable]` coin_wallet
///   12. `[writable]` pc_wallet
///   13. `[]` dex_program
///   14. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   15. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct SerumSwapBuilder {
    market: Option<solana_program::pubkey::Pubkey>,
    open_orders: Option<solana_program::pubkey::Pubkey>,
    request_queue: Option<solana_program::pubkey::Pubkey>,
    event_queue: Option<solana_program::pubkey::Pubkey>,
    bids: Option<solana_program::pubkey::Pubkey>,
    asks: Option<solana_program::pubkey::Pubkey>,
    coin_vault: Option<solana_program::pubkey::Pubkey>,
    pc_vault: Option<solana_program::pubkey::Pubkey>,
    vault_signer: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    order_payer_token_account: Option<solana_program::pubkey::Pubkey>,
    coin_wallet: Option<solana_program::pubkey::Pubkey>,
    pc_wallet: Option<solana_program::pubkey::Pubkey>,
    dex_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SerumSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn open_orders(&mut self, open_orders: solana_program::pubkey::Pubkey) -> &mut Self {
        self.open_orders = Some(open_orders);
        self
    }
    #[inline(always)]
    pub fn request_queue(&mut self, request_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.request_queue = Some(request_queue);
        self
    }
    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }
    #[inline(always)]
    pub fn bids(&mut self, bids: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }
    #[inline(always)]
    pub fn asks(&mut self, asks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }
    #[inline(always)]
    pub fn coin_vault(&mut self, coin_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.coin_vault = Some(coin_vault);
        self
    }
    #[inline(always)]
    pub fn pc_vault(&mut self, pc_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pc_vault = Some(pc_vault);
        self
    }
    #[inline(always)]
    pub fn vault_signer(&mut self, vault_signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_signer = Some(vault_signer);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn order_payer_token_account(
        &mut self,
        order_payer_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.order_payer_token_account = Some(order_payer_token_account);
        self
    }
    #[inline(always)]
    pub fn coin_wallet(&mut self, coin_wallet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.coin_wallet = Some(coin_wallet);
        self
    }
    #[inline(always)]
    pub fn pc_wallet(&mut self, pc_wallet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pc_wallet = Some(pc_wallet);
        self
    }
    #[inline(always)]
    pub fn dex_program(&mut self, dex_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dex_program = Some(dex_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SerumSwap {
            market: self.market.expect("market is not set"),
            open_orders: self.open_orders.expect("open_orders is not set"),
            request_queue: self.request_queue.expect("request_queue is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            coin_vault: self.coin_vault.expect("coin_vault is not set"),
            pc_vault: self.pc_vault.expect("pc_vault is not set"),
            vault_signer: self.vault_signer.expect("vault_signer is not set"),
            authority: self.authority.expect("authority is not set"),
            order_payer_token_account: self
                .order_payer_token_account
                .expect("order_payer_token_account is not set"),
            coin_wallet: self.coin_wallet.expect("coin_wallet is not set"),
            pc_wallet: self.pc_wallet.expect("pc_wallet is not set"),
            dex_program: self.dex_program.expect("dex_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `serum_swap` CPI accounts.
pub struct SerumSwapCpiAccounts<'a, 'b> {
    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub coin_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pc_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_payer_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub coin_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub pc_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `serum_swap` CPI instruction.
pub struct SerumSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market: &'b solana_program::account_info::AccountInfo<'a>,

    pub open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,

    pub bids: &'b solana_program::account_info::AccountInfo<'a>,

    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub coin_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pc_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub order_payer_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub coin_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub pc_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub dex_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SerumSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SerumSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            market: accounts.market,
            open_orders: accounts.open_orders,
            request_queue: accounts.request_queue,
            event_queue: accounts.event_queue,
            bids: accounts.bids,
            asks: accounts.asks,
            coin_vault: accounts.coin_vault,
            pc_vault: accounts.pc_vault,
            vault_signer: accounts.vault_signer,
            authority: accounts.authority,
            order_payer_token_account: accounts.order_payer_token_account,
            coin_wallet: accounts.coin_wallet,
            pc_wallet: accounts.pc_wallet,
            dex_program: accounts.dex_program,
            token_program: accounts.token_program,
            rent: accounts.rent,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.open_orders.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.request_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bids.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.coin_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pc_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.order_payer_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.coin_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pc_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dex_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = SerumSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.open_orders.clone());
        account_infos.push(self.request_queue.clone());
        account_infos.push(self.event_queue.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.coin_vault.clone());
        account_infos.push(self.pc_vault.clone());
        account_infos.push(self.vault_signer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.order_payer_token_account.clone());
        account_infos.push(self.coin_wallet.clone());
        account_infos.push(self.pc_wallet.clone());
        account_infos.push(self.dex_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SerumSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` market
///   1. `[writable]` open_orders
///   2. `[writable]` request_queue
///   3. `[writable]` event_queue
///   4. `[writable]` bids
///   5. `[writable]` asks
///   6. `[writable]` coin_vault
///   7. `[writable]` pc_vault
///   8. `[]` vault_signer
///   9. `[]` authority
///   10. `[writable]` order_payer_token_account
///   11. `[writable]` coin_wallet
///   12. `[writable]` pc_wallet
///   13. `[]` dex_program
///   14. `[]` token_program
///   15. `[]` rent
pub struct SerumSwapCpiBuilder<'a, 'b> {
    instruction: Box<SerumSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SerumSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SerumSwapCpiBuilderInstruction {
            __program: program,
            market: None,
            open_orders: None,
            request_queue: None,
            event_queue: None,
            bids: None,
            asks: None,
            coin_vault: None,
            pc_vault: None,
            vault_signer: None,
            authority: None,
            order_payer_token_account: None,
            coin_wallet: None,
            pc_wallet: None,
            dex_program: None,
            token_program: None,
            rent: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }
    #[inline(always)]
    pub fn open_orders(
        &mut self,
        open_orders: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.open_orders = Some(open_orders);
        self
    }
    #[inline(always)]
    pub fn request_queue(
        &mut self,
        request_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.request_queue = Some(request_queue);
        self
    }
    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }
    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }
    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }
    #[inline(always)]
    pub fn coin_vault(
        &mut self,
        coin_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.coin_vault = Some(coin_vault);
        self
    }
    #[inline(always)]
    pub fn pc_vault(
        &mut self,
        pc_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pc_vault = Some(pc_vault);
        self
    }
    #[inline(always)]
    pub fn vault_signer(
        &mut self,
        vault_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_signer = Some(vault_signer);
        self
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn order_payer_token_account(
        &mut self,
        order_payer_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.order_payer_token_account = Some(order_payer_token_account);
        self
    }
    #[inline(always)]
    pub fn coin_wallet(
        &mut self,
        coin_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.coin_wallet = Some(coin_wallet);
        self
    }
    #[inline(always)]
    pub fn pc_wallet(
        &mut self,
        pc_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pc_wallet = Some(pc_wallet);
        self
    }
    #[inline(always)]
    pub fn dex_program(
        &mut self,
        dex_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_program = Some(dex_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SerumSwapCpi {
            __program: self.instruction.__program,

            market: self.instruction.market.expect("market is not set"),

            open_orders: self
                .instruction
                .open_orders
                .expect("open_orders is not set"),

            request_queue: self
                .instruction
                .request_queue
                .expect("request_queue is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            coin_vault: self.instruction.coin_vault.expect("coin_vault is not set"),

            pc_vault: self.instruction.pc_vault.expect("pc_vault is not set"),

            vault_signer: self
                .instruction
                .vault_signer
                .expect("vault_signer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            order_payer_token_account: self
                .instruction
                .order_payer_token_account
                .expect("order_payer_token_account is not set"),

            coin_wallet: self
                .instruction
                .coin_wallet
                .expect("coin_wallet is not set"),

            pc_wallet: self.instruction.pc_wallet.expect("pc_wallet is not set"),

            dex_program: self
                .instruction
                .dex_program
                .expect("dex_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SerumSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    open_orders: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    request_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    coin_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pc_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    order_payer_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    coin_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pc_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dex_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
