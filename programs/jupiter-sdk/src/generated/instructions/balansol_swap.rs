//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct BalansolSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub tax_man: solana_program::pubkey::Pubkey,

    pub bid_mint: solana_program::pubkey::Pubkey,

    pub treasurer: solana_program::pubkey::Pubkey,

    pub src_treasury: solana_program::pubkey::Pubkey,

    pub src_associated_token_account: solana_program::pubkey::Pubkey,

    pub ask_mint: solana_program::pubkey::Pubkey,

    pub dst_treasury: solana_program::pubkey::Pubkey,

    pub dst_associated_token_account: solana_program::pubkey::Pubkey,

    pub dst_token_account_taxman: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl BalansolSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tax_man,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.bid_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasurer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.src_treasury,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.src_associated_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ask_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dst_treasury,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dst_associated_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.dst_token_account_taxman,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = BalansolSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct BalansolSwapInstructionData {
    discriminator: [u8; 8],
}

impl BalansolSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [137, 109, 253, 253, 70, 109, 11, 100],
        }
    }
}

/// Instruction builder for `BalansolSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` authority
///   2. `[writable]` pool
///   3. `[writable]` tax_man
///   4. `[]` bid_mint
///   5. `[]` treasurer
///   6. `[writable]` src_treasury
///   7. `[writable]` src_associated_token_account
///   8. `[]` ask_mint
///   9. `[writable]` dst_treasury
///   10. `[writable]` dst_associated_token_account
///   11. `[writable]` dst_token_account_taxman
///   12. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   14. `[]` associated_token_program
///   15. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct BalansolSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    tax_man: Option<solana_program::pubkey::Pubkey>,
    bid_mint: Option<solana_program::pubkey::Pubkey>,
    treasurer: Option<solana_program::pubkey::Pubkey>,
    src_treasury: Option<solana_program::pubkey::Pubkey>,
    src_associated_token_account: Option<solana_program::pubkey::Pubkey>,
    ask_mint: Option<solana_program::pubkey::Pubkey>,
    dst_treasury: Option<solana_program::pubkey::Pubkey>,
    dst_associated_token_account: Option<solana_program::pubkey::Pubkey>,
    dst_token_account_taxman: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BalansolSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn tax_man(&mut self, tax_man: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tax_man = Some(tax_man);
        self
    }
    #[inline(always)]
    pub fn bid_mint(&mut self, bid_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bid_mint = Some(bid_mint);
        self
    }
    #[inline(always)]
    pub fn treasurer(&mut self, treasurer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.treasurer = Some(treasurer);
        self
    }
    #[inline(always)]
    pub fn src_treasury(&mut self, src_treasury: solana_program::pubkey::Pubkey) -> &mut Self {
        self.src_treasury = Some(src_treasury);
        self
    }
    #[inline(always)]
    pub fn src_associated_token_account(
        &mut self,
        src_associated_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.src_associated_token_account = Some(src_associated_token_account);
        self
    }
    #[inline(always)]
    pub fn ask_mint(&mut self, ask_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ask_mint = Some(ask_mint);
        self
    }
    #[inline(always)]
    pub fn dst_treasury(&mut self, dst_treasury: solana_program::pubkey::Pubkey) -> &mut Self {
        self.dst_treasury = Some(dst_treasury);
        self
    }
    #[inline(always)]
    pub fn dst_associated_token_account(
        &mut self,
        dst_associated_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.dst_associated_token_account = Some(dst_associated_token_account);
        self
    }
    #[inline(always)]
    pub fn dst_token_account_taxman(
        &mut self,
        dst_token_account_taxman: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.dst_token_account_taxman = Some(dst_token_account_taxman);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BalansolSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            authority: self.authority.expect("authority is not set"),
            pool: self.pool.expect("pool is not set"),
            tax_man: self.tax_man.expect("tax_man is not set"),
            bid_mint: self.bid_mint.expect("bid_mint is not set"),
            treasurer: self.treasurer.expect("treasurer is not set"),
            src_treasury: self.src_treasury.expect("src_treasury is not set"),
            src_associated_token_account: self
                .src_associated_token_account
                .expect("src_associated_token_account is not set"),
            ask_mint: self.ask_mint.expect("ask_mint is not set"),
            dst_treasury: self.dst_treasury.expect("dst_treasury is not set"),
            dst_associated_token_account: self
                .dst_associated_token_account
                .expect("dst_associated_token_account is not set"),
            dst_token_account_taxman: self
                .dst_token_account_taxman
                .expect("dst_token_account_taxman is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `balansol_swap` CPI accounts.
pub struct BalansolSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub tax_man: &'b solana_program::account_info::AccountInfo<'a>,

    pub bid_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasurer: &'b solana_program::account_info::AccountInfo<'a>,

    pub src_treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub src_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub ask_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_token_account_taxman: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `balansol_swap` CPI instruction.
pub struct BalansolSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub tax_man: &'b solana_program::account_info::AccountInfo<'a>,

    pub bid_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasurer: &'b solana_program::account_info::AccountInfo<'a>,

    pub src_treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub src_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub ask_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub dst_token_account_taxman: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> BalansolSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BalansolSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            authority: accounts.authority,
            pool: accounts.pool,
            tax_man: accounts.tax_man,
            bid_mint: accounts.bid_mint,
            treasurer: accounts.treasurer,
            src_treasury: accounts.src_treasury,
            src_associated_token_account: accounts.src_associated_token_account,
            ask_mint: accounts.ask_mint,
            dst_treasury: accounts.dst_treasury,
            dst_associated_token_account: accounts.dst_associated_token_account,
            dst_token_account_taxman: accounts.dst_token_account_taxman,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            rent: accounts.rent,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tax_man.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bid_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasurer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.src_treasury.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.src_associated_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ask_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dst_treasury.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dst_associated_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.dst_token_account_taxman.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = BalansolSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.tax_man.clone());
        account_infos.push(self.bid_mint.clone());
        account_infos.push(self.treasurer.clone());
        account_infos.push(self.src_treasury.clone());
        account_infos.push(self.src_associated_token_account.clone());
        account_infos.push(self.ask_mint.clone());
        account_infos.push(self.dst_treasury.clone());
        account_infos.push(self.dst_associated_token_account.clone());
        account_infos.push(self.dst_token_account_taxman.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BalansolSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` authority
///   2. `[writable]` pool
///   3. `[writable]` tax_man
///   4. `[]` bid_mint
///   5. `[]` treasurer
///   6. `[writable]` src_treasury
///   7. `[writable]` src_associated_token_account
///   8. `[]` ask_mint
///   9. `[writable]` dst_treasury
///   10. `[writable]` dst_associated_token_account
///   11. `[writable]` dst_token_account_taxman
///   12. `[]` system_program
///   13. `[]` token_program
///   14. `[]` associated_token_program
///   15. `[]` rent
pub struct BalansolSwapCpiBuilder<'a, 'b> {
    instruction: Box<BalansolSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BalansolSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BalansolSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            authority: None,
            pool: None,
            tax_man: None,
            bid_mint: None,
            treasurer: None,
            src_treasury: None,
            src_associated_token_account: None,
            ask_mint: None,
            dst_treasury: None,
            dst_associated_token_account: None,
            dst_token_account_taxman: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            rent: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn tax_man(
        &mut self,
        tax_man: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tax_man = Some(tax_man);
        self
    }
    #[inline(always)]
    pub fn bid_mint(
        &mut self,
        bid_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bid_mint = Some(bid_mint);
        self
    }
    #[inline(always)]
    pub fn treasurer(
        &mut self,
        treasurer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasurer = Some(treasurer);
        self
    }
    #[inline(always)]
    pub fn src_treasury(
        &mut self,
        src_treasury: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.src_treasury = Some(src_treasury);
        self
    }
    #[inline(always)]
    pub fn src_associated_token_account(
        &mut self,
        src_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.src_associated_token_account = Some(src_associated_token_account);
        self
    }
    #[inline(always)]
    pub fn ask_mint(
        &mut self,
        ask_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ask_mint = Some(ask_mint);
        self
    }
    #[inline(always)]
    pub fn dst_treasury(
        &mut self,
        dst_treasury: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dst_treasury = Some(dst_treasury);
        self
    }
    #[inline(always)]
    pub fn dst_associated_token_account(
        &mut self,
        dst_associated_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dst_associated_token_account = Some(dst_associated_token_account);
        self
    }
    #[inline(always)]
    pub fn dst_token_account_taxman(
        &mut self,
        dst_token_account_taxman: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dst_token_account_taxman = Some(dst_token_account_taxman);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = BalansolSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            tax_man: self.instruction.tax_man.expect("tax_man is not set"),

            bid_mint: self.instruction.bid_mint.expect("bid_mint is not set"),

            treasurer: self.instruction.treasurer.expect("treasurer is not set"),

            src_treasury: self
                .instruction
                .src_treasury
                .expect("src_treasury is not set"),

            src_associated_token_account: self
                .instruction
                .src_associated_token_account
                .expect("src_associated_token_account is not set"),

            ask_mint: self.instruction.ask_mint.expect("ask_mint is not set"),

            dst_treasury: self
                .instruction
                .dst_treasury
                .expect("dst_treasury is not set"),

            dst_associated_token_account: self
                .instruction
                .dst_associated_token_account
                .expect("dst_associated_token_account is not set"),

            dst_token_account_taxman: self
                .instruction
                .dst_token_account_taxman
                .expect("dst_token_account_taxman is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct BalansolSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tax_man: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bid_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasurer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    src_treasury: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    src_associated_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ask_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dst_treasury: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dst_associated_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dst_token_account_taxman: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
