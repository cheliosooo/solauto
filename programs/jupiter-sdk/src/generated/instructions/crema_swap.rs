//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CremaSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub clmm_config: solana_program::pubkey::Pubkey,

    pub clmmpool: solana_program::pubkey::Pubkey,

    pub token_a: solana_program::pubkey::Pubkey,

    pub token_b: solana_program::pubkey::Pubkey,

    pub account_a: solana_program::pubkey::Pubkey,

    pub account_b: solana_program::pubkey::Pubkey,

    pub token_a_vault: solana_program::pubkey::Pubkey,

    pub token_b_vault: solana_program::pubkey::Pubkey,

    pub tick_array_map: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub partner: solana_program::pubkey::Pubkey,

    pub partner_ata_a: solana_program::pubkey::Pubkey,

    pub partner_ata_b: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl CremaSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clmm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.clmmpool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.account_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.account_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.tick_array_map,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.partner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.partner_ata_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.partner_ata_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = CremaSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CremaSwapInstructionData {
    discriminator: [u8; 8],
}

impl CremaSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [169, 220, 41, 250, 35, 190, 133, 198],
        }
    }
}

/// Instruction builder for `CremaSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` clmm_config
///   2. `[writable]` clmmpool
///   3. `[]` token_a
///   4. `[]` token_b
///   5. `[writable]` account_a
///   6. `[writable]` account_b
///   7. `[writable]` token_a_vault
///   8. `[writable]` token_b_vault
///   9. `[writable]` tick_array_map
///   10. `[]` owner
///   11. `[]` partner
///   12. `[writable]` partner_ata_a
///   13. `[writable]` partner_ata_b
///   14. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct CremaSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    clmm_config: Option<solana_program::pubkey::Pubkey>,
    clmmpool: Option<solana_program::pubkey::Pubkey>,
    token_a: Option<solana_program::pubkey::Pubkey>,
    token_b: Option<solana_program::pubkey::Pubkey>,
    account_a: Option<solana_program::pubkey::Pubkey>,
    account_b: Option<solana_program::pubkey::Pubkey>,
    token_a_vault: Option<solana_program::pubkey::Pubkey>,
    token_b_vault: Option<solana_program::pubkey::Pubkey>,
    tick_array_map: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    partner: Option<solana_program::pubkey::Pubkey>,
    partner_ata_a: Option<solana_program::pubkey::Pubkey>,
    partner_ata_b: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CremaSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn clmm_config(&mut self, clmm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clmm_config = Some(clmm_config);
        self
    }
    #[inline(always)]
    pub fn clmmpool(&mut self, clmmpool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clmmpool = Some(clmmpool);
        self
    }
    #[inline(always)]
    pub fn token_a(&mut self, token_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a = Some(token_a);
        self
    }
    #[inline(always)]
    pub fn token_b(&mut self, token_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b = Some(token_b);
        self
    }
    #[inline(always)]
    pub fn account_a(&mut self, account_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.account_a = Some(account_a);
        self
    }
    #[inline(always)]
    pub fn account_b(&mut self, account_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.account_b = Some(account_b);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn tick_array_map(&mut self, tick_array_map: solana_program::pubkey::Pubkey) -> &mut Self {
        self.tick_array_map = Some(tick_array_map);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn partner(&mut self, partner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.partner = Some(partner);
        self
    }
    #[inline(always)]
    pub fn partner_ata_a(&mut self, partner_ata_a: solana_program::pubkey::Pubkey) -> &mut Self {
        self.partner_ata_a = Some(partner_ata_a);
        self
    }
    #[inline(always)]
    pub fn partner_ata_b(&mut self, partner_ata_b: solana_program::pubkey::Pubkey) -> &mut Self {
        self.partner_ata_b = Some(partner_ata_b);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CremaSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            clmm_config: self.clmm_config.expect("clmm_config is not set"),
            clmmpool: self.clmmpool.expect("clmmpool is not set"),
            token_a: self.token_a.expect("token_a is not set"),
            token_b: self.token_b.expect("token_b is not set"),
            account_a: self.account_a.expect("account_a is not set"),
            account_b: self.account_b.expect("account_b is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            tick_array_map: self.tick_array_map.expect("tick_array_map is not set"),
            owner: self.owner.expect("owner is not set"),
            partner: self.partner.expect("partner is not set"),
            partner_ata_a: self.partner_ata_a.expect("partner_ata_a is not set"),
            partner_ata_b: self.partner_ata_b.expect("partner_ata_b is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `crema_swap` CPI accounts.
pub struct CremaSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clmm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub clmmpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_map: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_ata_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_ata_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `crema_swap` CPI instruction.
pub struct CremaSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clmm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub clmmpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub account_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub tick_array_map: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_ata_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_ata_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CremaSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CremaSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            clmm_config: accounts.clmm_config,
            clmmpool: accounts.clmmpool,
            token_a: accounts.token_a,
            token_b: accounts.token_b,
            account_a: accounts.account_a,
            account_b: accounts.account_b,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            tick_array_map: accounts.tick_array_map,
            owner: accounts.owner,
            partner: accounts.partner,
            partner_ata_a: accounts.partner_ata_a,
            partner_ata_b: accounts.partner_ata_b,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clmm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.clmmpool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.account_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.account_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.tick_array_map.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.partner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.partner_ata_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.partner_ata_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CremaSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.clmm_config.clone());
        account_infos.push(self.clmmpool.clone());
        account_infos.push(self.token_a.clone());
        account_infos.push(self.token_b.clone());
        account_infos.push(self.account_a.clone());
        account_infos.push(self.account_b.clone());
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.tick_array_map.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.partner.clone());
        account_infos.push(self.partner_ata_a.clone());
        account_infos.push(self.partner_ata_b.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CremaSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` clmm_config
///   2. `[writable]` clmmpool
///   3. `[]` token_a
///   4. `[]` token_b
///   5. `[writable]` account_a
///   6. `[writable]` account_b
///   7. `[writable]` token_a_vault
///   8. `[writable]` token_b_vault
///   9. `[writable]` tick_array_map
///   10. `[]` owner
///   11. `[]` partner
///   12. `[writable]` partner_ata_a
///   13. `[writable]` partner_ata_b
///   14. `[]` token_program
pub struct CremaSwapCpiBuilder<'a, 'b> {
    instruction: Box<CremaSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CremaSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CremaSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            clmm_config: None,
            clmmpool: None,
            token_a: None,
            token_b: None,
            account_a: None,
            account_b: None,
            token_a_vault: None,
            token_b_vault: None,
            tick_array_map: None,
            owner: None,
            partner: None,
            partner_ata_a: None,
            partner_ata_b: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn clmm_config(
        &mut self,
        clmm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.clmm_config = Some(clmm_config);
        self
    }
    #[inline(always)]
    pub fn clmmpool(
        &mut self,
        clmmpool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.clmmpool = Some(clmmpool);
        self
    }
    #[inline(always)]
    pub fn token_a(
        &mut self,
        token_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a = Some(token_a);
        self
    }
    #[inline(always)]
    pub fn token_b(
        &mut self,
        token_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b = Some(token_b);
        self
    }
    #[inline(always)]
    pub fn account_a(
        &mut self,
        account_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.account_a = Some(account_a);
        self
    }
    #[inline(always)]
    pub fn account_b(
        &mut self,
        account_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.account_b = Some(account_b);
        self
    }
    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }
    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }
    #[inline(always)]
    pub fn tick_array_map(
        &mut self,
        tick_array_map: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_map = Some(tick_array_map);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn partner(
        &mut self,
        partner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner = Some(partner);
        self
    }
    #[inline(always)]
    pub fn partner_ata_a(
        &mut self,
        partner_ata_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_ata_a = Some(partner_ata_a);
        self
    }
    #[inline(always)]
    pub fn partner_ata_b(
        &mut self,
        partner_ata_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_ata_b = Some(partner_ata_b);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CremaSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            clmm_config: self
                .instruction
                .clmm_config
                .expect("clmm_config is not set"),

            clmmpool: self.instruction.clmmpool.expect("clmmpool is not set"),

            token_a: self.instruction.token_a.expect("token_a is not set"),

            token_b: self.instruction.token_b.expect("token_b is not set"),

            account_a: self.instruction.account_a.expect("account_a is not set"),

            account_b: self.instruction.account_b.expect("account_b is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            tick_array_map: self
                .instruction
                .tick_array_map
                .expect("tick_array_map is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            partner: self.instruction.partner.expect("partner is not set"),

            partner_ata_a: self
                .instruction
                .partner_ata_a
                .expect("partner_ata_a is not set"),

            partner_ata_b: self
                .instruction
                .partner_ata_b
                .expect("partner_ata_b is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CremaSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clmm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clmmpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    account_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    account_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    tick_array_map: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner_ata_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner_ata_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
