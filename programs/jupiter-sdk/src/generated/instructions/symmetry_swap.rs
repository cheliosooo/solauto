//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SymmetrySwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub buyer: solana_program::pubkey::Pubkey,

    pub fund_state: solana_program::pubkey::Pubkey,

    pub pda_account: solana_program::pubkey::Pubkey,

    pub pda_from_token_account: solana_program::pubkey::Pubkey,

    pub buyer_from_token_account: solana_program::pubkey::Pubkey,

    pub pda_to_token_account: solana_program::pubkey::Pubkey,

    pub buyer_to_token_account: solana_program::pubkey::Pubkey,

    pub swap_fee_account: solana_program::pubkey::Pubkey,

    pub host_fee_account: solana_program::pubkey::Pubkey,

    pub manager_fee_account: solana_program::pubkey::Pubkey,

    pub token_list: solana_program::pubkey::Pubkey,

    pub prism_data: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl SymmetrySwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.buyer, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fund_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pda_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pda_from_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.buyer_from_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pda_to_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.buyer_to_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.host_fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.manager_fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_list,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.prism_data,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = SymmetrySwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct SymmetrySwapInstructionData {
    discriminator: [u8; 8],
}

impl SymmetrySwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [17, 114, 237, 234, 154, 12, 185, 116],
        }
    }
}

/// Instruction builder for `SymmetrySwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` buyer
///   2. `[writable]` fund_state
///   3. `[]` pda_account
///   4. `[writable]` pda_from_token_account
///   5. `[writable]` buyer_from_token_account
///   6. `[writable]` pda_to_token_account
///   7. `[writable]` buyer_to_token_account
///   8. `[writable]` swap_fee_account
///   9. `[writable]` host_fee_account
///   10. `[writable]` manager_fee_account
///   11. `[]` token_list
///   12. `[]` prism_data
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct SymmetrySwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    buyer: Option<solana_program::pubkey::Pubkey>,
    fund_state: Option<solana_program::pubkey::Pubkey>,
    pda_account: Option<solana_program::pubkey::Pubkey>,
    pda_from_token_account: Option<solana_program::pubkey::Pubkey>,
    buyer_from_token_account: Option<solana_program::pubkey::Pubkey>,
    pda_to_token_account: Option<solana_program::pubkey::Pubkey>,
    buyer_to_token_account: Option<solana_program::pubkey::Pubkey>,
    swap_fee_account: Option<solana_program::pubkey::Pubkey>,
    host_fee_account: Option<solana_program::pubkey::Pubkey>,
    manager_fee_account: Option<solana_program::pubkey::Pubkey>,
    token_list: Option<solana_program::pubkey::Pubkey>,
    prism_data: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SymmetrySwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn fund_state(&mut self, fund_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fund_state = Some(fund_state);
        self
    }
    #[inline(always)]
    pub fn pda_account(&mut self, pda_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pda_account = Some(pda_account);
        self
    }
    #[inline(always)]
    pub fn pda_from_token_account(
        &mut self,
        pda_from_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pda_from_token_account = Some(pda_from_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_from_token_account(
        &mut self,
        buyer_from_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.buyer_from_token_account = Some(buyer_from_token_account);
        self
    }
    #[inline(always)]
    pub fn pda_to_token_account(
        &mut self,
        pda_to_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pda_to_token_account = Some(pda_to_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_to_token_account(
        &mut self,
        buyer_to_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.buyer_to_token_account = Some(buyer_to_token_account);
        self
    }
    #[inline(always)]
    pub fn swap_fee_account(
        &mut self,
        swap_fee_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_fee_account = Some(swap_fee_account);
        self
    }
    #[inline(always)]
    pub fn host_fee_account(
        &mut self,
        host_fee_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.host_fee_account = Some(host_fee_account);
        self
    }
    #[inline(always)]
    pub fn manager_fee_account(
        &mut self,
        manager_fee_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.manager_fee_account = Some(manager_fee_account);
        self
    }
    #[inline(always)]
    pub fn token_list(&mut self, token_list: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_list = Some(token_list);
        self
    }
    #[inline(always)]
    pub fn prism_data(&mut self, prism_data: solana_program::pubkey::Pubkey) -> &mut Self {
        self.prism_data = Some(prism_data);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SymmetrySwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            buyer: self.buyer.expect("buyer is not set"),
            fund_state: self.fund_state.expect("fund_state is not set"),
            pda_account: self.pda_account.expect("pda_account is not set"),
            pda_from_token_account: self
                .pda_from_token_account
                .expect("pda_from_token_account is not set"),
            buyer_from_token_account: self
                .buyer_from_token_account
                .expect("buyer_from_token_account is not set"),
            pda_to_token_account: self
                .pda_to_token_account
                .expect("pda_to_token_account is not set"),
            buyer_to_token_account: self
                .buyer_to_token_account
                .expect("buyer_to_token_account is not set"),
            swap_fee_account: self.swap_fee_account.expect("swap_fee_account is not set"),
            host_fee_account: self.host_fee_account.expect("host_fee_account is not set"),
            manager_fee_account: self
                .manager_fee_account
                .expect("manager_fee_account is not set"),
            token_list: self.token_list.expect("token_list is not set"),
            prism_data: self.prism_data.expect("prism_data is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `symmetry_swap` CPI accounts.
pub struct SymmetrySwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub fund_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub manager_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub prism_data: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `symmetry_swap` CPI instruction.
pub struct SymmetrySwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer: &'b solana_program::account_info::AccountInfo<'a>,

    pub fund_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pda_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub buyer_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub manager_fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_list: &'b solana_program::account_info::AccountInfo<'a>,

    pub prism_data: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SymmetrySwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SymmetrySwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            buyer: accounts.buyer,
            fund_state: accounts.fund_state,
            pda_account: accounts.pda_account,
            pda_from_token_account: accounts.pda_from_token_account,
            buyer_from_token_account: accounts.buyer_from_token_account,
            pda_to_token_account: accounts.pda_to_token_account,
            buyer_to_token_account: accounts.buyer_to_token_account,
            swap_fee_account: accounts.swap_fee_account,
            host_fee_account: accounts.host_fee_account,
            manager_fee_account: accounts.manager_fee_account,
            token_list: accounts.token_list,
            prism_data: accounts.prism_data,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.buyer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fund_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pda_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pda_from_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.buyer_from_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pda_to_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.buyer_to_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.host_fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.manager_fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_list.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.prism_data.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = SymmetrySwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.buyer.clone());
        account_infos.push(self.fund_state.clone());
        account_infos.push(self.pda_account.clone());
        account_infos.push(self.pda_from_token_account.clone());
        account_infos.push(self.buyer_from_token_account.clone());
        account_infos.push(self.pda_to_token_account.clone());
        account_infos.push(self.buyer_to_token_account.clone());
        account_infos.push(self.swap_fee_account.clone());
        account_infos.push(self.host_fee_account.clone());
        account_infos.push(self.manager_fee_account.clone());
        account_infos.push(self.token_list.clone());
        account_infos.push(self.prism_data.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SymmetrySwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` buyer
///   2. `[writable]` fund_state
///   3. `[]` pda_account
///   4. `[writable]` pda_from_token_account
///   5. `[writable]` buyer_from_token_account
///   6. `[writable]` pda_to_token_account
///   7. `[writable]` buyer_to_token_account
///   8. `[writable]` swap_fee_account
///   9. `[writable]` host_fee_account
///   10. `[writable]` manager_fee_account
///   11. `[]` token_list
///   12. `[]` prism_data
///   13. `[]` token_program
pub struct SymmetrySwapCpiBuilder<'a, 'b> {
    instruction: Box<SymmetrySwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SymmetrySwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SymmetrySwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            buyer: None,
            fund_state: None,
            pda_account: None,
            pda_from_token_account: None,
            buyer_from_token_account: None,
            pda_to_token_account: None,
            buyer_to_token_account: None,
            swap_fee_account: None,
            host_fee_account: None,
            manager_fee_account: None,
            token_list: None,
            prism_data: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn buyer(&mut self, buyer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.buyer = Some(buyer);
        self
    }
    #[inline(always)]
    pub fn fund_state(
        &mut self,
        fund_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fund_state = Some(fund_state);
        self
    }
    #[inline(always)]
    pub fn pda_account(
        &mut self,
        pda_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pda_account = Some(pda_account);
        self
    }
    #[inline(always)]
    pub fn pda_from_token_account(
        &mut self,
        pda_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pda_from_token_account = Some(pda_from_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_from_token_account(
        &mut self,
        buyer_from_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.buyer_from_token_account = Some(buyer_from_token_account);
        self
    }
    #[inline(always)]
    pub fn pda_to_token_account(
        &mut self,
        pda_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pda_to_token_account = Some(pda_to_token_account);
        self
    }
    #[inline(always)]
    pub fn buyer_to_token_account(
        &mut self,
        buyer_to_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.buyer_to_token_account = Some(buyer_to_token_account);
        self
    }
    #[inline(always)]
    pub fn swap_fee_account(
        &mut self,
        swap_fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_fee_account = Some(swap_fee_account);
        self
    }
    #[inline(always)]
    pub fn host_fee_account(
        &mut self,
        host_fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.host_fee_account = Some(host_fee_account);
        self
    }
    #[inline(always)]
    pub fn manager_fee_account(
        &mut self,
        manager_fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.manager_fee_account = Some(manager_fee_account);
        self
    }
    #[inline(always)]
    pub fn token_list(
        &mut self,
        token_list: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_list = Some(token_list);
        self
    }
    #[inline(always)]
    pub fn prism_data(
        &mut self,
        prism_data: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.prism_data = Some(prism_data);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SymmetrySwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            buyer: self.instruction.buyer.expect("buyer is not set"),

            fund_state: self.instruction.fund_state.expect("fund_state is not set"),

            pda_account: self
                .instruction
                .pda_account
                .expect("pda_account is not set"),

            pda_from_token_account: self
                .instruction
                .pda_from_token_account
                .expect("pda_from_token_account is not set"),

            buyer_from_token_account: self
                .instruction
                .buyer_from_token_account
                .expect("buyer_from_token_account is not set"),

            pda_to_token_account: self
                .instruction
                .pda_to_token_account
                .expect("pda_to_token_account is not set"),

            buyer_to_token_account: self
                .instruction
                .buyer_to_token_account
                .expect("buyer_to_token_account is not set"),

            swap_fee_account: self
                .instruction
                .swap_fee_account
                .expect("swap_fee_account is not set"),

            host_fee_account: self
                .instruction
                .host_fee_account
                .expect("host_fee_account is not set"),

            manager_fee_account: self
                .instruction
                .manager_fee_account
                .expect("manager_fee_account is not set"),

            token_list: self.instruction.token_list.expect("token_list is not set"),

            prism_data: self.instruction.prism_data.expect("prism_data is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SymmetrySwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fund_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pda_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pda_from_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_from_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pda_to_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    buyer_to_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    host_fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    manager_fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_list: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    prism_data: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
