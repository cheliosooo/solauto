//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct DeltafiSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub market_config: solana_program::pubkey::Pubkey,

    pub swap_info: solana_program::pubkey::Pubkey,

    pub user_source_token: solana_program::pubkey::Pubkey,

    pub user_destination_token: solana_program::pubkey::Pubkey,

    pub swap_source_token: solana_program::pubkey::Pubkey,

    pub swap_destination_token: solana_program::pubkey::Pubkey,

    pub deltafi_user: solana_program::pubkey::Pubkey,

    pub admin_destination_token: solana_program::pubkey::Pubkey,

    pub pyth_price_base: solana_program::pubkey::Pubkey,

    pub pyth_price_quote: solana_program::pubkey::Pubkey,

    pub user_authority: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl DeltafiSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_source_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_destination_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_source_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_destination_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.deltafi_user,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin_destination_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_price_base,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_price_quote,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = DeltafiSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct DeltafiSwapInstructionData {
    discriminator: [u8; 8],
}

impl DeltafiSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [132, 230, 102, 120, 205, 9, 237, 190],
        }
    }
}

/// Instruction builder for `DeltafiSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` market_config
///   2. `[writable]` swap_info
///   3. `[writable]` user_source_token
///   4. `[writable]` user_destination_token
///   5. `[writable]` swap_source_token
///   6. `[writable]` swap_destination_token
///   7. `[writable]` deltafi_user
///   8. `[writable]` admin_destination_token
///   9. `[]` pyth_price_base
///   10. `[]` pyth_price_quote
///   11. `[]` user_authority
///   12. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct DeltafiSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    market_config: Option<solana_program::pubkey::Pubkey>,
    swap_info: Option<solana_program::pubkey::Pubkey>,
    user_source_token: Option<solana_program::pubkey::Pubkey>,
    user_destination_token: Option<solana_program::pubkey::Pubkey>,
    swap_source_token: Option<solana_program::pubkey::Pubkey>,
    swap_destination_token: Option<solana_program::pubkey::Pubkey>,
    deltafi_user: Option<solana_program::pubkey::Pubkey>,
    admin_destination_token: Option<solana_program::pubkey::Pubkey>,
    pyth_price_base: Option<solana_program::pubkey::Pubkey>,
    pyth_price_quote: Option<solana_program::pubkey::Pubkey>,
    user_authority: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DeltafiSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn market_config(&mut self, market_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market_config = Some(market_config);
        self
    }
    #[inline(always)]
    pub fn swap_info(&mut self, swap_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_info = Some(swap_info);
        self
    }
    #[inline(always)]
    pub fn user_source_token(
        &mut self,
        user_source_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_source_token = Some(user_source_token);
        self
    }
    #[inline(always)]
    pub fn user_destination_token(
        &mut self,
        user_destination_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_destination_token = Some(user_destination_token);
        self
    }
    #[inline(always)]
    pub fn swap_source_token(
        &mut self,
        swap_source_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_source_token = Some(swap_source_token);
        self
    }
    #[inline(always)]
    pub fn swap_destination_token(
        &mut self,
        swap_destination_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_destination_token = Some(swap_destination_token);
        self
    }
    #[inline(always)]
    pub fn deltafi_user(&mut self, deltafi_user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.deltafi_user = Some(deltafi_user);
        self
    }
    #[inline(always)]
    pub fn admin_destination_token(
        &mut self,
        admin_destination_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.admin_destination_token = Some(admin_destination_token);
        self
    }
    #[inline(always)]
    pub fn pyth_price_base(
        &mut self,
        pyth_price_base: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pyth_price_base = Some(pyth_price_base);
        self
    }
    #[inline(always)]
    pub fn pyth_price_quote(
        &mut self,
        pyth_price_quote: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pyth_price_quote = Some(pyth_price_quote);
        self
    }
    #[inline(always)]
    pub fn user_authority(&mut self, user_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_authority = Some(user_authority);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DeltafiSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            market_config: self.market_config.expect("market_config is not set"),
            swap_info: self.swap_info.expect("swap_info is not set"),
            user_source_token: self
                .user_source_token
                .expect("user_source_token is not set"),
            user_destination_token: self
                .user_destination_token
                .expect("user_destination_token is not set"),
            swap_source_token: self
                .swap_source_token
                .expect("swap_source_token is not set"),
            swap_destination_token: self
                .swap_destination_token
                .expect("swap_destination_token is not set"),
            deltafi_user: self.deltafi_user.expect("deltafi_user is not set"),
            admin_destination_token: self
                .admin_destination_token
                .expect("admin_destination_token is not set"),
            pyth_price_base: self.pyth_price_base.expect("pyth_price_base is not set"),
            pyth_price_quote: self.pyth_price_quote.expect("pyth_price_quote is not set"),
            user_authority: self.user_authority.expect("user_authority is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `deltafi_swap` CPI accounts.
pub struct DeltafiSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub deltafi_user: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_price_base: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_price_quote: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `deltafi_swap` CPI instruction.
pub struct DeltafiSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub deltafi_user: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin_destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_price_base: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_price_quote: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> DeltafiSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DeltafiSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            market_config: accounts.market_config,
            swap_info: accounts.swap_info,
            user_source_token: accounts.user_source_token,
            user_destination_token: accounts.user_destination_token,
            swap_source_token: accounts.swap_source_token,
            swap_destination_token: accounts.swap_destination_token,
            deltafi_user: accounts.deltafi_user,
            admin_destination_token: accounts.admin_destination_token,
            pyth_price_base: accounts.pyth_price_base,
            pyth_price_quote: accounts.pyth_price_quote,
            user_authority: accounts.user_authority,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_source_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_destination_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_source_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_destination_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.deltafi_user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin_destination_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_price_base.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_price_quote.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = DeltafiSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.market_config.clone());
        account_infos.push(self.swap_info.clone());
        account_infos.push(self.user_source_token.clone());
        account_infos.push(self.user_destination_token.clone());
        account_infos.push(self.swap_source_token.clone());
        account_infos.push(self.swap_destination_token.clone());
        account_infos.push(self.deltafi_user.clone());
        account_infos.push(self.admin_destination_token.clone());
        account_infos.push(self.pyth_price_base.clone());
        account_infos.push(self.pyth_price_quote.clone());
        account_infos.push(self.user_authority.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DeltafiSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` market_config
///   2. `[writable]` swap_info
///   3. `[writable]` user_source_token
///   4. `[writable]` user_destination_token
///   5. `[writable]` swap_source_token
///   6. `[writable]` swap_destination_token
///   7. `[writable]` deltafi_user
///   8. `[writable]` admin_destination_token
///   9. `[]` pyth_price_base
///   10. `[]` pyth_price_quote
///   11. `[]` user_authority
///   12. `[]` token_program
pub struct DeltafiSwapCpiBuilder<'a, 'b> {
    instruction: Box<DeltafiSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DeltafiSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DeltafiSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            market_config: None,
            swap_info: None,
            user_source_token: None,
            user_destination_token: None,
            swap_source_token: None,
            swap_destination_token: None,
            deltafi_user: None,
            admin_destination_token: None,
            pyth_price_base: None,
            pyth_price_quote: None,
            user_authority: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn market_config(
        &mut self,
        market_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_config = Some(market_config);
        self
    }
    #[inline(always)]
    pub fn swap_info(
        &mut self,
        swap_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_info = Some(swap_info);
        self
    }
    #[inline(always)]
    pub fn user_source_token(
        &mut self,
        user_source_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_source_token = Some(user_source_token);
        self
    }
    #[inline(always)]
    pub fn user_destination_token(
        &mut self,
        user_destination_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_destination_token = Some(user_destination_token);
        self
    }
    #[inline(always)]
    pub fn swap_source_token(
        &mut self,
        swap_source_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_source_token = Some(swap_source_token);
        self
    }
    #[inline(always)]
    pub fn swap_destination_token(
        &mut self,
        swap_destination_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_destination_token = Some(swap_destination_token);
        self
    }
    #[inline(always)]
    pub fn deltafi_user(
        &mut self,
        deltafi_user: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.deltafi_user = Some(deltafi_user);
        self
    }
    #[inline(always)]
    pub fn admin_destination_token(
        &mut self,
        admin_destination_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.admin_destination_token = Some(admin_destination_token);
        self
    }
    #[inline(always)]
    pub fn pyth_price_base(
        &mut self,
        pyth_price_base: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pyth_price_base = Some(pyth_price_base);
        self
    }
    #[inline(always)]
    pub fn pyth_price_quote(
        &mut self,
        pyth_price_quote: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pyth_price_quote = Some(pyth_price_quote);
        self
    }
    #[inline(always)]
    pub fn user_authority(
        &mut self,
        user_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_authority = Some(user_authority);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = DeltafiSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            market_config: self
                .instruction
                .market_config
                .expect("market_config is not set"),

            swap_info: self.instruction.swap_info.expect("swap_info is not set"),

            user_source_token: self
                .instruction
                .user_source_token
                .expect("user_source_token is not set"),

            user_destination_token: self
                .instruction
                .user_destination_token
                .expect("user_destination_token is not set"),

            swap_source_token: self
                .instruction
                .swap_source_token
                .expect("swap_source_token is not set"),

            swap_destination_token: self
                .instruction
                .swap_destination_token
                .expect("swap_destination_token is not set"),

            deltafi_user: self
                .instruction
                .deltafi_user
                .expect("deltafi_user is not set"),

            admin_destination_token: self
                .instruction
                .admin_destination_token
                .expect("admin_destination_token is not set"),

            pyth_price_base: self
                .instruction
                .pyth_price_base
                .expect("pyth_price_base is not set"),

            pyth_price_quote: self
                .instruction
                .pyth_price_quote
                .expect("pyth_price_quote is not set"),

            user_authority: self
                .instruction
                .user_authority
                .expect("user_authority is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct DeltafiSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_source_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_destination_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_source_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_destination_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    deltafi_user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin_destination_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pyth_price_base: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pyth_price_quote: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
