//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct GoosefxV2Swap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub pair: solana_program::pubkey::Pubkey,

    pub pool_registry: solana_program::pubkey::Pubkey,

    pub user_wallet: solana_program::pubkey::Pubkey,

    pub ssl_pool_in_signer: solana_program::pubkey::Pubkey,

    pub ssl_pool_out_signer: solana_program::pubkey::Pubkey,

    pub user_ata_in: solana_program::pubkey::Pubkey,

    pub user_ata_out: solana_program::pubkey::Pubkey,

    pub ssl_out_main_vault: solana_program::pubkey::Pubkey,

    pub ssl_out_secondary_vault: solana_program::pubkey::Pubkey,

    pub ssl_in_main_vault: solana_program::pubkey::Pubkey,

    pub ssl_in_secondary_vault: solana_program::pubkey::Pubkey,

    pub ssl_out_fee_vault: solana_program::pubkey::Pubkey,

    pub fee_destination: solana_program::pubkey::Pubkey,

    pub output_token_price_history: solana_program::pubkey::Pubkey,

    pub output_token_oracle: solana_program::pubkey::Pubkey,

    pub input_token_price_history: solana_program::pubkey::Pubkey,

    pub input_token_oracle: solana_program::pubkey::Pubkey,

    pub event_emitter: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl GoosefxV2Swap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pair, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_registry,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ssl_pool_in_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ssl_pool_out_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_ata_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_ata_out,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_out_main_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_out_secondary_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_in_main_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_in_secondary_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.ssl_out_fee_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_token_price_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_token_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_token_price_history,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_token_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_emitter,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = GoosefxV2SwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct GoosefxV2SwapInstructionData {
    discriminator: [u8; 8],
}

impl GoosefxV2SwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [178, 108, 208, 137, 154, 194, 168, 213],
        }
    }
}

/// Instruction builder for `GoosefxV2Swap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` pair
///   2. `[writable]` pool_registry
///   3. `[]` user_wallet
///   4. `[]` ssl_pool_in_signer
///   5. `[]` ssl_pool_out_signer
///   6. `[writable]` user_ata_in
///   7. `[writable]` user_ata_out
///   8. `[writable]` ssl_out_main_vault
///   9. `[writable]` ssl_out_secondary_vault
///   10. `[writable]` ssl_in_main_vault
///   11. `[writable]` ssl_in_secondary_vault
///   12. `[writable]` ssl_out_fee_vault
///   13. `[writable]` fee_destination
///   14. `[writable]` output_token_price_history
///   15. `[]` output_token_oracle
///   16. `[writable]` input_token_price_history
///   17. `[]` input_token_oracle
///   18. `[writable]` event_emitter
///   19. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct GoosefxV2SwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    pair: Option<solana_program::pubkey::Pubkey>,
    pool_registry: Option<solana_program::pubkey::Pubkey>,
    user_wallet: Option<solana_program::pubkey::Pubkey>,
    ssl_pool_in_signer: Option<solana_program::pubkey::Pubkey>,
    ssl_pool_out_signer: Option<solana_program::pubkey::Pubkey>,
    user_ata_in: Option<solana_program::pubkey::Pubkey>,
    user_ata_out: Option<solana_program::pubkey::Pubkey>,
    ssl_out_main_vault: Option<solana_program::pubkey::Pubkey>,
    ssl_out_secondary_vault: Option<solana_program::pubkey::Pubkey>,
    ssl_in_main_vault: Option<solana_program::pubkey::Pubkey>,
    ssl_in_secondary_vault: Option<solana_program::pubkey::Pubkey>,
    ssl_out_fee_vault: Option<solana_program::pubkey::Pubkey>,
    fee_destination: Option<solana_program::pubkey::Pubkey>,
    output_token_price_history: Option<solana_program::pubkey::Pubkey>,
    output_token_oracle: Option<solana_program::pubkey::Pubkey>,
    input_token_price_history: Option<solana_program::pubkey::Pubkey>,
    input_token_oracle: Option<solana_program::pubkey::Pubkey>,
    event_emitter: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl GoosefxV2SwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pair(&mut self, pair: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pair = Some(pair);
        self
    }
    #[inline(always)]
    pub fn pool_registry(&mut self, pool_registry: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_registry = Some(pool_registry);
        self
    }
    #[inline(always)]
    pub fn user_wallet(&mut self, user_wallet: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_wallet = Some(user_wallet);
        self
    }
    #[inline(always)]
    pub fn ssl_pool_in_signer(
        &mut self,
        ssl_pool_in_signer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_pool_in_signer = Some(ssl_pool_in_signer);
        self
    }
    #[inline(always)]
    pub fn ssl_pool_out_signer(
        &mut self,
        ssl_pool_out_signer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_pool_out_signer = Some(ssl_pool_out_signer);
        self
    }
    #[inline(always)]
    pub fn user_ata_in(&mut self, user_ata_in: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_ata_in = Some(user_ata_in);
        self
    }
    #[inline(always)]
    pub fn user_ata_out(&mut self, user_ata_out: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_ata_out = Some(user_ata_out);
        self
    }
    #[inline(always)]
    pub fn ssl_out_main_vault(
        &mut self,
        ssl_out_main_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_out_main_vault = Some(ssl_out_main_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_out_secondary_vault(
        &mut self,
        ssl_out_secondary_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_out_secondary_vault = Some(ssl_out_secondary_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_in_main_vault(
        &mut self,
        ssl_in_main_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_in_main_vault = Some(ssl_in_main_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_in_secondary_vault(
        &mut self,
        ssl_in_secondary_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_in_secondary_vault = Some(ssl_in_secondary_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_out_fee_vault(
        &mut self,
        ssl_out_fee_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.ssl_out_fee_vault = Some(ssl_out_fee_vault);
        self
    }
    #[inline(always)]
    pub fn fee_destination(
        &mut self,
        fee_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_destination = Some(fee_destination);
        self
    }
    #[inline(always)]
    pub fn output_token_price_history(
        &mut self,
        output_token_price_history: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_price_history = Some(output_token_price_history);
        self
    }
    #[inline(always)]
    pub fn output_token_oracle(
        &mut self,
        output_token_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_oracle = Some(output_token_oracle);
        self
    }
    #[inline(always)]
    pub fn input_token_price_history(
        &mut self,
        input_token_price_history: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_price_history = Some(input_token_price_history);
        self
    }
    #[inline(always)]
    pub fn input_token_oracle(
        &mut self,
        input_token_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_oracle = Some(input_token_oracle);
        self
    }
    #[inline(always)]
    pub fn event_emitter(&mut self, event_emitter: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_emitter = Some(event_emitter);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = GoosefxV2Swap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            pair: self.pair.expect("pair is not set"),
            pool_registry: self.pool_registry.expect("pool_registry is not set"),
            user_wallet: self.user_wallet.expect("user_wallet is not set"),
            ssl_pool_in_signer: self
                .ssl_pool_in_signer
                .expect("ssl_pool_in_signer is not set"),
            ssl_pool_out_signer: self
                .ssl_pool_out_signer
                .expect("ssl_pool_out_signer is not set"),
            user_ata_in: self.user_ata_in.expect("user_ata_in is not set"),
            user_ata_out: self.user_ata_out.expect("user_ata_out is not set"),
            ssl_out_main_vault: self
                .ssl_out_main_vault
                .expect("ssl_out_main_vault is not set"),
            ssl_out_secondary_vault: self
                .ssl_out_secondary_vault
                .expect("ssl_out_secondary_vault is not set"),
            ssl_in_main_vault: self
                .ssl_in_main_vault
                .expect("ssl_in_main_vault is not set"),
            ssl_in_secondary_vault: self
                .ssl_in_secondary_vault
                .expect("ssl_in_secondary_vault is not set"),
            ssl_out_fee_vault: self
                .ssl_out_fee_vault
                .expect("ssl_out_fee_vault is not set"),
            fee_destination: self.fee_destination.expect("fee_destination is not set"),
            output_token_price_history: self
                .output_token_price_history
                .expect("output_token_price_history is not set"),
            output_token_oracle: self
                .output_token_oracle
                .expect("output_token_oracle is not set"),
            input_token_price_history: self
                .input_token_price_history
                .expect("input_token_price_history is not set"),
            input_token_oracle: self
                .input_token_oracle
                .expect("input_token_oracle is not set"),
            event_emitter: self.event_emitter.expect("event_emitter is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `goosefx_v2_swap` CPI accounts.
pub struct GoosefxV2SwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_registry: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_pool_in_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_pool_out_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_ata_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_ata_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_main_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in_main_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_fee_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_emitter: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `goosefx_v2_swap` CPI instruction.
pub struct GoosefxV2SwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_registry: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_wallet: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_pool_in_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_pool_out_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_ata_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_ata_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_main_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in_main_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_in_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub ssl_out_fee_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_emitter: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> GoosefxV2SwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: GoosefxV2SwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            pair: accounts.pair,
            pool_registry: accounts.pool_registry,
            user_wallet: accounts.user_wallet,
            ssl_pool_in_signer: accounts.ssl_pool_in_signer,
            ssl_pool_out_signer: accounts.ssl_pool_out_signer,
            user_ata_in: accounts.user_ata_in,
            user_ata_out: accounts.user_ata_out,
            ssl_out_main_vault: accounts.ssl_out_main_vault,
            ssl_out_secondary_vault: accounts.ssl_out_secondary_vault,
            ssl_in_main_vault: accounts.ssl_in_main_vault,
            ssl_in_secondary_vault: accounts.ssl_in_secondary_vault,
            ssl_out_fee_vault: accounts.ssl_out_fee_vault,
            fee_destination: accounts.fee_destination,
            output_token_price_history: accounts.output_token_price_history,
            output_token_oracle: accounts.output_token_oracle,
            input_token_price_history: accounts.input_token_price_history,
            input_token_oracle: accounts.input_token_oracle,
            event_emitter: accounts.event_emitter,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(20 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pair.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_registry.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ssl_pool_in_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ssl_pool_out_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_ata_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_ata_out.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_out_main_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_out_secondary_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_in_main_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_in_secondary_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.ssl_out_fee_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_token_price_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_token_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_token_price_history.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_token_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_emitter.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = GoosefxV2SwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(20 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.pair.clone());
        account_infos.push(self.pool_registry.clone());
        account_infos.push(self.user_wallet.clone());
        account_infos.push(self.ssl_pool_in_signer.clone());
        account_infos.push(self.ssl_pool_out_signer.clone());
        account_infos.push(self.user_ata_in.clone());
        account_infos.push(self.user_ata_out.clone());
        account_infos.push(self.ssl_out_main_vault.clone());
        account_infos.push(self.ssl_out_secondary_vault.clone());
        account_infos.push(self.ssl_in_main_vault.clone());
        account_infos.push(self.ssl_in_secondary_vault.clone());
        account_infos.push(self.ssl_out_fee_vault.clone());
        account_infos.push(self.fee_destination.clone());
        account_infos.push(self.output_token_price_history.clone());
        account_infos.push(self.output_token_oracle.clone());
        account_infos.push(self.input_token_price_history.clone());
        account_infos.push(self.input_token_oracle.clone());
        account_infos.push(self.event_emitter.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `GoosefxV2Swap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` pair
///   2. `[writable]` pool_registry
///   3. `[]` user_wallet
///   4. `[]` ssl_pool_in_signer
///   5. `[]` ssl_pool_out_signer
///   6. `[writable]` user_ata_in
///   7. `[writable]` user_ata_out
///   8. `[writable]` ssl_out_main_vault
///   9. `[writable]` ssl_out_secondary_vault
///   10. `[writable]` ssl_in_main_vault
///   11. `[writable]` ssl_in_secondary_vault
///   12. `[writable]` ssl_out_fee_vault
///   13. `[writable]` fee_destination
///   14. `[writable]` output_token_price_history
///   15. `[]` output_token_oracle
///   16. `[writable]` input_token_price_history
///   17. `[]` input_token_oracle
///   18. `[writable]` event_emitter
///   19. `[]` token_program
pub struct GoosefxV2SwapCpiBuilder<'a, 'b> {
    instruction: Box<GoosefxV2SwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> GoosefxV2SwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(GoosefxV2SwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            pair: None,
            pool_registry: None,
            user_wallet: None,
            ssl_pool_in_signer: None,
            ssl_pool_out_signer: None,
            user_ata_in: None,
            user_ata_out: None,
            ssl_out_main_vault: None,
            ssl_out_secondary_vault: None,
            ssl_in_main_vault: None,
            ssl_in_secondary_vault: None,
            ssl_out_fee_vault: None,
            fee_destination: None,
            output_token_price_history: None,
            output_token_oracle: None,
            input_token_price_history: None,
            input_token_oracle: None,
            event_emitter: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pair(&mut self, pair: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pair = Some(pair);
        self
    }
    #[inline(always)]
    pub fn pool_registry(
        &mut self,
        pool_registry: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_registry = Some(pool_registry);
        self
    }
    #[inline(always)]
    pub fn user_wallet(
        &mut self,
        user_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_wallet = Some(user_wallet);
        self
    }
    #[inline(always)]
    pub fn ssl_pool_in_signer(
        &mut self,
        ssl_pool_in_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_pool_in_signer = Some(ssl_pool_in_signer);
        self
    }
    #[inline(always)]
    pub fn ssl_pool_out_signer(
        &mut self,
        ssl_pool_out_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_pool_out_signer = Some(ssl_pool_out_signer);
        self
    }
    #[inline(always)]
    pub fn user_ata_in(
        &mut self,
        user_ata_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_ata_in = Some(user_ata_in);
        self
    }
    #[inline(always)]
    pub fn user_ata_out(
        &mut self,
        user_ata_out: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_ata_out = Some(user_ata_out);
        self
    }
    #[inline(always)]
    pub fn ssl_out_main_vault(
        &mut self,
        ssl_out_main_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_out_main_vault = Some(ssl_out_main_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_out_secondary_vault(
        &mut self,
        ssl_out_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_out_secondary_vault = Some(ssl_out_secondary_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_in_main_vault(
        &mut self,
        ssl_in_main_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_in_main_vault = Some(ssl_in_main_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_in_secondary_vault(
        &mut self,
        ssl_in_secondary_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_in_secondary_vault = Some(ssl_in_secondary_vault);
        self
    }
    #[inline(always)]
    pub fn ssl_out_fee_vault(
        &mut self,
        ssl_out_fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ssl_out_fee_vault = Some(ssl_out_fee_vault);
        self
    }
    #[inline(always)]
    pub fn fee_destination(
        &mut self,
        fee_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_destination = Some(fee_destination);
        self
    }
    #[inline(always)]
    pub fn output_token_price_history(
        &mut self,
        output_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_price_history = Some(output_token_price_history);
        self
    }
    #[inline(always)]
    pub fn output_token_oracle(
        &mut self,
        output_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_oracle = Some(output_token_oracle);
        self
    }
    #[inline(always)]
    pub fn input_token_price_history(
        &mut self,
        input_token_price_history: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_price_history = Some(input_token_price_history);
        self
    }
    #[inline(always)]
    pub fn input_token_oracle(
        &mut self,
        input_token_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_oracle = Some(input_token_oracle);
        self
    }
    #[inline(always)]
    pub fn event_emitter(
        &mut self,
        event_emitter: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_emitter = Some(event_emitter);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = GoosefxV2SwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            pair: self.instruction.pair.expect("pair is not set"),

            pool_registry: self
                .instruction
                .pool_registry
                .expect("pool_registry is not set"),

            user_wallet: self
                .instruction
                .user_wallet
                .expect("user_wallet is not set"),

            ssl_pool_in_signer: self
                .instruction
                .ssl_pool_in_signer
                .expect("ssl_pool_in_signer is not set"),

            ssl_pool_out_signer: self
                .instruction
                .ssl_pool_out_signer
                .expect("ssl_pool_out_signer is not set"),

            user_ata_in: self
                .instruction
                .user_ata_in
                .expect("user_ata_in is not set"),

            user_ata_out: self
                .instruction
                .user_ata_out
                .expect("user_ata_out is not set"),

            ssl_out_main_vault: self
                .instruction
                .ssl_out_main_vault
                .expect("ssl_out_main_vault is not set"),

            ssl_out_secondary_vault: self
                .instruction
                .ssl_out_secondary_vault
                .expect("ssl_out_secondary_vault is not set"),

            ssl_in_main_vault: self
                .instruction
                .ssl_in_main_vault
                .expect("ssl_in_main_vault is not set"),

            ssl_in_secondary_vault: self
                .instruction
                .ssl_in_secondary_vault
                .expect("ssl_in_secondary_vault is not set"),

            ssl_out_fee_vault: self
                .instruction
                .ssl_out_fee_vault
                .expect("ssl_out_fee_vault is not set"),

            fee_destination: self
                .instruction
                .fee_destination
                .expect("fee_destination is not set"),

            output_token_price_history: self
                .instruction
                .output_token_price_history
                .expect("output_token_price_history is not set"),

            output_token_oracle: self
                .instruction
                .output_token_oracle
                .expect("output_token_oracle is not set"),

            input_token_price_history: self
                .instruction
                .input_token_price_history
                .expect("input_token_price_history is not set"),

            input_token_oracle: self
                .instruction
                .input_token_oracle
                .expect("input_token_oracle is not set"),

            event_emitter: self
                .instruction
                .event_emitter
                .expect("event_emitter is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct GoosefxV2SwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pair: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_registry: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_pool_in_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_pool_out_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_ata_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_ata_out: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_out_main_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_out_secondary_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_in_main_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_in_secondary_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ssl_out_fee_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_price_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_price_history: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_emitter: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
