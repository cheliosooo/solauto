//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MarcoPoloSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub state: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub token_x: solana_program::pubkey::Pubkey,

    pub token_y: solana_program::pubkey::Pubkey,

    pub pool_x_account: solana_program::pubkey::Pubkey,

    pub pool_y_account: solana_program::pubkey::Pubkey,

    pub swapper_x_account: solana_program::pubkey::Pubkey,

    pub swapper_y_account: solana_program::pubkey::Pubkey,

    pub swapper: solana_program::pubkey::Pubkey,

    pub referrer_x_account: solana_program::pubkey::Pubkey,

    pub referrer_y_account: solana_program::pubkey::Pubkey,

    pub referrer: solana_program::pubkey::Pubkey,

    pub program_authority: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,
}

impl MarcoPoloSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.state, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_y,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_x_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_y_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapper_x_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapper_y_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swapper,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.referrer_x_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.referrer_y_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.referrer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = MarcoPoloSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MarcoPoloSwapInstructionData {
    discriminator: [u8; 8],
}

impl MarcoPoloSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [241, 147, 94, 15, 58, 108, 179, 68],
        }
    }
}

/// Instruction builder for `MarcoPoloSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` state
///   2. `[writable]` pool
///   3. `[]` token_x
///   4. `[]` token_y
///   5. `[writable]` pool_x_account
///   6. `[writable]` pool_y_account
///   7. `[writable]` swapper_x_account
///   8. `[writable]` swapper_y_account
///   9. `[writable]` swapper
///   10. `[writable]` referrer_x_account
///   11. `[writable]` referrer_y_account
///   12. `[writable]` referrer
///   13. `[]` program_authority
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   15. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   16. `[]` associated_token_program
///   17. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct MarcoPoloSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    state: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    token_x: Option<solana_program::pubkey::Pubkey>,
    token_y: Option<solana_program::pubkey::Pubkey>,
    pool_x_account: Option<solana_program::pubkey::Pubkey>,
    pool_y_account: Option<solana_program::pubkey::Pubkey>,
    swapper_x_account: Option<solana_program::pubkey::Pubkey>,
    swapper_y_account: Option<solana_program::pubkey::Pubkey>,
    swapper: Option<solana_program::pubkey::Pubkey>,
    referrer_x_account: Option<solana_program::pubkey::Pubkey>,
    referrer_y_account: Option<solana_program::pubkey::Pubkey>,
    referrer: Option<solana_program::pubkey::Pubkey>,
    program_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MarcoPoloSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn token_x(&mut self, token_x: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_x = Some(token_x);
        self
    }
    #[inline(always)]
    pub fn token_y(&mut self, token_y: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_y = Some(token_y);
        self
    }
    #[inline(always)]
    pub fn pool_x_account(&mut self, pool_x_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_x_account = Some(pool_x_account);
        self
    }
    #[inline(always)]
    pub fn pool_y_account(&mut self, pool_y_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_y_account = Some(pool_y_account);
        self
    }
    #[inline(always)]
    pub fn swapper_x_account(
        &mut self,
        swapper_x_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swapper_x_account = Some(swapper_x_account);
        self
    }
    #[inline(always)]
    pub fn swapper_y_account(
        &mut self,
        swapper_y_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swapper_y_account = Some(swapper_y_account);
        self
    }
    #[inline(always)]
    pub fn swapper(&mut self, swapper: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swapper = Some(swapper);
        self
    }
    #[inline(always)]
    pub fn referrer_x_account(
        &mut self,
        referrer_x_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.referrer_x_account = Some(referrer_x_account);
        self
    }
    #[inline(always)]
    pub fn referrer_y_account(
        &mut self,
        referrer_y_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.referrer_y_account = Some(referrer_y_account);
        self
    }
    #[inline(always)]
    pub fn referrer(&mut self, referrer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.referrer = Some(referrer);
        self
    }
    #[inline(always)]
    pub fn program_authority(
        &mut self,
        program_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.program_authority = Some(program_authority);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MarcoPoloSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            state: self.state.expect("state is not set"),
            pool: self.pool.expect("pool is not set"),
            token_x: self.token_x.expect("token_x is not set"),
            token_y: self.token_y.expect("token_y is not set"),
            pool_x_account: self.pool_x_account.expect("pool_x_account is not set"),
            pool_y_account: self.pool_y_account.expect("pool_y_account is not set"),
            swapper_x_account: self
                .swapper_x_account
                .expect("swapper_x_account is not set"),
            swapper_y_account: self
                .swapper_y_account
                .expect("swapper_y_account is not set"),
            swapper: self.swapper.expect("swapper is not set"),
            referrer_x_account: self
                .referrer_x_account
                .expect("referrer_x_account is not set"),
            referrer_y_account: self
                .referrer_y_account
                .expect("referrer_y_account is not set"),
            referrer: self.referrer.expect("referrer is not set"),
            program_authority: self
                .program_authority
                .expect("program_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `marco_polo_swap` CPI accounts.
pub struct MarcoPoloSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer: &'b solana_program::account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `marco_polo_swap` CPI instruction.
pub struct MarcoPoloSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub state: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub swapper: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_x_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer_y_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub referrer: &'b solana_program::account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MarcoPoloSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MarcoPoloSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            state: accounts.state,
            pool: accounts.pool,
            token_x: accounts.token_x,
            token_y: accounts.token_y,
            pool_x_account: accounts.pool_x_account,
            pool_y_account: accounts.pool_y_account,
            swapper_x_account: accounts.swapper_x_account,
            swapper_y_account: accounts.swapper_y_account,
            swapper: accounts.swapper,
            referrer_x_account: accounts.referrer_x_account,
            referrer_y_account: accounts.referrer_y_account,
            referrer: accounts.referrer,
            program_authority: accounts.program_authority,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            rent: accounts.rent,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_y.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_x_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_y_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapper_x_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapper_y_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swapper.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.referrer_x_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.referrer_y_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.referrer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = MarcoPoloSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.state.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.token_x.clone());
        account_infos.push(self.token_y.clone());
        account_infos.push(self.pool_x_account.clone());
        account_infos.push(self.pool_y_account.clone());
        account_infos.push(self.swapper_x_account.clone());
        account_infos.push(self.swapper_y_account.clone());
        account_infos.push(self.swapper.clone());
        account_infos.push(self.referrer_x_account.clone());
        account_infos.push(self.referrer_y_account.clone());
        account_infos.push(self.referrer.clone());
        account_infos.push(self.program_authority.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MarcoPoloSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` state
///   2. `[writable]` pool
///   3. `[]` token_x
///   4. `[]` token_y
///   5. `[writable]` pool_x_account
///   6. `[writable]` pool_y_account
///   7. `[writable]` swapper_x_account
///   8. `[writable]` swapper_y_account
///   9. `[writable]` swapper
///   10. `[writable]` referrer_x_account
///   11. `[writable]` referrer_y_account
///   12. `[writable]` referrer
///   13. `[]` program_authority
///   14. `[]` system_program
///   15. `[]` token_program
///   16. `[]` associated_token_program
///   17. `[]` rent
pub struct MarcoPoloSwapCpiBuilder<'a, 'b> {
    instruction: Box<MarcoPoloSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MarcoPoloSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MarcoPoloSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            state: None,
            pool: None,
            token_x: None,
            token_y: None,
            pool_x_account: None,
            pool_y_account: None,
            swapper_x_account: None,
            swapper_y_account: None,
            swapper: None,
            referrer_x_account: None,
            referrer_y_account: None,
            referrer: None,
            program_authority: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            rent: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn state(&mut self, state: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.state = Some(state);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn token_x(
        &mut self,
        token_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_x = Some(token_x);
        self
    }
    #[inline(always)]
    pub fn token_y(
        &mut self,
        token_y: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_y = Some(token_y);
        self
    }
    #[inline(always)]
    pub fn pool_x_account(
        &mut self,
        pool_x_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_x_account = Some(pool_x_account);
        self
    }
    #[inline(always)]
    pub fn pool_y_account(
        &mut self,
        pool_y_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_y_account = Some(pool_y_account);
        self
    }
    #[inline(always)]
    pub fn swapper_x_account(
        &mut self,
        swapper_x_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapper_x_account = Some(swapper_x_account);
        self
    }
    #[inline(always)]
    pub fn swapper_y_account(
        &mut self,
        swapper_y_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapper_y_account = Some(swapper_y_account);
        self
    }
    #[inline(always)]
    pub fn swapper(
        &mut self,
        swapper: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swapper = Some(swapper);
        self
    }
    #[inline(always)]
    pub fn referrer_x_account(
        &mut self,
        referrer_x_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.referrer_x_account = Some(referrer_x_account);
        self
    }
    #[inline(always)]
    pub fn referrer_y_account(
        &mut self,
        referrer_y_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.referrer_y_account = Some(referrer_y_account);
        self
    }
    #[inline(always)]
    pub fn referrer(
        &mut self,
        referrer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.referrer = Some(referrer);
        self
    }
    #[inline(always)]
    pub fn program_authority(
        &mut self,
        program_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_authority = Some(program_authority);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MarcoPoloSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            state: self.instruction.state.expect("state is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            token_x: self.instruction.token_x.expect("token_x is not set"),

            token_y: self.instruction.token_y.expect("token_y is not set"),

            pool_x_account: self
                .instruction
                .pool_x_account
                .expect("pool_x_account is not set"),

            pool_y_account: self
                .instruction
                .pool_y_account
                .expect("pool_y_account is not set"),

            swapper_x_account: self
                .instruction
                .swapper_x_account
                .expect("swapper_x_account is not set"),

            swapper_y_account: self
                .instruction
                .swapper_y_account
                .expect("swapper_y_account is not set"),

            swapper: self.instruction.swapper.expect("swapper is not set"),

            referrer_x_account: self
                .instruction
                .referrer_x_account
                .expect("referrer_x_account is not set"),

            referrer_y_account: self
                .instruction
                .referrer_y_account
                .expect("referrer_y_account is not set"),

            referrer: self.instruction.referrer.expect("referrer is not set"),

            program_authority: self
                .instruction
                .program_authority
                .expect("program_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MarcoPoloSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_y: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_x_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_y_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swapper_x_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swapper_y_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swapper: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrer_x_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrer_y_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referrer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
