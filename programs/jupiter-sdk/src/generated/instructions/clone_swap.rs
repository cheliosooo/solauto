//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct CloneSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub clone: solana_program::pubkey::Pubkey,

    pub pools: solana_program::pubkey::Pubkey,

    pub oracles: solana_program::pubkey::Pubkey,

    pub user_collateral_token_account: solana_program::pubkey::Pubkey,

    pub user_onasset_token_account: solana_program::pubkey::Pubkey,

    pub onasset_mint: solana_program::pubkey::Pubkey,

    pub collateral_mint: solana_program::pubkey::Pubkey,

    pub collateral_vault: solana_program::pubkey::Pubkey,

    pub treasury_onasset_token_account: solana_program::pubkey::Pubkey,

    pub treasury_collateral_token_account: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub clone_staking: solana_program::pubkey::Pubkey,

    pub user_staking_account: solana_program::pubkey::Pubkey,

    pub clone_staking_program: solana_program::pubkey::Pubkey,
}

impl CloneSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.clone, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pools, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.oracles,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_collateral_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_onasset_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.onasset_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collateral_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collateral_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_onasset_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury_collateral_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clone_staking,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_staking_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clone_staking_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = CloneSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct CloneSwapInstructionData {
    discriminator: [u8; 8],
}

impl CloneSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [85, 201, 154, 92, 133, 31, 142, 85],
        }
    }
}

/// Instruction builder for `CloneSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` user
///   2. `[writable]` clone
///   3. `[writable]` pools
///   4. `[writable]` oracles
///   5. `[writable]` user_collateral_token_account
///   6. `[writable]` user_onasset_token_account
///   7. `[writable]` onasset_mint
///   8. `[]` collateral_mint
///   9. `[writable]` collateral_vault
///   10. `[writable]` treasury_onasset_token_account
///   11. `[writable]` treasury_collateral_token_account
///   12. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   13. `[]` clone_staking
///   14. `[]` user_staking_account
///   15. `[]` clone_staking_program
#[derive(Default)]
pub struct CloneSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    clone: Option<solana_program::pubkey::Pubkey>,
    pools: Option<solana_program::pubkey::Pubkey>,
    oracles: Option<solana_program::pubkey::Pubkey>,
    user_collateral_token_account: Option<solana_program::pubkey::Pubkey>,
    user_onasset_token_account: Option<solana_program::pubkey::Pubkey>,
    onasset_mint: Option<solana_program::pubkey::Pubkey>,
    collateral_mint: Option<solana_program::pubkey::Pubkey>,
    collateral_vault: Option<solana_program::pubkey::Pubkey>,
    treasury_onasset_token_account: Option<solana_program::pubkey::Pubkey>,
    treasury_collateral_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    clone_staking: Option<solana_program::pubkey::Pubkey>,
    user_staking_account: Option<solana_program::pubkey::Pubkey>,
    clone_staking_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CloneSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn clone(&mut self, clone: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clone = Some(clone);
        self
    }
    #[inline(always)]
    pub fn pools(&mut self, pools: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pools = Some(pools);
        self
    }
    #[inline(always)]
    pub fn oracles(&mut self, oracles: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracles = Some(oracles);
        self
    }
    #[inline(always)]
    pub fn user_collateral_token_account(
        &mut self,
        user_collateral_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_collateral_token_account = Some(user_collateral_token_account);
        self
    }
    #[inline(always)]
    pub fn user_onasset_token_account(
        &mut self,
        user_onasset_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_onasset_token_account = Some(user_onasset_token_account);
        self
    }
    #[inline(always)]
    pub fn onasset_mint(&mut self, onasset_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.onasset_mint = Some(onasset_mint);
        self
    }
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_mint = Some(collateral_mint);
        self
    }
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_vault = Some(collateral_vault);
        self
    }
    #[inline(always)]
    pub fn treasury_onasset_token_account(
        &mut self,
        treasury_onasset_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_onasset_token_account = Some(treasury_onasset_token_account);
        self
    }
    #[inline(always)]
    pub fn treasury_collateral_token_account(
        &mut self,
        treasury_collateral_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_collateral_token_account = Some(treasury_collateral_token_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn clone_staking(&mut self, clone_staking: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clone_staking = Some(clone_staking);
        self
    }
    #[inline(always)]
    pub fn user_staking_account(
        &mut self,
        user_staking_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_staking_account = Some(user_staking_account);
        self
    }
    #[inline(always)]
    pub fn clone_staking_program(
        &mut self,
        clone_staking_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.clone_staking_program = Some(clone_staking_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CloneSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            user: self.user.expect("user is not set"),
            clone: self.clone.expect("clone is not set"),
            pools: self.pools.expect("pools is not set"),
            oracles: self.oracles.expect("oracles is not set"),
            user_collateral_token_account: self
                .user_collateral_token_account
                .expect("user_collateral_token_account is not set"),
            user_onasset_token_account: self
                .user_onasset_token_account
                .expect("user_onasset_token_account is not set"),
            onasset_mint: self.onasset_mint.expect("onasset_mint is not set"),
            collateral_mint: self.collateral_mint.expect("collateral_mint is not set"),
            collateral_vault: self.collateral_vault.expect("collateral_vault is not set"),
            treasury_onasset_token_account: self
                .treasury_onasset_token_account
                .expect("treasury_onasset_token_account is not set"),
            treasury_collateral_token_account: self
                .treasury_collateral_token_account
                .expect("treasury_collateral_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            clone_staking: self.clone_staking.expect("clone_staking is not set"),
            user_staking_account: self
                .user_staking_account
                .expect("user_staking_account is not set"),
            clone_staking_program: self
                .clone_staking_program
                .expect("clone_staking_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `clone_swap` CPI accounts.
pub struct CloneSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone: &'b solana_program::account_info::AccountInfo<'a>,

    pub pools: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracles: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub onasset_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone_staking: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_staking_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone_staking_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `clone_swap` CPI instruction.
pub struct CloneSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone: &'b solana_program::account_info::AccountInfo<'a>,

    pub pools: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracles: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub onasset_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone_staking: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_staking_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub clone_staking_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CloneSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CloneSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            user: accounts.user,
            clone: accounts.clone,
            pools: accounts.pools,
            oracles: accounts.oracles,
            user_collateral_token_account: accounts.user_collateral_token_account,
            user_onasset_token_account: accounts.user_onasset_token_account,
            onasset_mint: accounts.onasset_mint,
            collateral_mint: accounts.collateral_mint,
            collateral_vault: accounts.collateral_vault,
            treasury_onasset_token_account: accounts.treasury_onasset_token_account,
            treasury_collateral_token_account: accounts.treasury_collateral_token_account,
            token_program: accounts.token_program,
            clone_staking: accounts.clone_staking,
            user_staking_account: accounts.user_staking_account,
            clone_staking_program: accounts.clone_staking_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.clone.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pools.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oracles.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_collateral_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_onasset_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.onasset_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collateral_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collateral_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_onasset_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury_collateral_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clone_staking.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_staking_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clone_staking_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = CloneSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.clone.clone());
        account_infos.push(self.pools.clone());
        account_infos.push(self.oracles.clone());
        account_infos.push(self.user_collateral_token_account.clone());
        account_infos.push(self.user_onasset_token_account.clone());
        account_infos.push(self.onasset_mint.clone());
        account_infos.push(self.collateral_mint.clone());
        account_infos.push(self.collateral_vault.clone());
        account_infos.push(self.treasury_onasset_token_account.clone());
        account_infos.push(self.treasury_collateral_token_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.clone_staking.clone());
        account_infos.push(self.user_staking_account.clone());
        account_infos.push(self.clone_staking_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CloneSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` user
///   2. `[writable]` clone
///   3. `[writable]` pools
///   4. `[writable]` oracles
///   5. `[writable]` user_collateral_token_account
///   6. `[writable]` user_onasset_token_account
///   7. `[writable]` onasset_mint
///   8. `[]` collateral_mint
///   9. `[writable]` collateral_vault
///   10. `[writable]` treasury_onasset_token_account
///   11. `[writable]` treasury_collateral_token_account
///   12. `[]` token_program
///   13. `[]` clone_staking
///   14. `[]` user_staking_account
///   15. `[]` clone_staking_program
pub struct CloneSwapCpiBuilder<'a, 'b> {
    instruction: Box<CloneSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloneSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CloneSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            user: None,
            clone: None,
            pools: None,
            oracles: None,
            user_collateral_token_account: None,
            user_onasset_token_account: None,
            onasset_mint: None,
            collateral_mint: None,
            collateral_vault: None,
            treasury_onasset_token_account: None,
            treasury_collateral_token_account: None,
            token_program: None,
            clone_staking: None,
            user_staking_account: None,
            clone_staking_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn clone(&mut self, clone: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clone = Some(clone);
        self
    }
    #[inline(always)]
    pub fn pools(&mut self, pools: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pools = Some(pools);
        self
    }
    #[inline(always)]
    pub fn oracles(
        &mut self,
        oracles: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracles = Some(oracles);
        self
    }
    #[inline(always)]
    pub fn user_collateral_token_account(
        &mut self,
        user_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_collateral_token_account = Some(user_collateral_token_account);
        self
    }
    #[inline(always)]
    pub fn user_onasset_token_account(
        &mut self,
        user_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_onasset_token_account = Some(user_onasset_token_account);
        self
    }
    #[inline(always)]
    pub fn onasset_mint(
        &mut self,
        onasset_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.onasset_mint = Some(onasset_mint);
        self
    }
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_mint = Some(collateral_mint);
        self
    }
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_vault = Some(collateral_vault);
        self
    }
    #[inline(always)]
    pub fn treasury_onasset_token_account(
        &mut self,
        treasury_onasset_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_onasset_token_account = Some(treasury_onasset_token_account);
        self
    }
    #[inline(always)]
    pub fn treasury_collateral_token_account(
        &mut self,
        treasury_collateral_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_collateral_token_account =
            Some(treasury_collateral_token_account);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn clone_staking(
        &mut self,
        clone_staking: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.clone_staking = Some(clone_staking);
        self
    }
    #[inline(always)]
    pub fn user_staking_account(
        &mut self,
        user_staking_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_staking_account = Some(user_staking_account);
        self
    }
    #[inline(always)]
    pub fn clone_staking_program(
        &mut self,
        clone_staking_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.clone_staking_program = Some(clone_staking_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CloneSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            user: self.instruction.user.expect("user is not set"),

            clone: self.instruction.clone.expect("clone is not set"),

            pools: self.instruction.pools.expect("pools is not set"),

            oracles: self.instruction.oracles.expect("oracles is not set"),

            user_collateral_token_account: self
                .instruction
                .user_collateral_token_account
                .expect("user_collateral_token_account is not set"),

            user_onasset_token_account: self
                .instruction
                .user_onasset_token_account
                .expect("user_onasset_token_account is not set"),

            onasset_mint: self
                .instruction
                .onasset_mint
                .expect("onasset_mint is not set"),

            collateral_mint: self
                .instruction
                .collateral_mint
                .expect("collateral_mint is not set"),

            collateral_vault: self
                .instruction
                .collateral_vault
                .expect("collateral_vault is not set"),

            treasury_onasset_token_account: self
                .instruction
                .treasury_onasset_token_account
                .expect("treasury_onasset_token_account is not set"),

            treasury_collateral_token_account: self
                .instruction
                .treasury_collateral_token_account
                .expect("treasury_collateral_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            clone_staking: self
                .instruction
                .clone_staking
                .expect("clone_staking is not set"),

            user_staking_account: self
                .instruction
                .user_staking_account
                .expect("user_staking_account is not set"),

            clone_staking_program: self
                .instruction
                .clone_staking_program
                .expect("clone_staking_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CloneSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clone: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pools: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracles: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_collateral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_onasset_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    onasset_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_onasset_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_collateral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clone_staking: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_staking_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clone_staking_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
