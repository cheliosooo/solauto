//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct TokenSwapV2 {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub swap: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub user_transfer_authority: solana_program::pubkey::Pubkey,

    pub source: solana_program::pubkey::Pubkey,

    pub swap_source: solana_program::pubkey::Pubkey,

    pub swap_destination: solana_program::pubkey::Pubkey,

    pub destination: solana_program::pubkey::Pubkey,

    pub pool_mint: solana_program::pubkey::Pubkey,

    pub pool_fee: solana_program::pubkey::Pubkey,

    pub source_mint: solana_program::pubkey::Pubkey,

    pub destination_mint: solana_program::pubkey::Pubkey,

    pub source_token_program: solana_program::pubkey::Pubkey,

    pub destination_token_program: solana_program::pubkey::Pubkey,

    pub pool_token_program: solana_program::pubkey::Pubkey,
}

impl TokenSwapV2 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.destination_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.source_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.destination_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = TokenSwapV2InstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct TokenSwapV2InstructionData {
    discriminator: [u8; 8],
}

impl TokenSwapV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [51, 48, 145, 115, 123, 95, 71, 138],
        }
    }
}

/// Instruction builder for `TokenSwapV2`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` swap
///   2. `[]` authority
///   3. `[]` user_transfer_authority
///   4. `[writable]` source
///   5. `[writable]` swap_source
///   6. `[writable]` swap_destination
///   7. `[writable]` destination
///   8. `[writable]` pool_mint
///   9. `[writable]` pool_fee
///   10. `[]` source_mint
///   11. `[]` destination_mint
///   12. `[]` source_token_program
///   13. `[]` destination_token_program
///   14. `[]` pool_token_program
#[derive(Default)]
pub struct TokenSwapV2Builder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    swap: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
    source: Option<solana_program::pubkey::Pubkey>,
    swap_source: Option<solana_program::pubkey::Pubkey>,
    swap_destination: Option<solana_program::pubkey::Pubkey>,
    destination: Option<solana_program::pubkey::Pubkey>,
    pool_mint: Option<solana_program::pubkey::Pubkey>,
    pool_fee: Option<solana_program::pubkey::Pubkey>,
    source_mint: Option<solana_program::pubkey::Pubkey>,
    destination_mint: Option<solana_program::pubkey::Pubkey>,
    source_token_program: Option<solana_program::pubkey::Pubkey>,
    destination_token_program: Option<solana_program::pubkey::Pubkey>,
    pool_token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl TokenSwapV2Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn swap(&mut self, swap: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap = Some(swap);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn source(&mut self, source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source = Some(source);
        self
    }
    #[inline(always)]
    pub fn swap_source(&mut self, swap_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_source = Some(swap_source);
        self
    }
    #[inline(always)]
    pub fn swap_destination(
        &mut self,
        swap_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_destination = Some(swap_destination);
        self
    }
    #[inline(always)]
    pub fn destination(&mut self, destination: solana_program::pubkey::Pubkey) -> &mut Self {
        self.destination = Some(destination);
        self
    }
    #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn pool_fee(&mut self, pool_fee: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_fee = Some(pool_fee);
        self
    }
    #[inline(always)]
    pub fn source_mint(&mut self, source_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_mint = Some(source_mint);
        self
    }
    #[inline(always)]
    pub fn destination_mint(
        &mut self,
        destination_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_mint = Some(destination_mint);
        self
    }
    #[inline(always)]
    pub fn source_token_program(
        &mut self,
        source_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.source_token_program = Some(source_token_program);
        self
    }
    #[inline(always)]
    pub fn destination_token_program(
        &mut self,
        destination_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token_program = Some(destination_token_program);
        self
    }
    #[inline(always)]
    pub fn pool_token_program(
        &mut self,
        pool_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_token_program = Some(pool_token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = TokenSwapV2 {
            swap_program: self.swap_program.expect("swap_program is not set"),
            swap: self.swap.expect("swap is not set"),
            authority: self.authority.expect("authority is not set"),
            user_transfer_authority: self
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),
            source: self.source.expect("source is not set"),
            swap_source: self.swap_source.expect("swap_source is not set"),
            swap_destination: self.swap_destination.expect("swap_destination is not set"),
            destination: self.destination.expect("destination is not set"),
            pool_mint: self.pool_mint.expect("pool_mint is not set"),
            pool_fee: self.pool_fee.expect("pool_fee is not set"),
            source_mint: self.source_mint.expect("source_mint is not set"),
            destination_mint: self.destination_mint.expect("destination_mint is not set"),
            source_token_program: self
                .source_token_program
                .expect("source_token_program is not set"),
            destination_token_program: self
                .destination_token_program
                .expect("destination_token_program is not set"),
            pool_token_program: self
                .pool_token_program
                .expect("pool_token_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `token_swap_v2` CPI accounts.
pub struct TokenSwapV2CpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `token_swap_v2` CPI instruction.
pub struct TokenSwapV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> TokenSwapV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: TokenSwapV2CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            swap: accounts.swap,
            authority: accounts.authority,
            user_transfer_authority: accounts.user_transfer_authority,
            source: accounts.source,
            swap_source: accounts.swap_source,
            swap_destination: accounts.swap_destination,
            destination: accounts.destination,
            pool_mint: accounts.pool_mint,
            pool_fee: accounts.pool_fee,
            source_mint: accounts.source_mint,
            destination_mint: accounts.destination_mint,
            source_token_program: accounts.source_token_program,
            destination_token_program: accounts.destination_token_program,
            pool_token_program: accounts.pool_token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.destination_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.source_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.destination_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = TokenSwapV2InstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.swap.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.user_transfer_authority.clone());
        account_infos.push(self.source.clone());
        account_infos.push(self.swap_source.clone());
        account_infos.push(self.swap_destination.clone());
        account_infos.push(self.destination.clone());
        account_infos.push(self.pool_mint.clone());
        account_infos.push(self.pool_fee.clone());
        account_infos.push(self.source_mint.clone());
        account_infos.push(self.destination_mint.clone());
        account_infos.push(self.source_token_program.clone());
        account_infos.push(self.destination_token_program.clone());
        account_infos.push(self.pool_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TokenSwapV2` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` swap
///   2. `[]` authority
///   3. `[]` user_transfer_authority
///   4. `[writable]` source
///   5. `[writable]` swap_source
///   6. `[writable]` swap_destination
///   7. `[writable]` destination
///   8. `[writable]` pool_mint
///   9. `[writable]` pool_fee
///   10. `[]` source_mint
///   11. `[]` destination_mint
///   12. `[]` source_token_program
///   13. `[]` destination_token_program
///   14. `[]` pool_token_program
pub struct TokenSwapV2CpiBuilder<'a, 'b> {
    instruction: Box<TokenSwapV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TokenSwapV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TokenSwapV2CpiBuilderInstruction {
            __program: program,
            swap_program: None,
            swap: None,
            authority: None,
            user_transfer_authority: None,
            source: None,
            swap_source: None,
            swap_destination: None,
            destination: None,
            pool_mint: None,
            pool_fee: None,
            source_mint: None,
            destination_mint: None,
            source_token_program: None,
            destination_token_program: None,
            pool_token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn swap(&mut self, swap: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.swap = Some(swap);
        self
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn source(
        &mut self,
        source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source = Some(source);
        self
    }
    #[inline(always)]
    pub fn swap_source(
        &mut self,
        swap_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_source = Some(swap_source);
        self
    }
    #[inline(always)]
    pub fn swap_destination(
        &mut self,
        swap_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_destination = Some(swap_destination);
        self
    }
    #[inline(always)]
    pub fn destination(
        &mut self,
        destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination = Some(destination);
        self
    }
    #[inline(always)]
    pub fn pool_mint(
        &mut self,
        pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn pool_fee(
        &mut self,
        pool_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_fee = Some(pool_fee);
        self
    }
    #[inline(always)]
    pub fn source_mint(
        &mut self,
        source_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_mint = Some(source_mint);
        self
    }
    #[inline(always)]
    pub fn destination_mint(
        &mut self,
        destination_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_mint = Some(destination_mint);
        self
    }
    #[inline(always)]
    pub fn source_token_program(
        &mut self,
        source_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_token_program = Some(source_token_program);
        self
    }
    #[inline(always)]
    pub fn destination_token_program(
        &mut self,
        destination_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token_program = Some(destination_token_program);
        self
    }
    #[inline(always)]
    pub fn pool_token_program(
        &mut self,
        pool_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_program = Some(pool_token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = TokenSwapV2Cpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            swap: self.instruction.swap.expect("swap is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            user_transfer_authority: self
                .instruction
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),

            source: self.instruction.source.expect("source is not set"),

            swap_source: self
                .instruction
                .swap_source
                .expect("swap_source is not set"),

            swap_destination: self
                .instruction
                .swap_destination
                .expect("swap_destination is not set"),

            destination: self
                .instruction
                .destination
                .expect("destination is not set"),

            pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),

            pool_fee: self.instruction.pool_fee.expect("pool_fee is not set"),

            source_mint: self
                .instruction
                .source_mint
                .expect("source_mint is not set"),

            destination_mint: self
                .instruction
                .destination_mint
                .expect("destination_mint is not set"),

            source_token_program: self
                .instruction
                .source_token_program
                .expect("source_token_program is not set"),

            destination_token_program: self
                .instruction
                .destination_token_program
                .expect("destination_token_program is not set"),

            pool_token_program: self
                .instruction
                .pool_token_program
                .expect("pool_token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct TokenSwapV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
