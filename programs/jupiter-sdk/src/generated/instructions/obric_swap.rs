//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct ObricSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub trading_pair: solana_program::pubkey::Pubkey,

    pub mint_x: solana_program::pubkey::Pubkey,

    pub mint_y: solana_program::pubkey::Pubkey,

    pub reserve_x: solana_program::pubkey::Pubkey,

    pub reserve_y: solana_program::pubkey::Pubkey,

    pub user_token_account_x: solana_program::pubkey::Pubkey,

    pub user_token_account_y: solana_program::pubkey::Pubkey,

    pub protocol_fee: solana_program::pubkey::Pubkey,

    pub x_price_feed: solana_program::pubkey::Pubkey,

    pub y_price_feed: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl ObricSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.trading_pair,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint_y,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_y,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_account_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_account_y,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.x_price_feed,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.y_price_feed,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = ObricSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct ObricSwapInstructionData {
    discriminator: [u8; 8],
}

impl ObricSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [65, 93, 96, 169, 190, 214, 95, 3],
        }
    }
}

/// Instruction builder for `ObricSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` trading_pair
///   2. `[]` mint_x
///   3. `[]` mint_y
///   4. `[writable]` reserve_x
///   5. `[writable]` reserve_y
///   6. `[writable]` user_token_account_x
///   7. `[writable]` user_token_account_y
///   8. `[writable]` protocol_fee
///   9. `[]` x_price_feed
///   10. `[]` y_price_feed
///   11. `[]` user
///   12. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct ObricSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    trading_pair: Option<solana_program::pubkey::Pubkey>,
    mint_x: Option<solana_program::pubkey::Pubkey>,
    mint_y: Option<solana_program::pubkey::Pubkey>,
    reserve_x: Option<solana_program::pubkey::Pubkey>,
    reserve_y: Option<solana_program::pubkey::Pubkey>,
    user_token_account_x: Option<solana_program::pubkey::Pubkey>,
    user_token_account_y: Option<solana_program::pubkey::Pubkey>,
    protocol_fee: Option<solana_program::pubkey::Pubkey>,
    x_price_feed: Option<solana_program::pubkey::Pubkey>,
    y_price_feed: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ObricSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn trading_pair(&mut self, trading_pair: solana_program::pubkey::Pubkey) -> &mut Self {
        self.trading_pair = Some(trading_pair);
        self
    }
    #[inline(always)]
    pub fn mint_x(&mut self, mint_x: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_x = Some(mint_x);
        self
    }
    #[inline(always)]
    pub fn mint_y(&mut self, mint_y: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_y = Some(mint_y);
        self
    }
    #[inline(always)]
    pub fn reserve_x(&mut self, reserve_x: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_x = Some(reserve_x);
        self
    }
    #[inline(always)]
    pub fn reserve_y(&mut self, reserve_y: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_y = Some(reserve_y);
        self
    }
    #[inline(always)]
    pub fn user_token_account_x(
        &mut self,
        user_token_account_x: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_account_x = Some(user_token_account_x);
        self
    }
    #[inline(always)]
    pub fn user_token_account_y(
        &mut self,
        user_token_account_y: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_token_account_y = Some(user_token_account_y);
        self
    }
    #[inline(always)]
    pub fn protocol_fee(&mut self, protocol_fee: solana_program::pubkey::Pubkey) -> &mut Self {
        self.protocol_fee = Some(protocol_fee);
        self
    }
    #[inline(always)]
    pub fn x_price_feed(&mut self, x_price_feed: solana_program::pubkey::Pubkey) -> &mut Self {
        self.x_price_feed = Some(x_price_feed);
        self
    }
    #[inline(always)]
    pub fn y_price_feed(&mut self, y_price_feed: solana_program::pubkey::Pubkey) -> &mut Self {
        self.y_price_feed = Some(y_price_feed);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ObricSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            trading_pair: self.trading_pair.expect("trading_pair is not set"),
            mint_x: self.mint_x.expect("mint_x is not set"),
            mint_y: self.mint_y.expect("mint_y is not set"),
            reserve_x: self.reserve_x.expect("reserve_x is not set"),
            reserve_y: self.reserve_y.expect("reserve_y is not set"),
            user_token_account_x: self
                .user_token_account_x
                .expect("user_token_account_x is not set"),
            user_token_account_y: self
                .user_token_account_y
                .expect("user_token_account_y is not set"),
            protocol_fee: self.protocol_fee.expect("protocol_fee is not set"),
            x_price_feed: self.x_price_feed.expect("x_price_feed is not set"),
            y_price_feed: self.y_price_feed.expect("y_price_feed is not set"),
            user: self.user.expect("user is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `obric_swap` CPI accounts.
pub struct ObricSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub trading_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub x_price_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub y_price_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `obric_swap` CPI instruction.
pub struct ObricSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub trading_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_account_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub x_price_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub y_price_feed: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ObricSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ObricSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            trading_pair: accounts.trading_pair,
            mint_x: accounts.mint_x,
            mint_y: accounts.mint_y,
            reserve_x: accounts.reserve_x,
            reserve_y: accounts.reserve_y,
            user_token_account_x: accounts.user_token_account_x,
            user_token_account_y: accounts.user_token_account_y,
            protocol_fee: accounts.protocol_fee,
            x_price_feed: accounts.x_price_feed,
            y_price_feed: accounts.y_price_feed,
            user: accounts.user,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.trading_pair.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint_y.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_y.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_account_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_account_y.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.x_price_feed.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.y_price_feed.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = ObricSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.trading_pair.clone());
        account_infos.push(self.mint_x.clone());
        account_infos.push(self.mint_y.clone());
        account_infos.push(self.reserve_x.clone());
        account_infos.push(self.reserve_y.clone());
        account_infos.push(self.user_token_account_x.clone());
        account_infos.push(self.user_token_account_y.clone());
        account_infos.push(self.protocol_fee.clone());
        account_infos.push(self.x_price_feed.clone());
        account_infos.push(self.y_price_feed.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ObricSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` trading_pair
///   2. `[]` mint_x
///   3. `[]` mint_y
///   4. `[writable]` reserve_x
///   5. `[writable]` reserve_y
///   6. `[writable]` user_token_account_x
///   7. `[writable]` user_token_account_y
///   8. `[writable]` protocol_fee
///   9. `[]` x_price_feed
///   10. `[]` y_price_feed
///   11. `[]` user
///   12. `[]` token_program
pub struct ObricSwapCpiBuilder<'a, 'b> {
    instruction: Box<ObricSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ObricSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ObricSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            trading_pair: None,
            mint_x: None,
            mint_y: None,
            reserve_x: None,
            reserve_y: None,
            user_token_account_x: None,
            user_token_account_y: None,
            protocol_fee: None,
            x_price_feed: None,
            y_price_feed: None,
            user: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn trading_pair(
        &mut self,
        trading_pair: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.trading_pair = Some(trading_pair);
        self
    }
    #[inline(always)]
    pub fn mint_x(
        &mut self,
        mint_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_x = Some(mint_x);
        self
    }
    #[inline(always)]
    pub fn mint_y(
        &mut self,
        mint_y: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_y = Some(mint_y);
        self
    }
    #[inline(always)]
    pub fn reserve_x(
        &mut self,
        reserve_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_x = Some(reserve_x);
        self
    }
    #[inline(always)]
    pub fn reserve_y(
        &mut self,
        reserve_y: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_y = Some(reserve_y);
        self
    }
    #[inline(always)]
    pub fn user_token_account_x(
        &mut self,
        user_token_account_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_account_x = Some(user_token_account_x);
        self
    }
    #[inline(always)]
    pub fn user_token_account_y(
        &mut self,
        user_token_account_y: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_account_y = Some(user_token_account_y);
        self
    }
    #[inline(always)]
    pub fn protocol_fee(
        &mut self,
        protocol_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee = Some(protocol_fee);
        self
    }
    #[inline(always)]
    pub fn x_price_feed(
        &mut self,
        x_price_feed: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.x_price_feed = Some(x_price_feed);
        self
    }
    #[inline(always)]
    pub fn y_price_feed(
        &mut self,
        y_price_feed: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.y_price_feed = Some(y_price_feed);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ObricSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            trading_pair: self
                .instruction
                .trading_pair
                .expect("trading_pair is not set"),

            mint_x: self.instruction.mint_x.expect("mint_x is not set"),

            mint_y: self.instruction.mint_y.expect("mint_y is not set"),

            reserve_x: self.instruction.reserve_x.expect("reserve_x is not set"),

            reserve_y: self.instruction.reserve_y.expect("reserve_y is not set"),

            user_token_account_x: self
                .instruction
                .user_token_account_x
                .expect("user_token_account_x is not set"),

            user_token_account_y: self
                .instruction
                .user_token_account_y
                .expect("user_token_account_y is not set"),

            protocol_fee: self
                .instruction
                .protocol_fee
                .expect("protocol_fee is not set"),

            x_price_feed: self
                .instruction
                .x_price_feed
                .expect("x_price_feed is not set"),

            y_price_feed: self
                .instruction
                .y_price_feed
                .expect("y_price_feed is not set"),

            user: self.instruction.user.expect("user is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct ObricSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    trading_pair: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_y: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_y: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_account_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_account_y: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    x_price_feed: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    y_price_feed: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
