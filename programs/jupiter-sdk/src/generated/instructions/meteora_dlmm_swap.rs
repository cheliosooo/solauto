//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MeteoraDlmmSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub lb_pair: solana_program::pubkey::Pubkey,

    pub bin_array_bitmap_extension: solana_program::pubkey::Pubkey,

    pub reserve_x: solana_program::pubkey::Pubkey,

    pub reserve_y: solana_program::pubkey::Pubkey,

    pub user_token_in: solana_program::pubkey::Pubkey,

    pub user_token_out: solana_program::pubkey::Pubkey,

    pub token_x_mint: solana_program::pubkey::Pubkey,

    pub token_y_mint: solana_program::pubkey::Pubkey,

    pub oracle: solana_program::pubkey::Pubkey,

    pub host_fee_in: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub token_x_program: solana_program::pubkey::Pubkey,

    pub token_y_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl MeteoraDlmmSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lb_pair,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.bin_array_bitmap_extension,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_x,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_y,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_out,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_x_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_y_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.host_fee_in,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_x_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_y_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = MeteoraDlmmSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct MeteoraDlmmSwapInstructionData {
    discriminator: [u8; 8],
}

impl MeteoraDlmmSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [127, 64, 37, 138, 173, 243, 207, 84],
        }
    }
}

/// Instruction builder for `MeteoraDlmmSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` lb_pair
///   2. `[]` bin_array_bitmap_extension
///   3. `[writable]` reserve_x
///   4. `[writable]` reserve_y
///   5. `[writable]` user_token_in
///   6. `[writable]` user_token_out
///   7. `[]` token_x_mint
///   8. `[]` token_y_mint
///   9. `[writable]` oracle
///   10. `[]` host_fee_in
///   11. `[]` user
///   12. `[]` token_x_program
///   13. `[]` token_y_program
///   14. `[]` event_authority
///   15. `[]` program
#[derive(Default)]
pub struct MeteoraDlmmSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    lb_pair: Option<solana_program::pubkey::Pubkey>,
    bin_array_bitmap_extension: Option<solana_program::pubkey::Pubkey>,
    reserve_x: Option<solana_program::pubkey::Pubkey>,
    reserve_y: Option<solana_program::pubkey::Pubkey>,
    user_token_in: Option<solana_program::pubkey::Pubkey>,
    user_token_out: Option<solana_program::pubkey::Pubkey>,
    token_x_mint: Option<solana_program::pubkey::Pubkey>,
    token_y_mint: Option<solana_program::pubkey::Pubkey>,
    oracle: Option<solana_program::pubkey::Pubkey>,
    host_fee_in: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    token_x_program: Option<solana_program::pubkey::Pubkey>,
    token_y_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MeteoraDlmmSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lb_pair = Some(lb_pair);
        self
    }
    #[inline(always)]
    pub fn bin_array_bitmap_extension(
        &mut self,
        bin_array_bitmap_extension: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bin_array_bitmap_extension = Some(bin_array_bitmap_extension);
        self
    }
    #[inline(always)]
    pub fn reserve_x(&mut self, reserve_x: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_x = Some(reserve_x);
        self
    }
    #[inline(always)]
    pub fn reserve_y(&mut self, reserve_y: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve_y = Some(reserve_y);
        self
    }
    #[inline(always)]
    pub fn user_token_in(&mut self, user_token_in: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_token_in = Some(user_token_in);
        self
    }
    #[inline(always)]
    pub fn user_token_out(&mut self, user_token_out: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_token_out = Some(user_token_out);
        self
    }
    #[inline(always)]
    pub fn token_x_mint(&mut self, token_x_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_x_mint = Some(token_x_mint);
        self
    }
    #[inline(always)]
    pub fn token_y_mint(&mut self, token_y_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_y_mint = Some(token_y_mint);
        self
    }
    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_program::pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn host_fee_in(&mut self, host_fee_in: solana_program::pubkey::Pubkey) -> &mut Self {
        self.host_fee_in = Some(host_fee_in);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn token_x_program(
        &mut self,
        token_x_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_x_program = Some(token_x_program);
        self
    }
    #[inline(always)]
    pub fn token_y_program(
        &mut self,
        token_y_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_y_program = Some(token_y_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MeteoraDlmmSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            lb_pair: self.lb_pair.expect("lb_pair is not set"),
            bin_array_bitmap_extension: self
                .bin_array_bitmap_extension
                .expect("bin_array_bitmap_extension is not set"),
            reserve_x: self.reserve_x.expect("reserve_x is not set"),
            reserve_y: self.reserve_y.expect("reserve_y is not set"),
            user_token_in: self.user_token_in.expect("user_token_in is not set"),
            user_token_out: self.user_token_out.expect("user_token_out is not set"),
            token_x_mint: self.token_x_mint.expect("token_x_mint is not set"),
            token_y_mint: self.token_y_mint.expect("token_y_mint is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            host_fee_in: self.host_fee_in.expect("host_fee_in is not set"),
            user: self.user.expect("user is not set"),
            token_x_program: self.token_x_program.expect("token_x_program is not set"),
            token_y_program: self.token_y_program.expect("token_y_program is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `meteora_dlmm_swap` CPI accounts.
pub struct MeteoraDlmmSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_bitmap_extension: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `meteora_dlmm_swap` CPI instruction.
pub struct MeteoraDlmmSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_program::account_info::AccountInfo<'a>,

    pub bin_array_bitmap_extension: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_out: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub host_fee_in: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_x_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_y_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MeteoraDlmmSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MeteoraDlmmSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            lb_pair: accounts.lb_pair,
            bin_array_bitmap_extension: accounts.bin_array_bitmap_extension,
            reserve_x: accounts.reserve_x,
            reserve_y: accounts.reserve_y,
            user_token_in: accounts.user_token_in,
            user_token_out: accounts.user_token_out,
            token_x_mint: accounts.token_x_mint,
            token_y_mint: accounts.token_y_mint,
            oracle: accounts.oracle,
            host_fee_in: accounts.host_fee_in,
            user: accounts.user,
            token_x_program: accounts.token_x_program,
            token_y_program: accounts.token_y_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lb_pair.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.bin_array_bitmap_extension.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_x.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_y.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_out.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_x_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_y_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.host_fee_in.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_x_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_y_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = MeteoraDlmmSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.lb_pair.clone());
        account_infos.push(self.bin_array_bitmap_extension.clone());
        account_infos.push(self.reserve_x.clone());
        account_infos.push(self.reserve_y.clone());
        account_infos.push(self.user_token_in.clone());
        account_infos.push(self.user_token_out.clone());
        account_infos.push(self.token_x_mint.clone());
        account_infos.push(self.token_y_mint.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.host_fee_in.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.token_x_program.clone());
        account_infos.push(self.token_y_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MeteoraDlmmSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[writable]` lb_pair
///   2. `[]` bin_array_bitmap_extension
///   3. `[writable]` reserve_x
///   4. `[writable]` reserve_y
///   5. `[writable]` user_token_in
///   6. `[writable]` user_token_out
///   7. `[]` token_x_mint
///   8. `[]` token_y_mint
///   9. `[writable]` oracle
///   10. `[]` host_fee_in
///   11. `[]` user
///   12. `[]` token_x_program
///   13. `[]` token_y_program
///   14. `[]` event_authority
///   15. `[]` program
pub struct MeteoraDlmmSwapCpiBuilder<'a, 'b> {
    instruction: Box<MeteoraDlmmSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MeteoraDlmmSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MeteoraDlmmSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            lb_pair: None,
            bin_array_bitmap_extension: None,
            reserve_x: None,
            reserve_y: None,
            user_token_in: None,
            user_token_out: None,
            token_x_mint: None,
            token_y_mint: None,
            oracle: None,
            host_fee_in: None,
            user: None,
            token_x_program: None,
            token_y_program: None,
            event_authority: None,
            program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn lb_pair(
        &mut self,
        lb_pair: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lb_pair = Some(lb_pair);
        self
    }
    #[inline(always)]
    pub fn bin_array_bitmap_extension(
        &mut self,
        bin_array_bitmap_extension: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bin_array_bitmap_extension = Some(bin_array_bitmap_extension);
        self
    }
    #[inline(always)]
    pub fn reserve_x(
        &mut self,
        reserve_x: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_x = Some(reserve_x);
        self
    }
    #[inline(always)]
    pub fn reserve_y(
        &mut self,
        reserve_y: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_y = Some(reserve_y);
        self
    }
    #[inline(always)]
    pub fn user_token_in(
        &mut self,
        user_token_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_in = Some(user_token_in);
        self
    }
    #[inline(always)]
    pub fn user_token_out(
        &mut self,
        user_token_out: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_out = Some(user_token_out);
        self
    }
    #[inline(always)]
    pub fn token_x_mint(
        &mut self,
        token_x_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_x_mint = Some(token_x_mint);
        self
    }
    #[inline(always)]
    pub fn token_y_mint(
        &mut self,
        token_y_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_y_mint = Some(token_y_mint);
        self
    }
    #[inline(always)]
    pub fn oracle(
        &mut self,
        oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }
    #[inline(always)]
    pub fn host_fee_in(
        &mut self,
        host_fee_in: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.host_fee_in = Some(host_fee_in);
        self
    }
    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }
    #[inline(always)]
    pub fn token_x_program(
        &mut self,
        token_x_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_x_program = Some(token_x_program);
        self
    }
    #[inline(always)]
    pub fn token_y_program(
        &mut self,
        token_y_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_y_program = Some(token_y_program);
        self
    }
    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }
    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MeteoraDlmmSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            lb_pair: self.instruction.lb_pair.expect("lb_pair is not set"),

            bin_array_bitmap_extension: self
                .instruction
                .bin_array_bitmap_extension
                .expect("bin_array_bitmap_extension is not set"),

            reserve_x: self.instruction.reserve_x.expect("reserve_x is not set"),

            reserve_y: self.instruction.reserve_y.expect("reserve_y is not set"),

            user_token_in: self
                .instruction
                .user_token_in
                .expect("user_token_in is not set"),

            user_token_out: self
                .instruction
                .user_token_out
                .expect("user_token_out is not set"),

            token_x_mint: self
                .instruction
                .token_x_mint
                .expect("token_x_mint is not set"),

            token_y_mint: self
                .instruction
                .token_y_mint
                .expect("token_y_mint is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            host_fee_in: self
                .instruction
                .host_fee_in
                .expect("host_fee_in is not set"),

            user: self.instruction.user.expect("user is not set"),

            token_x_program: self
                .instruction
                .token_x_program
                .expect("token_x_program is not set"),

            token_y_program: self
                .instruction
                .token_y_program
                .expect("token_y_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MeteoraDlmmSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lb_pair: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bin_array_bitmap_extension: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_x: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_y: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_out: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_x_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_y_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    host_fee_in: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_x_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_y_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
