//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct HeliumTreasuryManagementRedeemV0 {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub treasury_management: solana_program::pubkey::Pubkey,

    pub treasury_mint: solana_program::pubkey::Pubkey,

    pub supply_mint: solana_program::pubkey::Pubkey,

    pub treasury: solana_program::pubkey::Pubkey,

    pub circuit_breaker: solana_program::pubkey::Pubkey,

    pub from: solana_program::pubkey::Pubkey,

    pub to: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub circuit_breaker_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl HeliumTreasuryManagementRedeemV0 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasury_management,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.treasury_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.supply_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.treasury,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.circuit_breaker,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.from, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.to, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.circuit_breaker_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = HeliumTreasuryManagementRedeemV0InstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct HeliumTreasuryManagementRedeemV0InstructionData {
    discriminator: [u8; 8],
}

impl HeliumTreasuryManagementRedeemV0InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [163, 159, 163, 25, 243, 161, 108, 74],
        }
    }
}

/// Instruction builder for `HeliumTreasuryManagementRedeemV0`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` treasury_management
///   2. `[]` treasury_mint
///   3. `[writable]` supply_mint
///   4. `[writable]` treasury
///   5. `[writable]` circuit_breaker
///   6. `[writable]` from
///   7. `[writable]` to
///   8. `[]` owner
///   9. `[]` circuit_breaker_program
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct HeliumTreasuryManagementRedeemV0Builder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    treasury_management: Option<solana_program::pubkey::Pubkey>,
    treasury_mint: Option<solana_program::pubkey::Pubkey>,
    supply_mint: Option<solana_program::pubkey::Pubkey>,
    treasury: Option<solana_program::pubkey::Pubkey>,
    circuit_breaker: Option<solana_program::pubkey::Pubkey>,
    from: Option<solana_program::pubkey::Pubkey>,
    to: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    circuit_breaker_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl HeliumTreasuryManagementRedeemV0Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn treasury_management(
        &mut self,
        treasury_management: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.treasury_management = Some(treasury_management);
        self
    }
    #[inline(always)]
    pub fn treasury_mint(&mut self, treasury_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.treasury_mint = Some(treasury_mint);
        self
    }
    #[inline(always)]
    pub fn supply_mint(&mut self, supply_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.supply_mint = Some(supply_mint);
        self
    }
    #[inline(always)]
    pub fn treasury(&mut self, treasury: solana_program::pubkey::Pubkey) -> &mut Self {
        self.treasury = Some(treasury);
        self
    }
    #[inline(always)]
    pub fn circuit_breaker(
        &mut self,
        circuit_breaker: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.circuit_breaker = Some(circuit_breaker);
        self
    }
    #[inline(always)]
    pub fn from(&mut self, from: solana_program::pubkey::Pubkey) -> &mut Self {
        self.from = Some(from);
        self
    }
    #[inline(always)]
    pub fn to(&mut self, to: solana_program::pubkey::Pubkey) -> &mut Self {
        self.to = Some(to);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn circuit_breaker_program(
        &mut self,
        circuit_breaker_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.circuit_breaker_program = Some(circuit_breaker_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = HeliumTreasuryManagementRedeemV0 {
            swap_program: self.swap_program.expect("swap_program is not set"),
            treasury_management: self
                .treasury_management
                .expect("treasury_management is not set"),
            treasury_mint: self.treasury_mint.expect("treasury_mint is not set"),
            supply_mint: self.supply_mint.expect("supply_mint is not set"),
            treasury: self.treasury.expect("treasury is not set"),
            circuit_breaker: self.circuit_breaker.expect("circuit_breaker is not set"),
            from: self.from.expect("from is not set"),
            to: self.to.expect("to is not set"),
            owner: self.owner.expect("owner is not set"),
            circuit_breaker_program: self
                .circuit_breaker_program
                .expect("circuit_breaker_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `helium_treasury_management_redeem_v0` CPI accounts.
pub struct HeliumTreasuryManagementRedeemV0CpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_management: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub circuit_breaker: &'b solana_program::account_info::AccountInfo<'a>,

    pub from: &'b solana_program::account_info::AccountInfo<'a>,

    pub to: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub circuit_breaker_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `helium_treasury_management_redeem_v0` CPI instruction.
pub struct HeliumTreasuryManagementRedeemV0Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_management: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub treasury: &'b solana_program::account_info::AccountInfo<'a>,

    pub circuit_breaker: &'b solana_program::account_info::AccountInfo<'a>,

    pub from: &'b solana_program::account_info::AccountInfo<'a>,

    pub to: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub circuit_breaker_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> HeliumTreasuryManagementRedeemV0Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: HeliumTreasuryManagementRedeemV0CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            treasury_management: accounts.treasury_management,
            treasury_mint: accounts.treasury_mint,
            supply_mint: accounts.supply_mint,
            treasury: accounts.treasury,
            circuit_breaker: accounts.circuit_breaker,
            from: accounts.from,
            to: accounts.to,
            owner: accounts.owner,
            circuit_breaker_program: accounts.circuit_breaker_program,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasury_management.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.treasury_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.supply_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.treasury.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.circuit_breaker.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.from.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.to.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.circuit_breaker_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = HeliumTreasuryManagementRedeemV0InstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.treasury_management.clone());
        account_infos.push(self.treasury_mint.clone());
        account_infos.push(self.supply_mint.clone());
        account_infos.push(self.treasury.clone());
        account_infos.push(self.circuit_breaker.clone());
        account_infos.push(self.from.clone());
        account_infos.push(self.to.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.circuit_breaker_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `HeliumTreasuryManagementRedeemV0` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` treasury_management
///   2. `[]` treasury_mint
///   3. `[writable]` supply_mint
///   4. `[writable]` treasury
///   5. `[writable]` circuit_breaker
///   6. `[writable]` from
///   7. `[writable]` to
///   8. `[]` owner
///   9. `[]` circuit_breaker_program
///   10. `[]` token_program
pub struct HeliumTreasuryManagementRedeemV0CpiBuilder<'a, 'b> {
    instruction: Box<HeliumTreasuryManagementRedeemV0CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> HeliumTreasuryManagementRedeemV0CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(HeliumTreasuryManagementRedeemV0CpiBuilderInstruction {
            __program: program,
            swap_program: None,
            treasury_management: None,
            treasury_mint: None,
            supply_mint: None,
            treasury: None,
            circuit_breaker: None,
            from: None,
            to: None,
            owner: None,
            circuit_breaker_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn treasury_management(
        &mut self,
        treasury_management: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_management = Some(treasury_management);
        self
    }
    #[inline(always)]
    pub fn treasury_mint(
        &mut self,
        treasury_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury_mint = Some(treasury_mint);
        self
    }
    #[inline(always)]
    pub fn supply_mint(
        &mut self,
        supply_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_mint = Some(supply_mint);
        self
    }
    #[inline(always)]
    pub fn treasury(
        &mut self,
        treasury: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.treasury = Some(treasury);
        self
    }
    #[inline(always)]
    pub fn circuit_breaker(
        &mut self,
        circuit_breaker: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.circuit_breaker = Some(circuit_breaker);
        self
    }
    #[inline(always)]
    pub fn from(&mut self, from: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.from = Some(from);
        self
    }
    #[inline(always)]
    pub fn to(&mut self, to: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.to = Some(to);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    #[inline(always)]
    pub fn circuit_breaker_program(
        &mut self,
        circuit_breaker_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.circuit_breaker_program = Some(circuit_breaker_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = HeliumTreasuryManagementRedeemV0Cpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            treasury_management: self
                .instruction
                .treasury_management
                .expect("treasury_management is not set"),

            treasury_mint: self
                .instruction
                .treasury_mint
                .expect("treasury_mint is not set"),

            supply_mint: self
                .instruction
                .supply_mint
                .expect("supply_mint is not set"),

            treasury: self.instruction.treasury.expect("treasury is not set"),

            circuit_breaker: self
                .instruction
                .circuit_breaker
                .expect("circuit_breaker is not set"),

            from: self.instruction.from.expect("from is not set"),

            to: self.instruction.to.expect("to is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            circuit_breaker_program: self
                .instruction
                .circuit_breaker_program
                .expect("circuit_breaker_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct HeliumTreasuryManagementRedeemV0CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_management: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    treasury: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    circuit_breaker: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    from: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    to: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    circuit_breaker_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
