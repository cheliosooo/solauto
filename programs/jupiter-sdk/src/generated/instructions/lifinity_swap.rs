//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct LifinitySwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub amm: solana_program::pubkey::Pubkey,

    pub user_transfer_authority: solana_program::pubkey::Pubkey,

    pub source_info: solana_program::pubkey::Pubkey,

    pub destination_info: solana_program::pubkey::Pubkey,

    pub swap_source: solana_program::pubkey::Pubkey,

    pub swap_destination: solana_program::pubkey::Pubkey,

    pub pool_mint: solana_program::pubkey::Pubkey,

    pub fee_account: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub pyth_account: solana_program::pubkey::Pubkey,

    pub pyth_pc_account: solana_program::pubkey::Pubkey,

    pub config_account: solana_program::pubkey::Pubkey,
}

impl LifinitySwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user_transfer_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.source_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination_info,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_source,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.swap_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pyth_pc_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = LifinitySwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct LifinitySwapInstructionData {
    discriminator: [u8; 8],
}

impl LifinitySwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [23, 96, 165, 33, 90, 214, 96, 153],
        }
    }
}

/// Instruction builder for `LifinitySwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` authority
///   2. `[]` amm
///   3. `[]` user_transfer_authority
///   4. `[writable]` source_info
///   5. `[writable]` destination_info
///   6. `[writable]` swap_source
///   7. `[writable]` swap_destination
///   8. `[writable]` pool_mint
///   9. `[writable]` fee_account
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[]` pyth_account
///   12. `[]` pyth_pc_account
///   13. `[writable]` config_account
#[derive(Default)]
pub struct LifinitySwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    amm: Option<solana_program::pubkey::Pubkey>,
    user_transfer_authority: Option<solana_program::pubkey::Pubkey>,
    source_info: Option<solana_program::pubkey::Pubkey>,
    destination_info: Option<solana_program::pubkey::Pubkey>,
    swap_source: Option<solana_program::pubkey::Pubkey>,
    swap_destination: Option<solana_program::pubkey::Pubkey>,
    pool_mint: Option<solana_program::pubkey::Pubkey>,
    fee_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    pyth_account: Option<solana_program::pubkey::Pubkey>,
    pyth_pc_account: Option<solana_program::pubkey::Pubkey>,
    config_account: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LifinitySwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn amm(&mut self, amm: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm = Some(amm);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn source_info(&mut self, source_info: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_info = Some(source_info);
        self
    }
    #[inline(always)]
    pub fn destination_info(
        &mut self,
        destination_info: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_info = Some(destination_info);
        self
    }
    #[inline(always)]
    pub fn swap_source(&mut self, swap_source: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_source = Some(swap_source);
        self
    }
    #[inline(always)]
    pub fn swap_destination(
        &mut self,
        swap_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.swap_destination = Some(swap_destination);
        self
    }
    #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn fee_account(&mut self, fee_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_account = Some(fee_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn pyth_account(&mut self, pyth_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pyth_account = Some(pyth_account);
        self
    }
    #[inline(always)]
    pub fn pyth_pc_account(
        &mut self,
        pyth_pc_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pyth_pc_account = Some(pyth_pc_account);
        self
    }
    #[inline(always)]
    pub fn config_account(&mut self, config_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config_account = Some(config_account);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = LifinitySwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            authority: self.authority.expect("authority is not set"),
            amm: self.amm.expect("amm is not set"),
            user_transfer_authority: self
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),
            source_info: self.source_info.expect("source_info is not set"),
            destination_info: self.destination_info.expect("destination_info is not set"),
            swap_source: self.swap_source.expect("swap_source is not set"),
            swap_destination: self.swap_destination.expect("swap_destination is not set"),
            pool_mint: self.pool_mint.expect("pool_mint is not set"),
            fee_account: self.fee_account.expect("fee_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            pyth_account: self.pyth_account.expect("pyth_account is not set"),
            pyth_pc_account: self.pyth_pc_account.expect("pyth_pc_account is not set"),
            config_account: self.config_account.expect("config_account is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `lifinity_swap` CPI accounts.
pub struct LifinitySwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_pc_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub config_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `lifinity_swap` CPI instruction.
pub struct LifinitySwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_info: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_source: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_destination: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pyth_pc_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub config_account: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> LifinitySwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LifinitySwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            authority: accounts.authority,
            amm: accounts.amm,
            user_transfer_authority: accounts.user_transfer_authority,
            source_info: accounts.source_info,
            destination_info: accounts.destination_info,
            swap_source: accounts.swap_source,
            swap_destination: accounts.swap_destination,
            pool_mint: accounts.pool_mint,
            fee_account: accounts.fee_account,
            token_program: accounts.token_program,
            pyth_account: accounts.pyth_account,
            pyth_pc_account: accounts.pyth_pc_account,
            config_account: accounts.config_account,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user_transfer_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.source_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination_info.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_source.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.swap_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pyth_pc_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = LifinitySwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.amm.clone());
        account_infos.push(self.user_transfer_authority.clone());
        account_infos.push(self.source_info.clone());
        account_infos.push(self.destination_info.clone());
        account_infos.push(self.swap_source.clone());
        account_infos.push(self.swap_destination.clone());
        account_infos.push(self.pool_mint.clone());
        account_infos.push(self.fee_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.pyth_account.clone());
        account_infos.push(self.pyth_pc_account.clone());
        account_infos.push(self.config_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `LifinitySwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` authority
///   2. `[]` amm
///   3. `[]` user_transfer_authority
///   4. `[writable]` source_info
///   5. `[writable]` destination_info
///   6. `[writable]` swap_source
///   7. `[writable]` swap_destination
///   8. `[writable]` pool_mint
///   9. `[writable]` fee_account
///   10. `[]` token_program
///   11. `[]` pyth_account
///   12. `[]` pyth_pc_account
///   13. `[writable]` config_account
pub struct LifinitySwapCpiBuilder<'a, 'b> {
    instruction: Box<LifinitySwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LifinitySwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LifinitySwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            authority: None,
            amm: None,
            user_transfer_authority: None,
            source_info: None,
            destination_info: None,
            swap_source: None,
            swap_destination: None,
            pool_mint: None,
            fee_account: None,
            token_program: None,
            pyth_account: None,
            pyth_pc_account: None,
            config_account: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn amm(&mut self, amm: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.amm = Some(amm);
        self
    }
    #[inline(always)]
    pub fn user_transfer_authority(
        &mut self,
        user_transfer_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_transfer_authority = Some(user_transfer_authority);
        self
    }
    #[inline(always)]
    pub fn source_info(
        &mut self,
        source_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_info = Some(source_info);
        self
    }
    #[inline(always)]
    pub fn destination_info(
        &mut self,
        destination_info: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_info = Some(destination_info);
        self
    }
    #[inline(always)]
    pub fn swap_source(
        &mut self,
        swap_source: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_source = Some(swap_source);
        self
    }
    #[inline(always)]
    pub fn swap_destination(
        &mut self,
        swap_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_destination = Some(swap_destination);
        self
    }
    #[inline(always)]
    pub fn pool_mint(
        &mut self,
        pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn fee_account(
        &mut self,
        fee_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_account = Some(fee_account);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn pyth_account(
        &mut self,
        pyth_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pyth_account = Some(pyth_account);
        self
    }
    #[inline(always)]
    pub fn pyth_pc_account(
        &mut self,
        pyth_pc_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pyth_pc_account = Some(pyth_pc_account);
        self
    }
    #[inline(always)]
    pub fn config_account(
        &mut self,
        config_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_account = Some(config_account);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = LifinitySwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            amm: self.instruction.amm.expect("amm is not set"),

            user_transfer_authority: self
                .instruction
                .user_transfer_authority
                .expect("user_transfer_authority is not set"),

            source_info: self
                .instruction
                .source_info
                .expect("source_info is not set"),

            destination_info: self
                .instruction
                .destination_info
                .expect("destination_info is not set"),

            swap_source: self
                .instruction
                .swap_source
                .expect("swap_source is not set"),

            swap_destination: self
                .instruction
                .swap_destination
                .expect("swap_destination is not set"),

            pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),

            fee_account: self
                .instruction
                .fee_account
                .expect("fee_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            pyth_account: self
                .instruction
                .pyth_account
                .expect("pyth_account is not set"),

            pyth_pc_account: self
                .instruction
                .pyth_pc_account
                .expect("pyth_pc_account is not set"),

            config_account: self
                .instruction
                .config_account
                .expect("config_account is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct LifinitySwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_transfer_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_info: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_source: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    swap_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pyth_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pyth_pc_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
