//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct AldrinSwap {
    pub swap_program: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub pool_signer: solana_program::pubkey::Pubkey,

    pub pool_mint: solana_program::pubkey::Pubkey,

    pub base_token_vault: solana_program::pubkey::Pubkey,

    pub quote_token_vault: solana_program::pubkey::Pubkey,

    pub fee_pool_token_account: solana_program::pubkey::Pubkey,

    pub wallet_authority: solana_program::pubkey::Pubkey,

    pub user_base_token_account: solana_program::pubkey::Pubkey,

    pub user_quote_token_account: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl AldrinSwap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_pool_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.wallet_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_base_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_quote_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = AldrinSwapInstructionData::new().try_to_vec().unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct AldrinSwapInstructionData {
    discriminator: [u8; 8],
}

impl AldrinSwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [251, 232, 119, 166, 225, 185, 169, 161],
        }
    }
}

/// Instruction builder for `AldrinSwap`.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` pool
///   2. `[]` pool_signer
///   3. `[writable]` pool_mint
///   4. `[writable]` base_token_vault
///   5. `[writable]` quote_token_vault
///   6. `[writable]` fee_pool_token_account
///   7. `[]` wallet_authority
///   8. `[writable]` user_base_token_account
///   9. `[writable]` user_quote_token_account
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Default)]
pub struct AldrinSwapBuilder {
    swap_program: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    pool_signer: Option<solana_program::pubkey::Pubkey>,
    pool_mint: Option<solana_program::pubkey::Pubkey>,
    base_token_vault: Option<solana_program::pubkey::Pubkey>,
    quote_token_vault: Option<solana_program::pubkey::Pubkey>,
    fee_pool_token_account: Option<solana_program::pubkey::Pubkey>,
    wallet_authority: Option<solana_program::pubkey::Pubkey>,
    user_base_token_account: Option<solana_program::pubkey::Pubkey>,
    user_quote_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AldrinSwapBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn swap_program(&mut self, swap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn pool_signer(&mut self, pool_signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_signer = Some(pool_signer);
        self
    }
    #[inline(always)]
    pub fn pool_mint(&mut self, pool_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn base_token_vault(
        &mut self,
        base_token_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_vault = Some(base_token_vault);
        self
    }
    #[inline(always)]
    pub fn quote_token_vault(
        &mut self,
        quote_token_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_vault = Some(quote_token_vault);
        self
    }
    #[inline(always)]
    pub fn fee_pool_token_account(
        &mut self,
        fee_pool_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_pool_token_account = Some(fee_pool_token_account);
        self
    }
    #[inline(always)]
    pub fn wallet_authority(
        &mut self,
        wallet_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.wallet_authority = Some(wallet_authority);
        self
    }
    #[inline(always)]
    pub fn user_base_token_account(
        &mut self,
        user_base_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_base_token_account = Some(user_base_token_account);
        self
    }
    #[inline(always)]
    pub fn user_quote_token_account(
        &mut self,
        user_quote_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_quote_token_account = Some(user_quote_token_account);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AldrinSwap {
            swap_program: self.swap_program.expect("swap_program is not set"),
            pool: self.pool.expect("pool is not set"),
            pool_signer: self.pool_signer.expect("pool_signer is not set"),
            pool_mint: self.pool_mint.expect("pool_mint is not set"),
            base_token_vault: self.base_token_vault.expect("base_token_vault is not set"),
            quote_token_vault: self
                .quote_token_vault
                .expect("quote_token_vault is not set"),
            fee_pool_token_account: self
                .fee_pool_token_account
                .expect("fee_pool_token_account is not set"),
            wallet_authority: self.wallet_authority.expect("wallet_authority is not set"),
            user_base_token_account: self
                .user_base_token_account
                .expect("user_base_token_account is not set"),
            user_quote_token_account: self
                .user_quote_token_account
                .expect("user_quote_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `aldrin_swap` CPI accounts.
pub struct AldrinSwapCpiAccounts<'a, 'b> {
    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub wallet_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `aldrin_swap` CPI instruction.
pub struct AldrinSwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub wallet_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> AldrinSwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AldrinSwapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            swap_program: accounts.swap_program,
            pool: accounts.pool,
            pool_signer: accounts.pool_signer,
            pool_mint: accounts.pool_mint,
            base_token_vault: accounts.base_token_vault,
            quote_token_vault: accounts.quote_token_vault,
            fee_pool_token_account: accounts.fee_pool_token_account,
            wallet_authority: accounts.wallet_authority,
            user_base_token_account: accounts.user_base_token_account,
            user_quote_token_account: accounts.user_quote_token_account,
            token_program: accounts.token_program,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_pool_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.wallet_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_base_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_quote_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = AldrinSwapInstructionData::new().try_to_vec().unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.swap_program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.pool_signer.clone());
        account_infos.push(self.pool_mint.clone());
        account_infos.push(self.base_token_vault.clone());
        account_infos.push(self.quote_token_vault.clone());
        account_infos.push(self.fee_pool_token_account.clone());
        account_infos.push(self.wallet_authority.clone());
        account_infos.push(self.user_base_token_account.clone());
        account_infos.push(self.user_quote_token_account.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AldrinSwap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` swap_program
///   1. `[]` pool
///   2. `[]` pool_signer
///   3. `[writable]` pool_mint
///   4. `[writable]` base_token_vault
///   5. `[writable]` quote_token_vault
///   6. `[writable]` fee_pool_token_account
///   7. `[]` wallet_authority
///   8. `[writable]` user_base_token_account
///   9. `[writable]` user_quote_token_account
///   10. `[]` token_program
pub struct AldrinSwapCpiBuilder<'a, 'b> {
    instruction: Box<AldrinSwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AldrinSwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AldrinSwapCpiBuilderInstruction {
            __program: program,
            swap_program: None,
            pool: None,
            pool_signer: None,
            pool_mint: None,
            base_token_vault: None,
            quote_token_vault: None,
            fee_pool_token_account: None,
            wallet_authority: None,
            user_base_token_account: None,
            user_quote_token_account: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn swap_program(
        &mut self,
        swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.swap_program = Some(swap_program);
        self
    }
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }
    #[inline(always)]
    pub fn pool_signer(
        &mut self,
        pool_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_signer = Some(pool_signer);
        self
    }
    #[inline(always)]
    pub fn pool_mint(
        &mut self,
        pool_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_mint = Some(pool_mint);
        self
    }
    #[inline(always)]
    pub fn base_token_vault(
        &mut self,
        base_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_vault = Some(base_token_vault);
        self
    }
    #[inline(always)]
    pub fn quote_token_vault(
        &mut self,
        quote_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_vault = Some(quote_token_vault);
        self
    }
    #[inline(always)]
    pub fn fee_pool_token_account(
        &mut self,
        fee_pool_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_pool_token_account = Some(fee_pool_token_account);
        self
    }
    #[inline(always)]
    pub fn wallet_authority(
        &mut self,
        wallet_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.wallet_authority = Some(wallet_authority);
        self
    }
    #[inline(always)]
    pub fn user_base_token_account(
        &mut self,
        user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_base_token_account = Some(user_base_token_account);
        self
    }
    #[inline(always)]
    pub fn user_quote_token_account(
        &mut self,
        user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_quote_token_account = Some(user_quote_token_account);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = AldrinSwapCpi {
            __program: self.instruction.__program,

            swap_program: self
                .instruction
                .swap_program
                .expect("swap_program is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            pool_signer: self
                .instruction
                .pool_signer
                .expect("pool_signer is not set"),

            pool_mint: self.instruction.pool_mint.expect("pool_mint is not set"),

            base_token_vault: self
                .instruction
                .base_token_vault
                .expect("base_token_vault is not set"),

            quote_token_vault: self
                .instruction
                .quote_token_vault
                .expect("quote_token_vault is not set"),

            fee_pool_token_account: self
                .instruction
                .fee_pool_token_account
                .expect("fee_pool_token_account is not set"),

            wallet_authority: self
                .instruction
                .wallet_authority
                .expect("wallet_authority is not set"),

            user_base_token_account: self
                .instruction
                .user_base_token_account
                .expect("user_base_token_account is not set"),

            user_quote_token_account: self
                .instruction
                .user_quote_token_account
                .expect("user_quote_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct AldrinSwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_pool_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wallet_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_base_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_quote_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
