//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::RebalanceArgs;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SolendRebalance {
    pub signer: solana_program::pubkey::Pubkey,

    pub solend_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub ata_program: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub ixs_sysvar: solana_program::pubkey::Pubkey,

    pub solauto_fees_receiver_ta: solana_program::pubkey::Pubkey,

    pub authority_referral_state: solana_program::pubkey::Pubkey,

    pub referred_by_state: Option<solana_program::pubkey::Pubkey>,

    pub referred_by_supply_ta: Option<solana_program::pubkey::Pubkey>,

    pub solauto_position: solana_program::pubkey::Pubkey,

    pub intermediary_ta: solana_program::pubkey::Pubkey,

    pub lending_market: solana_program::pubkey::Pubkey,

    pub obligation: solana_program::pubkey::Pubkey,

    pub supply_reserve: solana_program::pubkey::Pubkey,

    pub supply_reserve_pyth_price_oracle: solana_program::pubkey::Pubkey,

    pub supply_reserve_switchboard_oracle: solana_program::pubkey::Pubkey,

    pub supply_liquidity_mint: solana_program::pubkey::Pubkey,

    pub position_supply_liquidity_ta: solana_program::pubkey::Pubkey,

    pub reserve_supply_liquidity_ta: solana_program::pubkey::Pubkey,

    pub supply_collateral_mint: solana_program::pubkey::Pubkey,

    pub position_supply_collateral_ta: solana_program::pubkey::Pubkey,

    pub reserve_supply_collateral_ta: solana_program::pubkey::Pubkey,

    pub debt_reserve: solana_program::pubkey::Pubkey,

    pub debt_reserve_fee_receiver_ta: solana_program::pubkey::Pubkey,

    pub debt_liquidity_mint: solana_program::pubkey::Pubkey,

    pub position_debt_liquidity_ta: solana_program::pubkey::Pubkey,

    pub reserve_debt_liquidity_ta: solana_program::pubkey::Pubkey,
}

impl SolendRebalance {
    pub fn instruction(
        &self,
        args: SolendRebalanceInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SolendRebalanceInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(30 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.signer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.solend_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ixs_sysvar,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.solauto_fees_receiver_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority_referral_state,
            false,
        ));
        if let Some(referred_by_state) = self.referred_by_state {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                referred_by_state,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(referred_by_supply_ta) = self.referred_by_supply_ta {
            accounts.push(solana_program::instruction::AccountMeta::new(
                referred_by_supply_ta,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.solauto_position,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.intermediary_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lending_market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.obligation,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.supply_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_reserve_pyth_price_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_reserve_switchboard_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_liquidity_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_supply_liquidity_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_supply_liquidity_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_collateral_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_supply_collateral_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_supply_collateral_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.debt_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.debt_reserve_fee_receiver_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.debt_liquidity_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_debt_liquidity_ta,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve_debt_liquidity_ta,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = SolendRebalanceInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct SolendRebalanceInstructionData {
    discriminator: u8,
}

impl SolendRebalanceInstructionData {
    fn new() -> Self {
        Self { discriminator: 10 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SolendRebalanceInstructionArgs {
    pub rebalance_args: RebalanceArgs,
}

/// Instruction builder for `SolendRebalance`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[]` solend_program
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   3. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   4. `[optional]` ata_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   5. `[]` clock
///   6. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   7. `[]` ixs_sysvar
///   8. `[writable]` solauto_fees_receiver_ta
///   9. `[]` authority_referral_state
///   10. `[optional]` referred_by_state
///   11. `[writable, optional]` referred_by_supply_ta
///   12. `[writable]` solauto_position
///   13. `[writable]` intermediary_ta
///   14. `[]` lending_market
///   15. `[writable]` obligation
///   16. `[writable]` supply_reserve
///   17. `[]` supply_reserve_pyth_price_oracle
///   18. `[]` supply_reserve_switchboard_oracle
///   19. `[]` supply_liquidity_mint
///   20. `[writable]` position_supply_liquidity_ta
///   21. `[writable]` reserve_supply_liquidity_ta
///   22. `[]` supply_collateral_mint
///   23. `[writable]` position_supply_collateral_ta
///   24. `[writable]` reserve_supply_collateral_ta
///   25. `[writable]` debt_reserve
///   26. `[writable]` debt_reserve_fee_receiver_ta
///   27. `[]` debt_liquidity_mint
///   28. `[writable]` position_debt_liquidity_ta
///   29. `[writable]` reserve_debt_liquidity_ta
#[derive(Default)]
pub struct SolendRebalanceBuilder {
    signer: Option<solana_program::pubkey::Pubkey>,
    solend_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    ata_program: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    ixs_sysvar: Option<solana_program::pubkey::Pubkey>,
    solauto_fees_receiver_ta: Option<solana_program::pubkey::Pubkey>,
    authority_referral_state: Option<solana_program::pubkey::Pubkey>,
    referred_by_state: Option<solana_program::pubkey::Pubkey>,
    referred_by_supply_ta: Option<solana_program::pubkey::Pubkey>,
    solauto_position: Option<solana_program::pubkey::Pubkey>,
    intermediary_ta: Option<solana_program::pubkey::Pubkey>,
    lending_market: Option<solana_program::pubkey::Pubkey>,
    obligation: Option<solana_program::pubkey::Pubkey>,
    supply_reserve: Option<solana_program::pubkey::Pubkey>,
    supply_reserve_pyth_price_oracle: Option<solana_program::pubkey::Pubkey>,
    supply_reserve_switchboard_oracle: Option<solana_program::pubkey::Pubkey>,
    supply_liquidity_mint: Option<solana_program::pubkey::Pubkey>,
    position_supply_liquidity_ta: Option<solana_program::pubkey::Pubkey>,
    reserve_supply_liquidity_ta: Option<solana_program::pubkey::Pubkey>,
    supply_collateral_mint: Option<solana_program::pubkey::Pubkey>,
    position_supply_collateral_ta: Option<solana_program::pubkey::Pubkey>,
    reserve_supply_collateral_ta: Option<solana_program::pubkey::Pubkey>,
    debt_reserve: Option<solana_program::pubkey::Pubkey>,
    debt_reserve_fee_receiver_ta: Option<solana_program::pubkey::Pubkey>,
    debt_liquidity_mint: Option<solana_program::pubkey::Pubkey>,
    position_debt_liquidity_ta: Option<solana_program::pubkey::Pubkey>,
    reserve_debt_liquidity_ta: Option<solana_program::pubkey::Pubkey>,
    rebalance_args: Option<RebalanceArgs>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SolendRebalanceBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn solend_program(&mut self, solend_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.solend_program = Some(solend_program);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }
    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn ata_program(&mut self, ata_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ata_program = Some(ata_program);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn ixs_sysvar(&mut self, ixs_sysvar: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ixs_sysvar = Some(ixs_sysvar);
        self
    }
    #[inline(always)]
    pub fn solauto_fees_receiver_ta(
        &mut self,
        solauto_fees_receiver_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.solauto_fees_receiver_ta = Some(solauto_fees_receiver_ta);
        self
    }
    #[inline(always)]
    pub fn authority_referral_state(
        &mut self,
        authority_referral_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.authority_referral_state = Some(authority_referral_state);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn referred_by_state(
        &mut self,
        referred_by_state: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.referred_by_state = referred_by_state;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn referred_by_supply_ta(
        &mut self,
        referred_by_supply_ta: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.referred_by_supply_ta = referred_by_supply_ta;
        self
    }
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.solauto_position = Some(solauto_position);
        self
    }
    #[inline(always)]
    pub fn intermediary_ta(
        &mut self,
        intermediary_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.intermediary_ta = Some(intermediary_ta);
        self
    }
    #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lending_market = Some(lending_market);
        self
    }
    #[inline(always)]
    pub fn obligation(&mut self, obligation: solana_program::pubkey::Pubkey) -> &mut Self {
        self.obligation = Some(obligation);
        self
    }
    #[inline(always)]
    pub fn supply_reserve(&mut self, supply_reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.supply_reserve = Some(supply_reserve);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_pyth_price_oracle(
        &mut self,
        supply_reserve_pyth_price_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_reserve_pyth_price_oracle = Some(supply_reserve_pyth_price_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_switchboard_oracle(
        &mut self,
        supply_reserve_switchboard_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_reserve_switchboard_oracle = Some(supply_reserve_switchboard_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_liquidity_mint(
        &mut self,
        supply_liquidity_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_liquidity_mint = Some(supply_liquidity_mint);
        self
    }
    #[inline(always)]
    pub fn position_supply_liquidity_ta(
        &mut self,
        position_supply_liquidity_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_supply_liquidity_ta = Some(position_supply_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_supply_liquidity_ta(
        &mut self,
        reserve_supply_liquidity_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.reserve_supply_liquidity_ta = Some(reserve_supply_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn supply_collateral_mint(
        &mut self,
        supply_collateral_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_collateral_mint = Some(supply_collateral_mint);
        self
    }
    #[inline(always)]
    pub fn position_supply_collateral_ta(
        &mut self,
        position_supply_collateral_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_supply_collateral_ta = Some(position_supply_collateral_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_supply_collateral_ta(
        &mut self,
        reserve_supply_collateral_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.reserve_supply_collateral_ta = Some(reserve_supply_collateral_ta);
        self
    }
    #[inline(always)]
    pub fn debt_reserve(&mut self, debt_reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.debt_reserve = Some(debt_reserve);
        self
    }
    #[inline(always)]
    pub fn debt_reserve_fee_receiver_ta(
        &mut self,
        debt_reserve_fee_receiver_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.debt_reserve_fee_receiver_ta = Some(debt_reserve_fee_receiver_ta);
        self
    }
    #[inline(always)]
    pub fn debt_liquidity_mint(
        &mut self,
        debt_liquidity_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.debt_liquidity_mint = Some(debt_liquidity_mint);
        self
    }
    #[inline(always)]
    pub fn position_debt_liquidity_ta(
        &mut self,
        position_debt_liquidity_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.position_debt_liquidity_ta = Some(position_debt_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_debt_liquidity_ta(
        &mut self,
        reserve_debt_liquidity_ta: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.reserve_debt_liquidity_ta = Some(reserve_debt_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn rebalance_args(&mut self, rebalance_args: RebalanceArgs) -> &mut Self {
        self.rebalance_args = Some(rebalance_args);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SolendRebalance {
            signer: self.signer.expect("signer is not set"),
            solend_program: self.solend_program.expect("solend_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            ata_program: self.ata_program.unwrap_or(solana_program::pubkey!(
                "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
            )),
            clock: self.clock.expect("clock is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            ixs_sysvar: self.ixs_sysvar.expect("ixs_sysvar is not set"),
            solauto_fees_receiver_ta: self
                .solauto_fees_receiver_ta
                .expect("solauto_fees_receiver_ta is not set"),
            authority_referral_state: self
                .authority_referral_state
                .expect("authority_referral_state is not set"),
            referred_by_state: self.referred_by_state,
            referred_by_supply_ta: self.referred_by_supply_ta,
            solauto_position: self.solauto_position.expect("solauto_position is not set"),
            intermediary_ta: self.intermediary_ta.expect("intermediary_ta is not set"),
            lending_market: self.lending_market.expect("lending_market is not set"),
            obligation: self.obligation.expect("obligation is not set"),
            supply_reserve: self.supply_reserve.expect("supply_reserve is not set"),
            supply_reserve_pyth_price_oracle: self
                .supply_reserve_pyth_price_oracle
                .expect("supply_reserve_pyth_price_oracle is not set"),
            supply_reserve_switchboard_oracle: self
                .supply_reserve_switchboard_oracle
                .expect("supply_reserve_switchboard_oracle is not set"),
            supply_liquidity_mint: self
                .supply_liquidity_mint
                .expect("supply_liquidity_mint is not set"),
            position_supply_liquidity_ta: self
                .position_supply_liquidity_ta
                .expect("position_supply_liquidity_ta is not set"),
            reserve_supply_liquidity_ta: self
                .reserve_supply_liquidity_ta
                .expect("reserve_supply_liquidity_ta is not set"),
            supply_collateral_mint: self
                .supply_collateral_mint
                .expect("supply_collateral_mint is not set"),
            position_supply_collateral_ta: self
                .position_supply_collateral_ta
                .expect("position_supply_collateral_ta is not set"),
            reserve_supply_collateral_ta: self
                .reserve_supply_collateral_ta
                .expect("reserve_supply_collateral_ta is not set"),
            debt_reserve: self.debt_reserve.expect("debt_reserve is not set"),
            debt_reserve_fee_receiver_ta: self
                .debt_reserve_fee_receiver_ta
                .expect("debt_reserve_fee_receiver_ta is not set"),
            debt_liquidity_mint: self
                .debt_liquidity_mint
                .expect("debt_liquidity_mint is not set"),
            position_debt_liquidity_ta: self
                .position_debt_liquidity_ta
                .expect("position_debt_liquidity_ta is not set"),
            reserve_debt_liquidity_ta: self
                .reserve_debt_liquidity_ta
                .expect("reserve_debt_liquidity_ta is not set"),
        };
        let args = SolendRebalanceInstructionArgs {
            rebalance_args: self
                .rebalance_args
                .clone()
                .expect("rebalance_args is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `solend_rebalance` CPI accounts.
pub struct SolendRebalanceCpiAccounts<'a, 'b> {
    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub solend_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub ata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub ixs_sysvar: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_fees_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority_referral_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub referred_by_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub referred_by_supply_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub solauto_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub intermediary_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub obligation: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve_fee_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `solend_rebalance` CPI instruction.
pub struct SolendRebalanceCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub solend_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub ata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub ixs_sysvar: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_fees_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority_referral_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub referred_by_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub referred_by_supply_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub solauto_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub intermediary_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub obligation: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve_fee_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub position_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SolendRebalanceInstructionArgs,
}

impl<'a, 'b> SolendRebalanceCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SolendRebalanceCpiAccounts<'a, 'b>,
        args: SolendRebalanceInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            solend_program: accounts.solend_program,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            ata_program: accounts.ata_program,
            clock: accounts.clock,
            rent: accounts.rent,
            ixs_sysvar: accounts.ixs_sysvar,
            solauto_fees_receiver_ta: accounts.solauto_fees_receiver_ta,
            authority_referral_state: accounts.authority_referral_state,
            referred_by_state: accounts.referred_by_state,
            referred_by_supply_ta: accounts.referred_by_supply_ta,
            solauto_position: accounts.solauto_position,
            intermediary_ta: accounts.intermediary_ta,
            lending_market: accounts.lending_market,
            obligation: accounts.obligation,
            supply_reserve: accounts.supply_reserve,
            supply_reserve_pyth_price_oracle: accounts.supply_reserve_pyth_price_oracle,
            supply_reserve_switchboard_oracle: accounts.supply_reserve_switchboard_oracle,
            supply_liquidity_mint: accounts.supply_liquidity_mint,
            position_supply_liquidity_ta: accounts.position_supply_liquidity_ta,
            reserve_supply_liquidity_ta: accounts.reserve_supply_liquidity_ta,
            supply_collateral_mint: accounts.supply_collateral_mint,
            position_supply_collateral_ta: accounts.position_supply_collateral_ta,
            reserve_supply_collateral_ta: accounts.reserve_supply_collateral_ta,
            debt_reserve: accounts.debt_reserve,
            debt_reserve_fee_receiver_ta: accounts.debt_reserve_fee_receiver_ta,
            debt_liquidity_mint: accounts.debt_liquidity_mint,
            position_debt_liquidity_ta: accounts.position_debt_liquidity_ta,
            reserve_debt_liquidity_ta: accounts.reserve_debt_liquidity_ta,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(30 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.solend_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ixs_sysvar.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.solauto_fees_receiver_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority_referral_state.key,
            false,
        ));
        if let Some(referred_by_state) = self.referred_by_state {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *referred_by_state.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(referred_by_supply_ta) = self.referred_by_supply_ta {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *referred_by_supply_ta.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.solauto_position.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.intermediary_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.obligation.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.supply_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_reserve_pyth_price_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_reserve_switchboard_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_liquidity_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_supply_liquidity_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_supply_liquidity_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_collateral_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_supply_collateral_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_supply_collateral_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.debt_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.debt_reserve_fee_receiver_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.debt_liquidity_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_debt_liquidity_ta.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve_debt_liquidity_ta.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = SolendRebalanceInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(30 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.solend_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.ata_program.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.ixs_sysvar.clone());
        account_infos.push(self.solauto_fees_receiver_ta.clone());
        account_infos.push(self.authority_referral_state.clone());
        if let Some(referred_by_state) = self.referred_by_state {
            account_infos.push(referred_by_state.clone());
        }
        if let Some(referred_by_supply_ta) = self.referred_by_supply_ta {
            account_infos.push(referred_by_supply_ta.clone());
        }
        account_infos.push(self.solauto_position.clone());
        account_infos.push(self.intermediary_ta.clone());
        account_infos.push(self.lending_market.clone());
        account_infos.push(self.obligation.clone());
        account_infos.push(self.supply_reserve.clone());
        account_infos.push(self.supply_reserve_pyth_price_oracle.clone());
        account_infos.push(self.supply_reserve_switchboard_oracle.clone());
        account_infos.push(self.supply_liquidity_mint.clone());
        account_infos.push(self.position_supply_liquidity_ta.clone());
        account_infos.push(self.reserve_supply_liquidity_ta.clone());
        account_infos.push(self.supply_collateral_mint.clone());
        account_infos.push(self.position_supply_collateral_ta.clone());
        account_infos.push(self.reserve_supply_collateral_ta.clone());
        account_infos.push(self.debt_reserve.clone());
        account_infos.push(self.debt_reserve_fee_receiver_ta.clone());
        account_infos.push(self.debt_liquidity_mint.clone());
        account_infos.push(self.position_debt_liquidity_ta.clone());
        account_infos.push(self.reserve_debt_liquidity_ta.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SolendRebalance` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[]` solend_program
///   2. `[]` system_program
///   3. `[]` token_program
///   4. `[]` ata_program
///   5. `[]` clock
///   6. `[]` rent
///   7. `[]` ixs_sysvar
///   8. `[writable]` solauto_fees_receiver_ta
///   9. `[]` authority_referral_state
///   10. `[optional]` referred_by_state
///   11. `[writable, optional]` referred_by_supply_ta
///   12. `[writable]` solauto_position
///   13. `[writable]` intermediary_ta
///   14. `[]` lending_market
///   15. `[writable]` obligation
///   16. `[writable]` supply_reserve
///   17. `[]` supply_reserve_pyth_price_oracle
///   18. `[]` supply_reserve_switchboard_oracle
///   19. `[]` supply_liquidity_mint
///   20. `[writable]` position_supply_liquidity_ta
///   21. `[writable]` reserve_supply_liquidity_ta
///   22. `[]` supply_collateral_mint
///   23. `[writable]` position_supply_collateral_ta
///   24. `[writable]` reserve_supply_collateral_ta
///   25. `[writable]` debt_reserve
///   26. `[writable]` debt_reserve_fee_receiver_ta
///   27. `[]` debt_liquidity_mint
///   28. `[writable]` position_debt_liquidity_ta
///   29. `[writable]` reserve_debt_liquidity_ta
pub struct SolendRebalanceCpiBuilder<'a, 'b> {
    instruction: Box<SolendRebalanceCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SolendRebalanceCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SolendRebalanceCpiBuilderInstruction {
            __program: program,
            signer: None,
            solend_program: None,
            system_program: None,
            token_program: None,
            ata_program: None,
            clock: None,
            rent: None,
            ixs_sysvar: None,
            solauto_fees_receiver_ta: None,
            authority_referral_state: None,
            referred_by_state: None,
            referred_by_supply_ta: None,
            solauto_position: None,
            intermediary_ta: None,
            lending_market: None,
            obligation: None,
            supply_reserve: None,
            supply_reserve_pyth_price_oracle: None,
            supply_reserve_switchboard_oracle: None,
            supply_liquidity_mint: None,
            position_supply_liquidity_ta: None,
            reserve_supply_liquidity_ta: None,
            supply_collateral_mint: None,
            position_supply_collateral_ta: None,
            reserve_supply_collateral_ta: None,
            debt_reserve: None,
            debt_reserve_fee_receiver_ta: None,
            debt_liquidity_mint: None,
            position_debt_liquidity_ta: None,
            reserve_debt_liquidity_ta: None,
            rebalance_args: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn solend_program(
        &mut self,
        solend_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solend_program = Some(solend_program);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }
    #[inline(always)]
    pub fn ata_program(
        &mut self,
        ata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ata_program = Some(ata_program);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn ixs_sysvar(
        &mut self,
        ixs_sysvar: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ixs_sysvar = Some(ixs_sysvar);
        self
    }
    #[inline(always)]
    pub fn solauto_fees_receiver_ta(
        &mut self,
        solauto_fees_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solauto_fees_receiver_ta = Some(solauto_fees_receiver_ta);
        self
    }
    #[inline(always)]
    pub fn authority_referral_state(
        &mut self,
        authority_referral_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority_referral_state = Some(authority_referral_state);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn referred_by_state(
        &mut self,
        referred_by_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referred_by_state = referred_by_state;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn referred_by_supply_ta(
        &mut self,
        referred_by_supply_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referred_by_supply_ta = referred_by_supply_ta;
        self
    }
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solauto_position = Some(solauto_position);
        self
    }
    #[inline(always)]
    pub fn intermediary_ta(
        &mut self,
        intermediary_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.intermediary_ta = Some(intermediary_ta);
        self
    }
    #[inline(always)]
    pub fn lending_market(
        &mut self,
        lending_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lending_market = Some(lending_market);
        self
    }
    #[inline(always)]
    pub fn obligation(
        &mut self,
        obligation: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.obligation = Some(obligation);
        self
    }
    #[inline(always)]
    pub fn supply_reserve(
        &mut self,
        supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve = Some(supply_reserve);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_pyth_price_oracle(
        &mut self,
        supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve_pyth_price_oracle = Some(supply_reserve_pyth_price_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_switchboard_oracle(
        &mut self,
        supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve_switchboard_oracle =
            Some(supply_reserve_switchboard_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_liquidity_mint(
        &mut self,
        supply_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_liquidity_mint = Some(supply_liquidity_mint);
        self
    }
    #[inline(always)]
    pub fn position_supply_liquidity_ta(
        &mut self,
        position_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_supply_liquidity_ta = Some(position_supply_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_supply_liquidity_ta(
        &mut self,
        reserve_supply_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_supply_liquidity_ta = Some(reserve_supply_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn supply_collateral_mint(
        &mut self,
        supply_collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_collateral_mint = Some(supply_collateral_mint);
        self
    }
    #[inline(always)]
    pub fn position_supply_collateral_ta(
        &mut self,
        position_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_supply_collateral_ta = Some(position_supply_collateral_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_supply_collateral_ta(
        &mut self,
        reserve_supply_collateral_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_supply_collateral_ta = Some(reserve_supply_collateral_ta);
        self
    }
    #[inline(always)]
    pub fn debt_reserve(
        &mut self,
        debt_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.debt_reserve = Some(debt_reserve);
        self
    }
    #[inline(always)]
    pub fn debt_reserve_fee_receiver_ta(
        &mut self,
        debt_reserve_fee_receiver_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.debt_reserve_fee_receiver_ta = Some(debt_reserve_fee_receiver_ta);
        self
    }
    #[inline(always)]
    pub fn debt_liquidity_mint(
        &mut self,
        debt_liquidity_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.debt_liquidity_mint = Some(debt_liquidity_mint);
        self
    }
    #[inline(always)]
    pub fn position_debt_liquidity_ta(
        &mut self,
        position_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_debt_liquidity_ta = Some(position_debt_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn reserve_debt_liquidity_ta(
        &mut self,
        reserve_debt_liquidity_ta: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve_debt_liquidity_ta = Some(reserve_debt_liquidity_ta);
        self
    }
    #[inline(always)]
    pub fn rebalance_args(&mut self, rebalance_args: RebalanceArgs) -> &mut Self {
        self.instruction.rebalance_args = Some(rebalance_args);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SolendRebalanceInstructionArgs {
            rebalance_args: self
                .instruction
                .rebalance_args
                .clone()
                .expect("rebalance_args is not set"),
        };
        let instruction = SolendRebalanceCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            solend_program: self
                .instruction
                .solend_program
                .expect("solend_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            ata_program: self
                .instruction
                .ata_program
                .expect("ata_program is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            ixs_sysvar: self.instruction.ixs_sysvar.expect("ixs_sysvar is not set"),

            solauto_fees_receiver_ta: self
                .instruction
                .solauto_fees_receiver_ta
                .expect("solauto_fees_receiver_ta is not set"),

            authority_referral_state: self
                .instruction
                .authority_referral_state
                .expect("authority_referral_state is not set"),

            referred_by_state: self.instruction.referred_by_state,

            referred_by_supply_ta: self.instruction.referred_by_supply_ta,

            solauto_position: self
                .instruction
                .solauto_position
                .expect("solauto_position is not set"),

            intermediary_ta: self
                .instruction
                .intermediary_ta
                .expect("intermediary_ta is not set"),

            lending_market: self
                .instruction
                .lending_market
                .expect("lending_market is not set"),

            obligation: self.instruction.obligation.expect("obligation is not set"),

            supply_reserve: self
                .instruction
                .supply_reserve
                .expect("supply_reserve is not set"),

            supply_reserve_pyth_price_oracle: self
                .instruction
                .supply_reserve_pyth_price_oracle
                .expect("supply_reserve_pyth_price_oracle is not set"),

            supply_reserve_switchboard_oracle: self
                .instruction
                .supply_reserve_switchboard_oracle
                .expect("supply_reserve_switchboard_oracle is not set"),

            supply_liquidity_mint: self
                .instruction
                .supply_liquidity_mint
                .expect("supply_liquidity_mint is not set"),

            position_supply_liquidity_ta: self
                .instruction
                .position_supply_liquidity_ta
                .expect("position_supply_liquidity_ta is not set"),

            reserve_supply_liquidity_ta: self
                .instruction
                .reserve_supply_liquidity_ta
                .expect("reserve_supply_liquidity_ta is not set"),

            supply_collateral_mint: self
                .instruction
                .supply_collateral_mint
                .expect("supply_collateral_mint is not set"),

            position_supply_collateral_ta: self
                .instruction
                .position_supply_collateral_ta
                .expect("position_supply_collateral_ta is not set"),

            reserve_supply_collateral_ta: self
                .instruction
                .reserve_supply_collateral_ta
                .expect("reserve_supply_collateral_ta is not set"),

            debt_reserve: self
                .instruction
                .debt_reserve
                .expect("debt_reserve is not set"),

            debt_reserve_fee_receiver_ta: self
                .instruction
                .debt_reserve_fee_receiver_ta
                .expect("debt_reserve_fee_receiver_ta is not set"),

            debt_liquidity_mint: self
                .instruction
                .debt_liquidity_mint
                .expect("debt_liquidity_mint is not set"),

            position_debt_liquidity_ta: self
                .instruction
                .position_debt_liquidity_ta
                .expect("position_debt_liquidity_ta is not set"),

            reserve_debt_liquidity_ta: self
                .instruction
                .reserve_debt_liquidity_ta
                .expect("reserve_debt_liquidity_ta is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SolendRebalanceCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solend_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ixs_sysvar: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_fees_receiver_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority_referral_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referred_by_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referred_by_supply_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    intermediary_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lending_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    obligation: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_liquidity_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_supply_liquidity_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_supply_liquidity_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_supply_collateral_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_supply_collateral_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_reserve_fee_receiver_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_liquidity_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    position_debt_liquidity_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve_debt_liquidity_ta: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rebalance_args: Option<RebalanceArgs>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
