//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct SolendRefreshData {
    pub signer: solana_program::pubkey::Pubkey,

    pub solend_program: solana_program::pubkey::Pubkey,

    pub clock: solana_program::pubkey::Pubkey,

    pub supply_reserve: solana_program::pubkey::Pubkey,

    pub supply_reserve_pyth_price_oracle: solana_program::pubkey::Pubkey,

    pub supply_reserve_switchboard_oracle: solana_program::pubkey::Pubkey,

    pub debt_reserve: Option<solana_program::pubkey::Pubkey>,

    pub debt_reserve_pyth_price_oracle: Option<solana_program::pubkey::Pubkey>,

    pub debt_reserve_switchboard_oracle: Option<solana_program::pubkey::Pubkey>,

    pub lending_market: solana_program::pubkey::Pubkey,

    pub obligation: Option<solana_program::pubkey::Pubkey>,

    pub solauto_position: Option<solana_program::pubkey::Pubkey>,
}

impl SolendRefreshData {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.signer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.solend_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.clock, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.supply_reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_reserve_pyth_price_oracle,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.supply_reserve_switchboard_oracle,
            false,
        ));
        if let Some(debt_reserve) = self.debt_reserve {
            accounts.push(solana_program::instruction::AccountMeta::new(
                debt_reserve,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(debt_reserve_pyth_price_oracle) = self.debt_reserve_pyth_price_oracle {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                debt_reserve_pyth_price_oracle,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(debt_reserve_switchboard_oracle) = self.debt_reserve_switchboard_oracle {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                debt_reserve_switchboard_oracle,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lending_market,
            false,
        ));
        if let Some(obligation) = self.obligation {
            accounts.push(solana_program::instruction::AccountMeta::new(
                obligation, false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(solauto_position) = self.solauto_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                solauto_position,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let data = SolendRefreshDataInstructionData::new()
            .try_to_vec()
            .unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct SolendRefreshDataInstructionData {
    discriminator: u8,
}

impl SolendRefreshDataInstructionData {
    fn new() -> Self {
        Self { discriminator: 1 }
    }
}

/// Instruction builder for `SolendRefreshData`.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[]` solend_program
///   2. `[]` clock
///   3. `[writable]` supply_reserve
///   4. `[]` supply_reserve_pyth_price_oracle
///   5. `[]` supply_reserve_switchboard_oracle
///   6. `[writable, optional]` debt_reserve
///   7. `[optional]` debt_reserve_pyth_price_oracle
///   8. `[optional]` debt_reserve_switchboard_oracle
///   9. `[]` lending_market
///   10. `[writable, optional]` obligation
///   11. `[writable, optional]` solauto_position
#[derive(Default)]
pub struct SolendRefreshDataBuilder {
    signer: Option<solana_program::pubkey::Pubkey>,
    solend_program: Option<solana_program::pubkey::Pubkey>,
    clock: Option<solana_program::pubkey::Pubkey>,
    supply_reserve: Option<solana_program::pubkey::Pubkey>,
    supply_reserve_pyth_price_oracle: Option<solana_program::pubkey::Pubkey>,
    supply_reserve_switchboard_oracle: Option<solana_program::pubkey::Pubkey>,
    debt_reserve: Option<solana_program::pubkey::Pubkey>,
    debt_reserve_pyth_price_oracle: Option<solana_program::pubkey::Pubkey>,
    debt_reserve_switchboard_oracle: Option<solana_program::pubkey::Pubkey>,
    lending_market: Option<solana_program::pubkey::Pubkey>,
    obligation: Option<solana_program::pubkey::Pubkey>,
    solauto_position: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SolendRefreshDataBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn solend_program(&mut self, solend_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.solend_program = Some(solend_program);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: solana_program::pubkey::Pubkey) -> &mut Self {
        self.clock = Some(clock);
        self
    }
    #[inline(always)]
    pub fn supply_reserve(&mut self, supply_reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.supply_reserve = Some(supply_reserve);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_pyth_price_oracle(
        &mut self,
        supply_reserve_pyth_price_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_reserve_pyth_price_oracle = Some(supply_reserve_pyth_price_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_switchboard_oracle(
        &mut self,
        supply_reserve_switchboard_oracle: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.supply_reserve_switchboard_oracle = Some(supply_reserve_switchboard_oracle);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve(
        &mut self,
        debt_reserve: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.debt_reserve = debt_reserve;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve_pyth_price_oracle(
        &mut self,
        debt_reserve_pyth_price_oracle: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.debt_reserve_pyth_price_oracle = debt_reserve_pyth_price_oracle;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve_switchboard_oracle(
        &mut self,
        debt_reserve_switchboard_oracle: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.debt_reserve_switchboard_oracle = debt_reserve_switchboard_oracle;
        self
    }
    #[inline(always)]
    pub fn lending_market(&mut self, lending_market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lending_market = Some(lending_market);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn obligation(&mut self, obligation: Option<solana_program::pubkey::Pubkey>) -> &mut Self {
        self.obligation = obligation;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.solauto_position = solauto_position;
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SolendRefreshData {
            signer: self.signer.expect("signer is not set"),
            solend_program: self.solend_program.expect("solend_program is not set"),
            clock: self.clock.expect("clock is not set"),
            supply_reserve: self.supply_reserve.expect("supply_reserve is not set"),
            supply_reserve_pyth_price_oracle: self
                .supply_reserve_pyth_price_oracle
                .expect("supply_reserve_pyth_price_oracle is not set"),
            supply_reserve_switchboard_oracle: self
                .supply_reserve_switchboard_oracle
                .expect("supply_reserve_switchboard_oracle is not set"),
            debt_reserve: self.debt_reserve,
            debt_reserve_pyth_price_oracle: self.debt_reserve_pyth_price_oracle,
            debt_reserve_switchboard_oracle: self.debt_reserve_switchboard_oracle,
            lending_market: self.lending_market.expect("lending_market is not set"),
            obligation: self.obligation,
            solauto_position: self.solauto_position,
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `solend_refresh_data` CPI accounts.
pub struct SolendRefreshDataCpiAccounts<'a, 'b> {
    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub solend_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub debt_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub debt_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub obligation: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `solend_refresh_data` CPI instruction.
pub struct SolendRefreshDataCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub solend_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub clock: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,

    pub debt_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub debt_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub debt_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub lending_market: &'b solana_program::account_info::AccountInfo<'a>,

    pub obligation: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

impl<'a, 'b> SolendRefreshDataCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SolendRefreshDataCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            solend_program: accounts.solend_program,
            clock: accounts.clock,
            supply_reserve: accounts.supply_reserve,
            supply_reserve_pyth_price_oracle: accounts.supply_reserve_pyth_price_oracle,
            supply_reserve_switchboard_oracle: accounts.supply_reserve_switchboard_oracle,
            debt_reserve: accounts.debt_reserve,
            debt_reserve_pyth_price_oracle: accounts.debt_reserve_pyth_price_oracle,
            debt_reserve_switchboard_oracle: accounts.debt_reserve_switchboard_oracle,
            lending_market: accounts.lending_market,
            obligation: accounts.obligation,
            solauto_position: accounts.solauto_position,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.solend_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.clock.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.supply_reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_reserve_pyth_price_oracle.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.supply_reserve_switchboard_oracle.key,
            false,
        ));
        if let Some(debt_reserve) = self.debt_reserve {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *debt_reserve.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(debt_reserve_pyth_price_oracle) = self.debt_reserve_pyth_price_oracle {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *debt_reserve_pyth_price_oracle.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(debt_reserve_switchboard_oracle) = self.debt_reserve_switchboard_oracle {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                *debt_reserve_switchboard_oracle.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lending_market.key,
            false,
        ));
        if let Some(obligation) = self.obligation {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *obligation.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        if let Some(solauto_position) = self.solauto_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *solauto_position.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = SolendRefreshDataInstructionData::new()
            .try_to_vec()
            .unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.solend_program.clone());
        account_infos.push(self.clock.clone());
        account_infos.push(self.supply_reserve.clone());
        account_infos.push(self.supply_reserve_pyth_price_oracle.clone());
        account_infos.push(self.supply_reserve_switchboard_oracle.clone());
        if let Some(debt_reserve) = self.debt_reserve {
            account_infos.push(debt_reserve.clone());
        }
        if let Some(debt_reserve_pyth_price_oracle) = self.debt_reserve_pyth_price_oracle {
            account_infos.push(debt_reserve_pyth_price_oracle.clone());
        }
        if let Some(debt_reserve_switchboard_oracle) = self.debt_reserve_switchboard_oracle {
            account_infos.push(debt_reserve_switchboard_oracle.clone());
        }
        account_infos.push(self.lending_market.clone());
        if let Some(obligation) = self.obligation {
            account_infos.push(obligation.clone());
        }
        if let Some(solauto_position) = self.solauto_position {
            account_infos.push(solauto_position.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SolendRefreshData` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` signer
///   1. `[]` solend_program
///   2. `[]` clock
///   3. `[writable]` supply_reserve
///   4. `[]` supply_reserve_pyth_price_oracle
///   5. `[]` supply_reserve_switchboard_oracle
///   6. `[writable, optional]` debt_reserve
///   7. `[optional]` debt_reserve_pyth_price_oracle
///   8. `[optional]` debt_reserve_switchboard_oracle
///   9. `[]` lending_market
///   10. `[writable, optional]` obligation
///   11. `[writable, optional]` solauto_position
pub struct SolendRefreshDataCpiBuilder<'a, 'b> {
    instruction: Box<SolendRefreshDataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SolendRefreshDataCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SolendRefreshDataCpiBuilderInstruction {
            __program: program,
            signer: None,
            solend_program: None,
            clock: None,
            supply_reserve: None,
            supply_reserve_pyth_price_oracle: None,
            supply_reserve_switchboard_oracle: None,
            debt_reserve: None,
            debt_reserve_pyth_price_oracle: None,
            debt_reserve_switchboard_oracle: None,
            lending_market: None,
            obligation: None,
            solauto_position: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn solend_program(
        &mut self,
        solend_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solend_program = Some(solend_program);
        self
    }
    #[inline(always)]
    pub fn clock(&mut self, clock: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.clock = Some(clock);
        self
    }
    #[inline(always)]
    pub fn supply_reserve(
        &mut self,
        supply_reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve = Some(supply_reserve);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_pyth_price_oracle(
        &mut self,
        supply_reserve_pyth_price_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve_pyth_price_oracle = Some(supply_reserve_pyth_price_oracle);
        self
    }
    #[inline(always)]
    pub fn supply_reserve_switchboard_oracle(
        &mut self,
        supply_reserve_switchboard_oracle: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.supply_reserve_switchboard_oracle =
            Some(supply_reserve_switchboard_oracle);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve(
        &mut self,
        debt_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.debt_reserve = debt_reserve;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve_pyth_price_oracle(
        &mut self,
        debt_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.debt_reserve_pyth_price_oracle = debt_reserve_pyth_price_oracle;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn debt_reserve_switchboard_oracle(
        &mut self,
        debt_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.debt_reserve_switchboard_oracle = debt_reserve_switchboard_oracle;
        self
    }
    #[inline(always)]
    pub fn lending_market(
        &mut self,
        lending_market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lending_market = Some(lending_market);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn obligation(
        &mut self,
        obligation: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.obligation = obligation;
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.solauto_position = solauto_position;
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SolendRefreshDataCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            solend_program: self
                .instruction
                .solend_program
                .expect("solend_program is not set"),

            clock: self.instruction.clock.expect("clock is not set"),

            supply_reserve: self
                .instruction
                .supply_reserve
                .expect("supply_reserve is not set"),

            supply_reserve_pyth_price_oracle: self
                .instruction
                .supply_reserve_pyth_price_oracle
                .expect("supply_reserve_pyth_price_oracle is not set"),

            supply_reserve_switchboard_oracle: self
                .instruction
                .supply_reserve_switchboard_oracle
                .expect("supply_reserve_switchboard_oracle is not set"),

            debt_reserve: self.instruction.debt_reserve,

            debt_reserve_pyth_price_oracle: self.instruction.debt_reserve_pyth_price_oracle,

            debt_reserve_switchboard_oracle: self.instruction.debt_reserve_switchboard_oracle,

            lending_market: self
                .instruction
                .lending_market
                .expect("lending_market is not set"),

            obligation: self.instruction.obligation,

            solauto_position: self.instruction.solauto_position,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct SolendRefreshDataCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solend_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    clock: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    supply_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_reserve_pyth_price_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    debt_reserve_switchboard_oracle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lending_market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    obligation: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
