//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::OptionalLiqUtilizationRateBps;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct MarginfiRebalance {
    pub signer: solana_program::pubkey::Pubkey,

    pub marginfi_program: solana_program::pubkey::Pubkey,

    pub ix_sysvar: solana_program::pubkey::Pubkey,

    pub solauto_admin_settings: solana_program::pubkey::Pubkey,

    pub solauto_fees_receiver: solana_program::pubkey::Pubkey,

    pub solauto_position: Option<solana_program::pubkey::Pubkey>,
}

impl MarginfiRebalance {
    pub fn instruction(
        &self,
        args: MarginfiRebalanceInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MarginfiRebalanceInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.signer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.marginfi_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.ix_sysvar,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.solauto_admin_settings,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.solauto_fees_receiver,
            false,
        ));
        if let Some(solauto_position) = self.solauto_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                solauto_position,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        accounts.extend_from_slice(remaining_accounts);
        let mut data = MarginfiRebalanceInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct MarginfiRebalanceInstructionData {
    discriminator: u8,
}

impl MarginfiRebalanceInstructionData {
    fn new() -> Self {
        Self { discriminator: 8 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MarginfiRebalanceInstructionArgs {
    pub optional_liq_utilization_rate_bps: OptionalLiqUtilizationRateBps,
}

/// Instruction builder for `MarginfiRebalance`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[]` marginfi_program
///   2. `[]` ix_sysvar
///   3. `[]` solauto_admin_settings
///   4. `[writable]` solauto_fees_receiver
///   5. `[writable, optional]` solauto_position
#[derive(Default)]
pub struct MarginfiRebalanceBuilder {
    signer: Option<solana_program::pubkey::Pubkey>,
    marginfi_program: Option<solana_program::pubkey::Pubkey>,
    ix_sysvar: Option<solana_program::pubkey::Pubkey>,
    solauto_admin_settings: Option<solana_program::pubkey::Pubkey>,
    solauto_fees_receiver: Option<solana_program::pubkey::Pubkey>,
    solauto_position: Option<solana_program::pubkey::Pubkey>,
    optional_liq_utilization_rate_bps: Option<OptionalLiqUtilizationRateBps>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MarginfiRebalanceBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn signer(&mut self, signer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn marginfi_program(
        &mut self,
        marginfi_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.marginfi_program = Some(marginfi_program);
        self
    }
    #[inline(always)]
    pub fn ix_sysvar(&mut self, ix_sysvar: solana_program::pubkey::Pubkey) -> &mut Self {
        self.ix_sysvar = Some(ix_sysvar);
        self
    }
    #[inline(always)]
    pub fn solauto_admin_settings(
        &mut self,
        solauto_admin_settings: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.solauto_admin_settings = Some(solauto_admin_settings);
        self
    }
    #[inline(always)]
    pub fn solauto_fees_receiver(
        &mut self,
        solauto_fees_receiver: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.solauto_fees_receiver = Some(solauto_fees_receiver);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.solauto_position = solauto_position;
        self
    }
    #[inline(always)]
    pub fn optional_liq_utilization_rate_bps(
        &mut self,
        optional_liq_utilization_rate_bps: OptionalLiqUtilizationRateBps,
    ) -> &mut Self {
        self.optional_liq_utilization_rate_bps = Some(optional_liq_utilization_rate_bps);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MarginfiRebalance {
            signer: self.signer.expect("signer is not set"),
            marginfi_program: self.marginfi_program.expect("marginfi_program is not set"),
            ix_sysvar: self.ix_sysvar.expect("ix_sysvar is not set"),
            solauto_admin_settings: self
                .solauto_admin_settings
                .expect("solauto_admin_settings is not set"),
            solauto_fees_receiver: self
                .solauto_fees_receiver
                .expect("solauto_fees_receiver is not set"),
            solauto_position: self.solauto_position,
        };
        let args = MarginfiRebalanceInstructionArgs {
            optional_liq_utilization_rate_bps: self
                .optional_liq_utilization_rate_bps
                .clone()
                .expect("optional_liq_utilization_rate_bps is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `marginfi_rebalance` CPI accounts.
pub struct MarginfiRebalanceCpiAccounts<'a, 'b> {
    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub ix_sysvar: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_admin_settings: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_fees_receiver: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
}

/// `marginfi_rebalance` CPI instruction.
pub struct MarginfiRebalanceCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub signer: &'b solana_program::account_info::AccountInfo<'a>,

    pub marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub ix_sysvar: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_admin_settings: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_fees_receiver: &'b solana_program::account_info::AccountInfo<'a>,

    pub solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// The arguments for the instruction.
    pub __args: MarginfiRebalanceInstructionArgs,
}

impl<'a, 'b> MarginfiRebalanceCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MarginfiRebalanceCpiAccounts<'a, 'b>,
        args: MarginfiRebalanceInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            signer: accounts.signer,
            marginfi_program: accounts.marginfi_program,
            ix_sysvar: accounts.ix_sysvar,
            solauto_admin_settings: accounts.solauto_admin_settings,
            solauto_fees_receiver: accounts.solauto_fees_receiver,
            solauto_position: accounts.solauto_position,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.signer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.marginfi_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.ix_sysvar.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.solauto_admin_settings.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.solauto_fees_receiver.key,
            false,
        ));
        if let Some(solauto_position) = self.solauto_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *solauto_position.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::SOLAUTO_ID,
                false,
            ));
        }
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = MarginfiRebalanceInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SOLAUTO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.signer.clone());
        account_infos.push(self.marginfi_program.clone());
        account_infos.push(self.ix_sysvar.clone());
        account_infos.push(self.solauto_admin_settings.clone());
        account_infos.push(self.solauto_fees_receiver.clone());
        if let Some(solauto_position) = self.solauto_position {
            account_infos.push(solauto_position.clone());
        }
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MarginfiRebalance` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` signer
///   1. `[]` marginfi_program
///   2. `[]` ix_sysvar
///   3. `[]` solauto_admin_settings
///   4. `[writable]` solauto_fees_receiver
///   5. `[writable, optional]` solauto_position
pub struct MarginfiRebalanceCpiBuilder<'a, 'b> {
    instruction: Box<MarginfiRebalanceCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MarginfiRebalanceCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MarginfiRebalanceCpiBuilderInstruction {
            __program: program,
            signer: None,
            marginfi_program: None,
            ix_sysvar: None,
            solauto_admin_settings: None,
            solauto_fees_receiver: None,
            solauto_position: None,
            optional_liq_utilization_rate_bps: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn signer(
        &mut self,
        signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.signer = Some(signer);
        self
    }
    #[inline(always)]
    pub fn marginfi_program(
        &mut self,
        marginfi_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.marginfi_program = Some(marginfi_program);
        self
    }
    #[inline(always)]
    pub fn ix_sysvar(
        &mut self,
        ix_sysvar: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.ix_sysvar = Some(ix_sysvar);
        self
    }
    #[inline(always)]
    pub fn solauto_admin_settings(
        &mut self,
        solauto_admin_settings: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solauto_admin_settings = Some(solauto_admin_settings);
        self
    }
    #[inline(always)]
    pub fn solauto_fees_receiver(
        &mut self,
        solauto_fees_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.solauto_fees_receiver = Some(solauto_fees_receiver);
        self
    }
    /// `[optional account]`
    #[inline(always)]
    pub fn solauto_position(
        &mut self,
        solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.solauto_position = solauto_position;
        self
    }
    #[inline(always)]
    pub fn optional_liq_utilization_rate_bps(
        &mut self,
        optional_liq_utilization_rate_bps: OptionalLiqUtilizationRateBps,
    ) -> &mut Self {
        self.instruction.optional_liq_utilization_rate_bps =
            Some(optional_liq_utilization_rate_bps);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = MarginfiRebalanceInstructionArgs {
            optional_liq_utilization_rate_bps: self
                .instruction
                .optional_liq_utilization_rate_bps
                .clone()
                .expect("optional_liq_utilization_rate_bps is not set"),
        };
        let instruction = MarginfiRebalanceCpi {
            __program: self.instruction.__program,

            signer: self.instruction.signer.expect("signer is not set"),

            marginfi_program: self
                .instruction
                .marginfi_program
                .expect("marginfi_program is not set"),

            ix_sysvar: self.instruction.ix_sysvar.expect("ix_sysvar is not set"),

            solauto_admin_settings: self
                .instruction
                .solauto_admin_settings
                .expect("solauto_admin_settings is not set"),

            solauto_fees_receiver: self
                .instruction
                .solauto_fees_receiver
                .expect("solauto_fees_receiver is not set"),

            solauto_position: self.instruction.solauto_position,
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct MarginfiRebalanceCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    marginfi_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ix_sysvar: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_admin_settings: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_fees_receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    solauto_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    optional_liq_utilization_rate_bps: Option<OptionalLiqUtilizationRateBps>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
