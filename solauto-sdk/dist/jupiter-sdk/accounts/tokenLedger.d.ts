/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type TokenLedger = Account<TokenLedgerAccountData>;
export type TokenLedgerAccountData = {
    discriminator: Array<number>;
    tokenAccount: PublicKey;
    amount: bigint;
};
export type TokenLedgerAccountDataArgs = {
    tokenAccount: PublicKey;
    amount: number | bigint;
};
export declare function getTokenLedgerAccountDataSerializer(): Serializer<TokenLedgerAccountDataArgs, TokenLedgerAccountData>;
export declare function deserializeTokenLedger(rawAccount: RpcAccount): TokenLedger;
export declare function fetchTokenLedger(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TokenLedger>;
export declare function safeFetchTokenLedger(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TokenLedger | null>;
export declare function fetchAllTokenLedger(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TokenLedger[]>;
export declare function safeFetchAllTokenLedger(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TokenLedger[]>;
export declare function getTokenLedgerGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<TokenLedger, {
    discriminator: Array<number>;
    tokenAccount: PublicKey;
    amount: number | bigint;
}>;
export declare function getTokenLedgerSize(): number;
//# sourceMappingURL=tokenLedger.d.ts.map