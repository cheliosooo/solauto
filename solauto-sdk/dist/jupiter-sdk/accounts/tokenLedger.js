"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenLedgerAccountDataSerializer = getTokenLedgerAccountDataSerializer;
exports.deserializeTokenLedger = deserializeTokenLedger;
exports.fetchTokenLedger = fetchTokenLedger;
exports.safeFetchTokenLedger = safeFetchTokenLedger;
exports.fetchAllTokenLedger = fetchAllTokenLedger;
exports.safeFetchAllTokenLedger = safeFetchAllTokenLedger;
exports.getTokenLedgerGpaBuilder = getTokenLedgerGpaBuilder;
exports.getTokenLedgerSize = getTokenLedgerSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
function getTokenLedgerAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['tokenAccount', (0, serializers_1.publicKey)()],
        ['amount', (0, serializers_1.u64)()],
    ], { description: 'TokenLedgerAccountData' }), (value) => ({
        ...value,
        discriminator: [156, 247, 9, 188, 54, 108, 85, 77],
    }));
}
function deserializeTokenLedger(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getTokenLedgerAccountDataSerializer());
}
async function fetchTokenLedger(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'TokenLedger');
    return deserializeTokenLedger(maybeAccount);
}
async function safeFetchTokenLedger(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeTokenLedger(maybeAccount) : null;
}
async function fetchAllTokenLedger(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'TokenLedger');
        return deserializeTokenLedger(maybeAccount);
    });
}
async function safeFetchAllTokenLedger(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeTokenLedger(maybeAccount));
}
function getTokenLedgerGpaBuilder(context) {
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        tokenAccount: [8, (0, serializers_1.publicKey)()],
        amount: [40, (0, serializers_1.u64)()],
    })
        .deserializeUsing((account) => deserializeTokenLedger(account))
        .whereField('discriminator', [156, 247, 9, 188, 54, 108, 85, 77]);
}
function getTokenLedgerSize() {
    return 48;
}
