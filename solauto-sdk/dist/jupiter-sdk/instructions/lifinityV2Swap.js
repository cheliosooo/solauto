"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLifinityV2SwapInstructionDataSerializer = getLifinityV2SwapInstructionDataSerializer;
exports.lifinityV2Swap = lifinityV2Swap;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getLifinityV2SwapInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'LifinityV2SwapInstructionData' }), (value) => ({
        ...value,
        discriminator: [19, 152, 195, 245, 187, 144, 74, 227],
    }));
}
// Instruction.
function lifinityV2Swap(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        swapProgram: {
            index: 0,
            isWritable: false,
            value: input.swapProgram ?? null,
        },
        authority: {
            index: 1,
            isWritable: false,
            value: input.authority ?? null,
        },
        amm: { index: 2, isWritable: true, value: input.amm ?? null },
        userTransferAuthority: {
            index: 3,
            isWritable: false,
            value: input.userTransferAuthority ?? null,
        },
        sourceInfo: {
            index: 4,
            isWritable: true,
            value: input.sourceInfo ?? null,
        },
        destinationInfo: {
            index: 5,
            isWritable: true,
            value: input.destinationInfo ?? null,
        },
        swapSource: {
            index: 6,
            isWritable: true,
            value: input.swapSource ?? null,
        },
        swapDestination: {
            index: 7,
            isWritable: true,
            value: input.swapDestination ?? null,
        },
        poolMint: {
            index: 8,
            isWritable: true,
            value: input.poolMint ?? null,
        },
        feeAccount: {
            index: 9,
            isWritable: true,
            value: input.feeAccount ?? null,
        },
        tokenProgram: {
            index: 10,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        oracleMainAccount: {
            index: 11,
            isWritable: false,
            value: input.oracleMainAccount ?? null,
        },
        oracleSubAccount: {
            index: 12,
            isWritable: false,
            value: input.oracleSubAccount ?? null,
        },
        oraclePcAccount: {
            index: 13,
            isWritable: false,
            value: input.oraclePcAccount ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getLifinityV2SwapInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
