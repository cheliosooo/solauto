/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type CremaSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    clmmConfig: PublicKey | Pda;
    clmmpool: PublicKey | Pda;
    tokenA: PublicKey | Pda;
    tokenB: PublicKey | Pda;
    accountA: PublicKey | Pda;
    accountB: PublicKey | Pda;
    tokenAVault: PublicKey | Pda;
    tokenBVault: PublicKey | Pda;
    tickArrayMap: PublicKey | Pda;
    owner: PublicKey | Pda;
    partner: PublicKey | Pda;
    partnerAtaA: PublicKey | Pda;
    partnerAtaB: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type CremaSwapInstructionData = {
    discriminator: Array<number>;
};
export type CremaSwapInstructionDataArgs = {};
export declare function getCremaSwapInstructionDataSerializer(): Serializer<CremaSwapInstructionDataArgs, CremaSwapInstructionData>;
export declare function cremaSwap(context: Pick<Context, 'programs'>, input: CremaSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=cremaSwap.d.ts.map