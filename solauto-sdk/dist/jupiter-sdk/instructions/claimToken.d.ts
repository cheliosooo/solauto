/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type ClaimTokenInstructionAccounts = {
    payer?: Signer;
    wallet: PublicKey | Pda;
    programAuthority: PublicKey | Pda;
    programTokenAccount: PublicKey | Pda;
    destinationTokenAccount: PublicKey | Pda;
    mint: PublicKey | Pda;
    associatedTokenTokenProgram: PublicKey | Pda;
    associatedTokenProgram: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
};
export type ClaimTokenInstructionData = {
    discriminator: Array<number>;
    id: number;
};
export type ClaimTokenInstructionDataArgs = {
    id: number;
};
export declare function getClaimTokenInstructionDataSerializer(): Serializer<ClaimTokenInstructionDataArgs, ClaimTokenInstructionData>;
export type ClaimTokenInstructionArgs = ClaimTokenInstructionDataArgs;
export declare function claimToken(context: Pick<Context, 'payer' | 'programs'>, input: ClaimTokenInstructionAccounts & ClaimTokenInstructionArgs): TransactionBuilder;
//# sourceMappingURL=claimToken.d.ts.map