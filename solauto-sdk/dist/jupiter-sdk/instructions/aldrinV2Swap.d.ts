/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type AldrinV2SwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    pool: PublicKey | Pda;
    poolSigner: PublicKey | Pda;
    poolMint: PublicKey | Pda;
    baseTokenVault: PublicKey | Pda;
    quoteTokenVault: PublicKey | Pda;
    feePoolTokenAccount: PublicKey | Pda;
    walletAuthority: PublicKey | Pda;
    userBaseTokenAccount: PublicKey | Pda;
    userQuoteTokenAccount: PublicKey | Pda;
    curve: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type AldrinV2SwapInstructionData = {
    discriminator: Array<number>;
};
export type AldrinV2SwapInstructionDataArgs = {};
export declare function getAldrinV2SwapInstructionDataSerializer(): Serializer<AldrinV2SwapInstructionDataArgs, AldrinV2SwapInstructionData>;
export declare function aldrinV2Swap(context: Pick<Context, 'programs'>, input: AldrinV2SwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=aldrinV2Swap.d.ts.map