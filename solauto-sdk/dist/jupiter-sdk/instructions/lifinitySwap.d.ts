/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type LifinitySwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    authority?: PublicKey | Pda;
    amm: PublicKey | Pda;
    userTransferAuthority: PublicKey | Pda;
    sourceInfo: PublicKey | Pda;
    destinationInfo: PublicKey | Pda;
    swapSource: PublicKey | Pda;
    swapDestination: PublicKey | Pda;
    poolMint: PublicKey | Pda;
    feeAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    pythAccount: PublicKey | Pda;
    pythPcAccount: PublicKey | Pda;
    configAccount: PublicKey | Pda;
};
export type LifinitySwapInstructionData = {
    discriminator: Array<number>;
};
export type LifinitySwapInstructionDataArgs = {};
export declare function getLifinitySwapInstructionDataSerializer(): Serializer<LifinitySwapInstructionDataArgs, LifinitySwapInstructionData>;
export declare function lifinitySwap(context: Pick<Context, 'identity' | 'programs'>, input: LifinitySwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=lifinitySwap.d.ts.map