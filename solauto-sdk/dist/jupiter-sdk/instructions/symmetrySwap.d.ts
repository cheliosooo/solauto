/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type SymmetrySwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    buyer: PublicKey | Pda;
    fundState: PublicKey | Pda;
    pdaAccount: PublicKey | Pda;
    pdaFromTokenAccount: PublicKey | Pda;
    buyerFromTokenAccount: PublicKey | Pda;
    pdaToTokenAccount: PublicKey | Pda;
    buyerToTokenAccount: PublicKey | Pda;
    swapFeeAccount: PublicKey | Pda;
    hostFeeAccount: PublicKey | Pda;
    managerFeeAccount: PublicKey | Pda;
    tokenList: PublicKey | Pda;
    prismData: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type SymmetrySwapInstructionData = {
    discriminator: Array<number>;
};
export type SymmetrySwapInstructionDataArgs = {};
export declare function getSymmetrySwapInstructionDataSerializer(): Serializer<SymmetrySwapInstructionDataArgs, SymmetrySwapInstructionData>;
export declare function symmetrySwap(context: Pick<Context, 'programs'>, input: SymmetrySwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=symmetrySwap.d.ts.map