/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type OpenBookV2SwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    signer: PublicKey | Pda;
    penaltyPayer: PublicKey | Pda;
    market: PublicKey | Pda;
    marketAuthority: PublicKey | Pda;
    bids: PublicKey | Pda;
    asks: PublicKey | Pda;
    marketBaseVault: PublicKey | Pda;
    marketQuoteVault: PublicKey | Pda;
    eventHeap: PublicKey | Pda;
    userBaseAccount: PublicKey | Pda;
    userQuoteAccount: PublicKey | Pda;
    oracleA: PublicKey | Pda;
    oracleB: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    openOrdersAdmin: PublicKey | Pda;
};
export type OpenBookV2SwapInstructionData = {
    discriminator: Array<number>;
};
export type OpenBookV2SwapInstructionDataArgs = {};
export declare function getOpenBookV2SwapInstructionDataSerializer(): Serializer<OpenBookV2SwapInstructionDataArgs, OpenBookV2SwapInstructionData>;
export declare function openBookV2Swap(context: Pick<Context, 'programs'>, input: OpenBookV2SwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=openBookV2Swap.d.ts.map