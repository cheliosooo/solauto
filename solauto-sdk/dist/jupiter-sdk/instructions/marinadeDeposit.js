"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarinadeDepositInstructionDataSerializer = getMarinadeDepositInstructionDataSerializer;
exports.marinadeDeposit = marinadeDeposit;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getMarinadeDepositInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'MarinadeDepositInstructionData' }), (value) => ({
        ...value,
        discriminator: [62, 236, 248, 28, 222, 232, 182, 73],
    }));
}
// Instruction.
function marinadeDeposit(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        marinadeFinanceProgram: {
            index: 0,
            isWritable: false,
            value: input.marinadeFinanceProgram ?? null,
        },
        state: {
            index: 1,
            isWritable: true,
            value: input.state ?? null,
        },
        msolMint: {
            index: 2,
            isWritable: true,
            value: input.msolMint ?? null,
        },
        liqPoolSolLegPda: {
            index: 3,
            isWritable: true,
            value: input.liqPoolSolLegPda ?? null,
        },
        liqPoolMsolLeg: {
            index: 4,
            isWritable: true,
            value: input.liqPoolMsolLeg ?? null,
        },
        liqPoolMsolLegAuthority: {
            index: 5,
            isWritable: false,
            value: input.liqPoolMsolLegAuthority ?? null,
        },
        reservePda: {
            index: 6,
            isWritable: true,
            value: input.reservePda ?? null,
        },
        transferFrom: {
            index: 7,
            isWritable: true,
            value: input.transferFrom ?? null,
        },
        mintTo: {
            index: 8,
            isWritable: true,
            value: input.mintTo ?? null,
        },
        msolMintAuthority: {
            index: 9,
            isWritable: false,
            value: input.msolMintAuthority ?? null,
        },
        systemProgram: {
            index: 10,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 11,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        userWsolTokenAccount: {
            index: 12,
            isWritable: true,
            value: input.userWsolTokenAccount ?? null,
        },
        tempWsolTokenAccount: {
            index: 13,
            isWritable: true,
            value: input.tempWsolTokenAccount ?? null,
        },
        userTransferAuthority: {
            index: 14,
            isWritable: false,
            value: input.userTransferAuthority ?? null,
        },
        payer: {
            index: 15,
            isWritable: true,
            value: input.payer ?? null,
        },
        wsolMint: {
            index: 16,
            isWritable: false,
            value: input.wsolMint ?? null,
        },
        rent: {
            index: 17,
            isWritable: false,
            value: input.rent ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer.publicKey;
    }
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMarinadeDepositInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
