/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { RoutePlanStep, RoutePlanStepArgs } from '../types';
export type RouteWithTokenLedgerInstructionAccounts = {
    tokenProgram?: PublicKey | Pda;
    userTransferAuthority: Signer;
    userSourceTokenAccount: PublicKey | Pda;
    userDestinationTokenAccount: PublicKey | Pda;
    destinationTokenAccount?: PublicKey | Pda;
    destinationMint: PublicKey | Pda;
    platformFeeAccount?: PublicKey | Pda;
    tokenLedger: PublicKey | Pda;
    eventAuthority: PublicKey | Pda;
    program: PublicKey | Pda;
};
export type RouteWithTokenLedgerInstructionData = {
    discriminator: Array<number>;
    routePlan: Array<RoutePlanStep>;
    quotedOutAmount: bigint;
    slippageBps: number;
    platformFeeBps: number;
};
export type RouteWithTokenLedgerInstructionDataArgs = {
    routePlan: Array<RoutePlanStepArgs>;
    quotedOutAmount: number | bigint;
    slippageBps: number;
    platformFeeBps: number;
};
export declare function getRouteWithTokenLedgerInstructionDataSerializer(): Serializer<RouteWithTokenLedgerInstructionDataArgs, RouteWithTokenLedgerInstructionData>;
export type RouteWithTokenLedgerInstructionArgs = RouteWithTokenLedgerInstructionDataArgs;
export declare function routeWithTokenLedger(context: Pick<Context, 'programs'>, input: RouteWithTokenLedgerInstructionAccounts & RouteWithTokenLedgerInstructionArgs): TransactionBuilder;
//# sourceMappingURL=routeWithTokenLedger.d.ts.map