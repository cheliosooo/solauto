/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type SerumSwapInstructionAccounts = {
    market: PublicKey | Pda;
    openOrders: PublicKey | Pda;
    requestQueue: PublicKey | Pda;
    eventQueue: PublicKey | Pda;
    bids: PublicKey | Pda;
    asks: PublicKey | Pda;
    coinVault: PublicKey | Pda;
    pcVault: PublicKey | Pda;
    vaultSigner: PublicKey | Pda;
    authority?: PublicKey | Pda;
    orderPayerTokenAccount: PublicKey | Pda;
    coinWallet: PublicKey | Pda;
    pcWallet: PublicKey | Pda;
    dexProgram: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
};
export type SerumSwapInstructionData = {
    discriminator: Array<number>;
};
export type SerumSwapInstructionDataArgs = {};
export declare function getSerumSwapInstructionDataSerializer(): Serializer<SerumSwapInstructionDataArgs, SerumSwapInstructionData>;
export declare function serumSwap(context: Pick<Context, 'identity' | 'programs'>, input: SerumSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=serumSwap.d.ts.map