/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type LifinityV2SwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    authority?: PublicKey | Pda;
    amm: PublicKey | Pda;
    userTransferAuthority: PublicKey | Pda;
    sourceInfo: PublicKey | Pda;
    destinationInfo: PublicKey | Pda;
    swapSource: PublicKey | Pda;
    swapDestination: PublicKey | Pda;
    poolMint: PublicKey | Pda;
    feeAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    oracleMainAccount: PublicKey | Pda;
    oracleSubAccount: PublicKey | Pda;
    oraclePcAccount: PublicKey | Pda;
};
export type LifinityV2SwapInstructionData = {
    discriminator: Array<number>;
};
export type LifinityV2SwapInstructionDataArgs = {};
export declare function getLifinityV2SwapInstructionDataSerializer(): Serializer<LifinityV2SwapInstructionDataArgs, LifinityV2SwapInstructionData>;
export declare function lifinityV2Swap(context: Pick<Context, 'identity' | 'programs'>, input: LifinityV2SwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=lifinityV2Swap.d.ts.map