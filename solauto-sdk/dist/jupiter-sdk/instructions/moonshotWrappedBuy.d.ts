/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type MoonshotWrappedBuyInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    sender: PublicKey | Pda;
    senderTokenAccount: PublicKey | Pda;
    curveAccount: PublicKey | Pda;
    curveTokenAccount: PublicKey | Pda;
    dexFee: PublicKey | Pda;
    helioFee: PublicKey | Pda;
    mint: PublicKey | Pda;
    configAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    associatedTokenProgram: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    userWsolTokenAccount: PublicKey | Pda;
    tempWsolTokenAccount: PublicKey | Pda;
    wsolMint: PublicKey | Pda;
};
export type MoonshotWrappedBuyInstructionData = {
    discriminator: Array<number>;
};
export type MoonshotWrappedBuyInstructionDataArgs = {};
export declare function getMoonshotWrappedBuyInstructionDataSerializer(): Serializer<MoonshotWrappedBuyInstructionDataArgs, MoonshotWrappedBuyInstructionData>;
export declare function moonshotWrappedBuy(context: Pick<Context, 'programs'>, input: MoonshotWrappedBuyInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=moonshotWrappedBuy.d.ts.map