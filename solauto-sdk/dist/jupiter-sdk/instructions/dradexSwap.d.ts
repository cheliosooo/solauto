/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DradexSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    pair: PublicKey | Pda;
    market: PublicKey | Pda;
    eventQueue: PublicKey | Pda;
    dexUser: PublicKey | Pda;
    marketUser: PublicKey | Pda;
    bids: PublicKey | Pda;
    asks: PublicKey | Pda;
    t0Vault: PublicKey | Pda;
    t1Vault: PublicKey | Pda;
    t0User: PublicKey | Pda;
    t1User: PublicKey | Pda;
    master: PublicKey | Pda;
    signer: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    logger: PublicKey | Pda;
};
export type DradexSwapInstructionData = {
    discriminator: Array<number>;
};
export type DradexSwapInstructionDataArgs = {};
export declare function getDradexSwapInstructionDataSerializer(): Serializer<DradexSwapInstructionDataArgs, DradexSwapInstructionData>;
export declare function dradexSwap(context: Pick<Context, 'programs'>, input: DradexSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=dradexSwap.d.ts.map