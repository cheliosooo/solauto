/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type MeteoraSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    pool: PublicKey | Pda;
    userSourceToken: PublicKey | Pda;
    userDestinationToken: PublicKey | Pda;
    aVault: PublicKey | Pda;
    bVault: PublicKey | Pda;
    aTokenVault: PublicKey | Pda;
    bTokenVault: PublicKey | Pda;
    aVaultLpMint: PublicKey | Pda;
    bVaultLpMint: PublicKey | Pda;
    aVaultLp: PublicKey | Pda;
    bVaultLp: PublicKey | Pda;
    adminTokenFee: PublicKey | Pda;
    user: PublicKey | Pda;
    vaultProgram: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type MeteoraSwapInstructionData = {
    discriminator: Array<number>;
};
export type MeteoraSwapInstructionDataArgs = {};
export declare function getMeteoraSwapInstructionDataSerializer(): Serializer<MeteoraSwapInstructionDataArgs, MeteoraSwapInstructionData>;
export declare function meteoraSwap(context: Pick<Context, 'programs'>, input: MeteoraSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=meteoraSwap.d.ts.map