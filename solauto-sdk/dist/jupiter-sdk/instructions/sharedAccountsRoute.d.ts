/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { RoutePlanStep, RoutePlanStepArgs } from '../types';
export type SharedAccountsRouteInstructionAccounts = {
    tokenProgram?: PublicKey | Pda;
    programAuthority: PublicKey | Pda;
    userTransferAuthority: Signer;
    sourceTokenAccount: PublicKey | Pda;
    programSourceTokenAccount: PublicKey | Pda;
    programDestinationTokenAccount: PublicKey | Pda;
    destinationTokenAccount: PublicKey | Pda;
    sourceMint: PublicKey | Pda;
    destinationMint: PublicKey | Pda;
    platformFeeAccount?: PublicKey | Pda;
    token2022Program?: PublicKey | Pda;
    eventAuthority: PublicKey | Pda;
    program: PublicKey | Pda;
};
export type SharedAccountsRouteInstructionData = {
    discriminator: Array<number>;
    id: number;
    routePlan: Array<RoutePlanStep>;
    inAmount: bigint;
    quotedOutAmount: bigint;
    slippageBps: number;
    platformFeeBps: number;
};
export type SharedAccountsRouteInstructionDataArgs = {
    id: number;
    routePlan: Array<RoutePlanStepArgs>;
    inAmount: number | bigint;
    quotedOutAmount: number | bigint;
    slippageBps: number;
    platformFeeBps: number;
};
export declare function getSharedAccountsRouteInstructionDataSerializer(): Serializer<SharedAccountsRouteInstructionDataArgs, SharedAccountsRouteInstructionData>;
export type SharedAccountsRouteInstructionArgs = SharedAccountsRouteInstructionDataArgs;
export declare function sharedAccountsRoute(context: Pick<Context, 'programs'>, input: SharedAccountsRouteInstructionAccounts & SharedAccountsRouteInstructionArgs): TransactionBuilder;
//# sourceMappingURL=sharedAccountsRoute.d.ts.map