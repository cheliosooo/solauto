"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSerumSwapInstructionDataSerializer = getSerumSwapInstructionDataSerializer;
exports.serumSwap = serumSwap;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getSerumSwapInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'SerumSwapInstructionData' }), (value) => ({
        ...value,
        discriminator: [88, 183, 70, 249, 214, 118, 82, 210],
    }));
}
// Instruction.
function serumSwap(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        market: {
            index: 0,
            isWritable: true,
            value: input.market ?? null,
        },
        openOrders: {
            index: 1,
            isWritable: true,
            value: input.openOrders ?? null,
        },
        requestQueue: {
            index: 2,
            isWritable: true,
            value: input.requestQueue ?? null,
        },
        eventQueue: {
            index: 3,
            isWritable: true,
            value: input.eventQueue ?? null,
        },
        bids: { index: 4, isWritable: true, value: input.bids ?? null },
        asks: { index: 5, isWritable: true, value: input.asks ?? null },
        coinVault: {
            index: 6,
            isWritable: true,
            value: input.coinVault ?? null,
        },
        pcVault: {
            index: 7,
            isWritable: true,
            value: input.pcVault ?? null,
        },
        vaultSigner: {
            index: 8,
            isWritable: false,
            value: input.vaultSigner ?? null,
        },
        authority: {
            index: 9,
            isWritable: false,
            value: input.authority ?? null,
        },
        orderPayerTokenAccount: {
            index: 10,
            isWritable: true,
            value: input.orderPayerTokenAccount ?? null,
        },
        coinWallet: {
            index: 11,
            isWritable: true,
            value: input.coinWallet ?? null,
        },
        pcWallet: {
            index: 12,
            isWritable: true,
            value: input.pcWallet ?? null,
        },
        dexProgram: {
            index: 13,
            isWritable: false,
            value: input.dexProgram ?? null,
        },
        tokenProgram: {
            index: 14,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        rent: {
            index: 15,
            isWritable: false,
            value: input.rent ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getSerumSwapInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
