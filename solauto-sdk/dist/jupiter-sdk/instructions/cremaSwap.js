"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCremaSwapInstructionDataSerializer = getCremaSwapInstructionDataSerializer;
exports.cremaSwap = cremaSwap;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getCremaSwapInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'CremaSwapInstructionData' }), (value) => ({
        ...value,
        discriminator: [169, 220, 41, 250, 35, 190, 133, 198],
    }));
}
// Instruction.
function cremaSwap(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        swapProgram: {
            index: 0,
            isWritable: false,
            value: input.swapProgram ?? null,
        },
        clmmConfig: {
            index: 1,
            isWritable: false,
            value: input.clmmConfig ?? null,
        },
        clmmpool: {
            index: 2,
            isWritable: true,
            value: input.clmmpool ?? null,
        },
        tokenA: {
            index: 3,
            isWritable: false,
            value: input.tokenA ?? null,
        },
        tokenB: {
            index: 4,
            isWritable: false,
            value: input.tokenB ?? null,
        },
        accountA: {
            index: 5,
            isWritable: true,
            value: input.accountA ?? null,
        },
        accountB: {
            index: 6,
            isWritable: true,
            value: input.accountB ?? null,
        },
        tokenAVault: {
            index: 7,
            isWritable: true,
            value: input.tokenAVault ?? null,
        },
        tokenBVault: {
            index: 8,
            isWritable: true,
            value: input.tokenBVault ?? null,
        },
        tickArrayMap: {
            index: 9,
            isWritable: true,
            value: input.tickArrayMap ?? null,
        },
        owner: {
            index: 10,
            isWritable: false,
            value: input.owner ?? null,
        },
        partner: {
            index: 11,
            isWritable: false,
            value: input.partner ?? null,
        },
        partnerAtaA: {
            index: 12,
            isWritable: true,
            value: input.partnerAtaA ?? null,
        },
        partnerAtaB: {
            index: 13,
            isWritable: true,
            value: input.partnerAtaB ?? null,
        },
        tokenProgram: {
            index: 14,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCremaSwapInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
