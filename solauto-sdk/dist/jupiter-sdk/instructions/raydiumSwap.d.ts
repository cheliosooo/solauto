/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type RaydiumSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    ammId: PublicKey | Pda;
    ammAuthority: PublicKey | Pda;
    ammOpenOrders: PublicKey | Pda;
    poolCoinTokenAccount: PublicKey | Pda;
    poolPcTokenAccount: PublicKey | Pda;
    serumProgramId: PublicKey | Pda;
    serumMarket: PublicKey | Pda;
    serumBids: PublicKey | Pda;
    serumAsks: PublicKey | Pda;
    serumEventQueue: PublicKey | Pda;
    serumCoinVaultAccount: PublicKey | Pda;
    serumPcVaultAccount: PublicKey | Pda;
    serumVaultSigner: PublicKey | Pda;
    userSourceTokenAccount: PublicKey | Pda;
    userDestinationTokenAccount: PublicKey | Pda;
    userSourceOwner: PublicKey | Pda;
};
export type RaydiumSwapInstructionData = {
    discriminator: Array<number>;
};
export type RaydiumSwapInstructionDataArgs = {};
export declare function getRaydiumSwapInstructionDataSerializer(): Serializer<RaydiumSwapInstructionDataArgs, RaydiumSwapInstructionData>;
export declare function raydiumSwap(context: Pick<Context, 'programs'>, input: RaydiumSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=raydiumSwap.d.ts.map