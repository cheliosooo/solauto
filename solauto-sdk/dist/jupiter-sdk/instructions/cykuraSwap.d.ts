/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type CykuraSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    signer: PublicKey | Pda;
    factoryState: PublicKey | Pda;
    poolState: PublicKey | Pda;
    inputTokenAccount: PublicKey | Pda;
    outputTokenAccount: PublicKey | Pda;
    inputVault: PublicKey | Pda;
    outputVault: PublicKey | Pda;
    lastObservationState: PublicKey | Pda;
    coreProgram: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type CykuraSwapInstructionData = {
    discriminator: Array<number>;
};
export type CykuraSwapInstructionDataArgs = {};
export declare function getCykuraSwapInstructionDataSerializer(): Serializer<CykuraSwapInstructionDataArgs, CykuraSwapInstructionData>;
export declare function cykuraSwap(context: Pick<Context, 'programs'>, input: CykuraSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=cykuraSwap.d.ts.map