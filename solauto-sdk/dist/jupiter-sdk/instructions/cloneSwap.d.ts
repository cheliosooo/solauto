/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type CloneSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    user: PublicKey | Pda;
    clone: PublicKey | Pda;
    pools: PublicKey | Pda;
    oracles: PublicKey | Pda;
    userCollateralTokenAccount: PublicKey | Pda;
    userOnassetTokenAccount: PublicKey | Pda;
    onassetMint: PublicKey | Pda;
    collateralMint: PublicKey | Pda;
    collateralVault: PublicKey | Pda;
    treasuryOnassetTokenAccount: PublicKey | Pda;
    treasuryCollateralTokenAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    cloneStaking: PublicKey | Pda;
    userStakingAccount: PublicKey | Pda;
    cloneStakingProgram: PublicKey | Pda;
};
export type CloneSwapInstructionData = {
    discriminator: Array<number>;
};
export type CloneSwapInstructionDataArgs = {};
export declare function getCloneSwapInstructionDataSerializer(): Serializer<CloneSwapInstructionDataArgs, CloneSwapInstructionData>;
export declare function cloneSwap(context: Pick<Context, 'programs'>, input: CloneSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=cloneSwap.d.ts.map