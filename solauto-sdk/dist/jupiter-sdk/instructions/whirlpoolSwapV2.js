"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWhirlpoolSwapV2InstructionDataSerializer = getWhirlpoolSwapV2InstructionDataSerializer;
exports.whirlpoolSwapV2 = whirlpoolSwapV2;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getWhirlpoolSwapV2InstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'WhirlpoolSwapV2InstructionData' }), (value) => ({
        ...value,
        discriminator: [56, 166, 129, 9, 157, 205, 118, 217],
    }));
}
// Instruction.
function whirlpoolSwapV2(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        swapProgram: {
            index: 0,
            isWritable: false,
            value: input.swapProgram ?? null,
        },
        tokenProgramA: {
            index: 1,
            isWritable: false,
            value: input.tokenProgramA ?? null,
        },
        tokenProgramB: {
            index: 2,
            isWritable: false,
            value: input.tokenProgramB ?? null,
        },
        memoProgram: {
            index: 3,
            isWritable: false,
            value: input.memoProgram ?? null,
        },
        tokenAuthority: {
            index: 4,
            isWritable: false,
            value: input.tokenAuthority ?? null,
        },
        whirlpool: {
            index: 5,
            isWritable: true,
            value: input.whirlpool ?? null,
        },
        tokenMintA: {
            index: 6,
            isWritable: false,
            value: input.tokenMintA ?? null,
        },
        tokenMintB: {
            index: 7,
            isWritable: false,
            value: input.tokenMintB ?? null,
        },
        tokenOwnerAccountA: {
            index: 8,
            isWritable: true,
            value: input.tokenOwnerAccountA ?? null,
        },
        tokenVaultA: {
            index: 9,
            isWritable: true,
            value: input.tokenVaultA ?? null,
        },
        tokenOwnerAccountB: {
            index: 10,
            isWritable: true,
            value: input.tokenOwnerAccountB ?? null,
        },
        tokenVaultB: {
            index: 11,
            isWritable: true,
            value: input.tokenVaultB ?? null,
        },
        tickArray0: {
            index: 12,
            isWritable: true,
            value: input.tickArray0 ?? null,
        },
        tickArray1: {
            index: 13,
            isWritable: true,
            value: input.tickArray1 ?? null,
        },
        tickArray2: {
            index: 14,
            isWritable: true,
            value: input.tickArray2 ?? null,
        },
        oracle: {
            index: 15,
            isWritable: true,
            value: input.oracle ?? null,
        },
    };
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getWhirlpoolSwapV2InstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
