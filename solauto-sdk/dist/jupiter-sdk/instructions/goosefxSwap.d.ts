/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type GoosefxSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    controller: PublicKey | Pda;
    pair: PublicKey | Pda;
    sslIn: PublicKey | Pda;
    sslOut: PublicKey | Pda;
    liabilityVaultIn: PublicKey | Pda;
    swappedLiabilityVaultIn: PublicKey | Pda;
    liabilityVaultOut: PublicKey | Pda;
    swappedLiabilityVaultOut: PublicKey | Pda;
    userInAta: PublicKey | Pda;
    userOutAta: PublicKey | Pda;
    feeCollectorAta: PublicKey | Pda;
    userWallet: PublicKey | Pda;
    feeCollector: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type GoosefxSwapInstructionData = {
    discriminator: Array<number>;
};
export type GoosefxSwapInstructionDataArgs = {};
export declare function getGoosefxSwapInstructionDataSerializer(): Serializer<GoosefxSwapInstructionDataArgs, GoosefxSwapInstructionData>;
export declare function goosefxSwap(context: Pick<Context, 'programs'>, input: GoosefxSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=goosefxSwap.d.ts.map