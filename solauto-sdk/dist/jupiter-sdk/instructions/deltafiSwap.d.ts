/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DeltafiSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    marketConfig: PublicKey | Pda;
    swapInfo: PublicKey | Pda;
    userSourceToken: PublicKey | Pda;
    userDestinationToken: PublicKey | Pda;
    swapSourceToken: PublicKey | Pda;
    swapDestinationToken: PublicKey | Pda;
    deltafiUser: PublicKey | Pda;
    adminDestinationToken: PublicKey | Pda;
    pythPriceBase: PublicKey | Pda;
    pythPriceQuote: PublicKey | Pda;
    userAuthority: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type DeltafiSwapInstructionData = {
    discriminator: Array<number>;
};
export type DeltafiSwapInstructionDataArgs = {};
export declare function getDeltafiSwapInstructionDataSerializer(): Serializer<DeltafiSwapInstructionDataArgs, DeltafiSwapInstructionData>;
export declare function deltafiSwap(context: Pick<Context, 'programs'>, input: DeltafiSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=deltafiSwap.d.ts.map