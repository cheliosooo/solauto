"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRaydiumCpSwapInstructionDataSerializer = getRaydiumCpSwapInstructionDataSerializer;
exports.raydiumCpSwap = raydiumCpSwap;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getRaydiumCpSwapInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'RaydiumCpSwapInstructionData' }), (value) => ({
        ...value,
        discriminator: [54, 234, 83, 141, 52, 191, 46, 144],
    }));
}
// Instruction.
function raydiumCpSwap(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('jupiter', 'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4');
    // Accounts.
    const resolvedAccounts = {
        swapProgram: {
            index: 0,
            isWritable: false,
            value: input.swapProgram ?? null,
        },
        payer: {
            index: 1,
            isWritable: false,
            value: input.payer ?? null,
        },
        authority: {
            index: 2,
            isWritable: false,
            value: input.authority ?? null,
        },
        ammConfig: {
            index: 3,
            isWritable: false,
            value: input.ammConfig ?? null,
        },
        poolState: {
            index: 4,
            isWritable: true,
            value: input.poolState ?? null,
        },
        inputTokenAccount: {
            index: 5,
            isWritable: true,
            value: input.inputTokenAccount ?? null,
        },
        outputTokenAccount: {
            index: 6,
            isWritable: true,
            value: input.outputTokenAccount ?? null,
        },
        inputVault: {
            index: 7,
            isWritable: true,
            value: input.inputVault ?? null,
        },
        outputVault: {
            index: 8,
            isWritable: true,
            value: input.outputVault ?? null,
        },
        inputTokenProgram: {
            index: 9,
            isWritable: false,
            value: input.inputTokenProgram ?? null,
        },
        outputTokenProgram: {
            index: 10,
            isWritable: false,
            value: input.outputTokenProgram ?? null,
        },
        inputTokenMint: {
            index: 11,
            isWritable: false,
            value: input.inputTokenMint ?? null,
        },
        outputTokenMint: {
            index: 12,
            isWritable: false,
            value: input.outputTokenMint ?? null,
        },
        observationState: {
            index: 13,
            isWritable: true,
            value: input.observationState ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer.publicKey;
    }
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity.publicKey;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getRaydiumCpSwapInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
