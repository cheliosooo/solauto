/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type PumpdotfunWrappedBuyInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    global: PublicKey | Pda;
    feeRecipient: PublicKey | Pda;
    mint: PublicKey | Pda;
    bondingCurve: PublicKey | Pda;
    associatedBondingCurve: PublicKey | Pda;
    associatedUser: PublicKey | Pda;
    user: PublicKey | Pda;
    systemProgram?: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
    rent?: PublicKey | Pda;
    eventAuthority: PublicKey | Pda;
    program: PublicKey | Pda;
    userWsolTokenAccount: PublicKey | Pda;
    tempWsolTokenAccount: PublicKey | Pda;
    wsolMint: PublicKey | Pda;
};
export type PumpdotfunWrappedBuyInstructionData = {
    discriminator: Array<number>;
};
export type PumpdotfunWrappedBuyInstructionDataArgs = {};
export declare function getPumpdotfunWrappedBuyInstructionDataSerializer(): Serializer<PumpdotfunWrappedBuyInstructionDataArgs, PumpdotfunWrappedBuyInstructionData>;
export declare function pumpdotfunWrappedBuy(context: Pick<Context, 'programs'>, input: PumpdotfunWrappedBuyInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=pumpdotfunWrappedBuy.d.ts.map