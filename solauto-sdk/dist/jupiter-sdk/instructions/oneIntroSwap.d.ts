/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type OneIntroSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    metadataState: PublicKey | Pda;
    poolState: PublicKey | Pda;
    poolAuthPda: PublicKey | Pda;
    poolTokenInAccount: PublicKey | Pda;
    poolTokenOutAccount: PublicKey | Pda;
    user: PublicKey | Pda;
    userTokenInAccount: PublicKey | Pda;
    userTokenOutAccount: PublicKey | Pda;
    metadataSwapFeeAccount: PublicKey | Pda;
    referralTokenAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type OneIntroSwapInstructionData = {
    discriminator: Array<number>;
};
export type OneIntroSwapInstructionDataArgs = {};
export declare function getOneIntroSwapInstructionDataSerializer(): Serializer<OneIntroSwapInstructionDataArgs, OneIntroSwapInstructionData>;
export declare function oneIntroSwap(context: Pick<Context, 'programs'>, input: OneIntroSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=oneIntroSwap.d.ts.map