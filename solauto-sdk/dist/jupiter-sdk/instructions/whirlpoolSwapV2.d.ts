/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type WhirlpoolSwapV2InstructionAccounts = {
    swapProgram: PublicKey | Pda;
    tokenProgramA: PublicKey | Pda;
    tokenProgramB: PublicKey | Pda;
    memoProgram: PublicKey | Pda;
    tokenAuthority: PublicKey | Pda;
    whirlpool: PublicKey | Pda;
    tokenMintA: PublicKey | Pda;
    tokenMintB: PublicKey | Pda;
    tokenOwnerAccountA: PublicKey | Pda;
    tokenVaultA: PublicKey | Pda;
    tokenOwnerAccountB: PublicKey | Pda;
    tokenVaultB: PublicKey | Pda;
    tickArray0: PublicKey | Pda;
    tickArray1: PublicKey | Pda;
    tickArray2: PublicKey | Pda;
    /** Oracle is currently unused and will be enabled on subsequent updates */
    oracle: PublicKey | Pda;
};
export type WhirlpoolSwapV2InstructionData = {
    discriminator: Array<number>;
};
export type WhirlpoolSwapV2InstructionDataArgs = {};
export declare function getWhirlpoolSwapV2InstructionDataSerializer(): Serializer<WhirlpoolSwapV2InstructionDataArgs, WhirlpoolSwapV2InstructionData>;
export declare function whirlpoolSwapV2(context: Pick<Context, 'programs'>, input: WhirlpoolSwapV2InstructionAccounts): TransactionBuilder;
//# sourceMappingURL=whirlpoolSwapV2.d.ts.map