/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type AldrinSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    pool: PublicKey | Pda;
    poolSigner: PublicKey | Pda;
    poolMint: PublicKey | Pda;
    baseTokenVault: PublicKey | Pda;
    quoteTokenVault: PublicKey | Pda;
    feePoolTokenAccount: PublicKey | Pda;
    walletAuthority: PublicKey | Pda;
    userBaseTokenAccount: PublicKey | Pda;
    userQuoteTokenAccount: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type AldrinSwapInstructionData = {
    discriminator: Array<number>;
};
export type AldrinSwapInstructionDataArgs = {};
export declare function getAldrinSwapInstructionDataSerializer(): Serializer<AldrinSwapInstructionDataArgs, AldrinSwapInstructionData>;
export declare function aldrinSwap(context: Pick<Context, 'programs'>, input: AldrinSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=aldrinSwap.d.ts.map