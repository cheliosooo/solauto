/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type MeteoraDlmmSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    lbPair: PublicKey | Pda;
    binArrayBitmapExtension: PublicKey | Pda;
    reserveX: PublicKey | Pda;
    reserveY: PublicKey | Pda;
    userTokenIn: PublicKey | Pda;
    userTokenOut: PublicKey | Pda;
    tokenXMint: PublicKey | Pda;
    tokenYMint: PublicKey | Pda;
    oracle: PublicKey | Pda;
    hostFeeIn: PublicKey | Pda;
    user: PublicKey | Pda;
    tokenXProgram: PublicKey | Pda;
    tokenYProgram: PublicKey | Pda;
    eventAuthority: PublicKey | Pda;
    program: PublicKey | Pda;
};
export type MeteoraDlmmSwapInstructionData = {
    discriminator: Array<number>;
};
export type MeteoraDlmmSwapInstructionDataArgs = {};
export declare function getMeteoraDlmmSwapInstructionDataSerializer(): Serializer<MeteoraDlmmSwapInstructionDataArgs, MeteoraDlmmSwapInstructionData>;
export declare function meteoraDlmmSwap(context: Pick<Context, 'programs'>, input: MeteoraDlmmSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=meteoraDlmmSwap.d.ts.map