/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type InvariantSwapInstructionAccounts = {
    swapProgram: PublicKey | Pda;
    state: PublicKey | Pda;
    pool: PublicKey | Pda;
    tickmap: PublicKey | Pda;
    accountX: PublicKey | Pda;
    accountY: PublicKey | Pda;
    reserveX: PublicKey | Pda;
    reserveY: PublicKey | Pda;
    owner: PublicKey | Pda;
    programAuthority: PublicKey | Pda;
    tokenProgram?: PublicKey | Pda;
};
export type InvariantSwapInstructionData = {
    discriminator: Array<number>;
};
export type InvariantSwapInstructionDataArgs = {};
export declare function getInvariantSwapInstructionDataSerializer(): Serializer<InvariantSwapInstructionDataArgs, InvariantSwapInstructionData>;
export declare function invariantSwap(context: Pick<Context, 'programs'>, input: InvariantSwapInstructionAccounts): TransactionBuilder;
//# sourceMappingURL=invariantSwap.d.ts.map