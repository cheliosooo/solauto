/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** EmptyRoute: Empty route */
export declare class EmptyRouteError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** SlippageToleranceExceeded: Slippage tolerance exceeded */
export declare class SlippageToleranceExceededError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidCalculation: Invalid calculation */
export declare class InvalidCalculationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MissingPlatformFeeAccount: Missing platform fee account */
export declare class MissingPlatformFeeAccountError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidSlippage: Invalid slippage */
export declare class InvalidSlippageError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotEnoughPercent: Not enough percent to 100 */
export declare class NotEnoughPercentError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidInputIndex: Token input index is invalid */
export declare class InvalidInputIndexError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidOutputIndex: Token output index is invalid */
export declare class InvalidOutputIndexError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotEnoughAccountKeys: Not Enough Account keys */
export declare class NotEnoughAccountKeysError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NonZeroMinimumOutAmountNotSupported: Non zero minimum out amount not supported */
export declare class NonZeroMinimumOutAmountNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidRoutePlan: Invalid route plan */
export declare class InvalidRoutePlanError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidReferralAuthority: Invalid referral authority */
export declare class InvalidReferralAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** LedgerTokenAccountDoesNotMatch: Token account doesn't match the ledger */
export declare class LedgerTokenAccountDoesNotMatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidTokenLedger: Invalid token ledger */
export declare class InvalidTokenLedgerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncorrectTokenProgramID: Token program ID is invalid */
export declare class IncorrectTokenProgramIDError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** TokenProgramNotProvided: Token program not provided */
export declare class TokenProgramNotProvidedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** SwapNotSupported: Swap not supported */
export declare class SwapNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExactOutAmountNotMatched: Exact out amount doesn't match */
export declare class ExactOutAmountNotMatchedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getJupiterErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getJupiterErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
//# sourceMappingURL=jupiter.d.ts.map