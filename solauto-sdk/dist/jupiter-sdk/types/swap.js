"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSwapSerializer = getSwapSerializer;
exports.swap = swap;
exports.isSwap = isSwap;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const _1 = require(".");
function getSwapSerializer() {
    return (0, serializers_1.dataEnum)([
        ['Saber', (0, serializers_1.unit)()],
        ['SaberAddDecimalsDeposit', (0, serializers_1.unit)()],
        ['SaberAddDecimalsWithdraw', (0, serializers_1.unit)()],
        ['TokenSwap', (0, serializers_1.unit)()],
        ['Sencha', (0, serializers_1.unit)()],
        ['Step', (0, serializers_1.unit)()],
        ['Cropper', (0, serializers_1.unit)()],
        ['Raydium', (0, serializers_1.unit)()],
        [
            'Crema',
            (0, serializers_1.struct)([['aToB', (0, serializers_1.bool)()]]),
        ],
        ['Lifinity', (0, serializers_1.unit)()],
        ['Mercurial', (0, serializers_1.unit)()],
        ['Cykura', (0, serializers_1.unit)()],
        [
            'Serum',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        ['MarinadeDeposit', (0, serializers_1.unit)()],
        ['MarinadeUnstake', (0, serializers_1.unit)()],
        [
            'Aldrin',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        [
            'AldrinV2',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        [
            'Whirlpool',
            (0, serializers_1.struct)([['aToB', (0, serializers_1.bool)()]]),
        ],
        [
            'Invariant',
            (0, serializers_1.struct)([['xToY', (0, serializers_1.bool)()]]),
        ],
        ['Meteora', (0, serializers_1.unit)()],
        ['GooseFX', (0, serializers_1.unit)()],
        [
            'DeltaFi',
            (0, serializers_1.struct)([['stable', (0, serializers_1.bool)()]]),
        ],
        ['Balansol', (0, serializers_1.unit)()],
        [
            'MarcoPolo',
            (0, serializers_1.struct)([['xToY', (0, serializers_1.bool)()]]),
        ],
        [
            'Dradex',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        ['LifinityV2', (0, serializers_1.unit)()],
        ['RaydiumClmm', (0, serializers_1.unit)()],
        [
            'Openbook',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        [
            'Phoenix',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        [
            'Symmetry',
            (0, serializers_1.struct)([
                ['fromTokenId', (0, serializers_1.u64)()],
                ['toTokenId', (0, serializers_1.u64)()],
            ]),
        ],
        ['TokenSwapV2', (0, serializers_1.unit)()],
        ['HeliumTreasuryManagementRedeemV0', (0, serializers_1.unit)()],
        ['StakeDexStakeWrappedSol', (0, serializers_1.unit)()],
        [
            'StakeDexSwapViaStake',
            (0, serializers_1.struct)([
                ['bridgeStakeSeed', (0, serializers_1.u32)()],
            ]),
        ],
        ['GooseFXV2', (0, serializers_1.unit)()],
        ['Perps', (0, serializers_1.unit)()],
        ['PerpsAddLiquidity', (0, serializers_1.unit)()],
        ['PerpsRemoveLiquidity', (0, serializers_1.unit)()],
        ['MeteoraDlmm', (0, serializers_1.unit)()],
        [
            'OpenBookV2',
            (0, serializers_1.struct)([
                ['side', (0, _1.getSideSerializer)()],
            ]),
        ],
        ['RaydiumClmmV2', (0, serializers_1.unit)()],
        [
            'StakeDexPrefundWithdrawStakeAndDepositStake',
            (0, serializers_1.struct)([['bridgeStakeSeed', (0, serializers_1.u32)()]]),
        ],
        [
            'Clone',
            (0, serializers_1.struct)([
                ['poolIndex', (0, serializers_1.u8)()],
                ['quantityIsInput', (0, serializers_1.bool)()],
                ['quantityIsCollateral', (0, serializers_1.bool)()],
            ]),
        ],
        [
            'SanctumS',
            (0, serializers_1.struct)([
                ['srcLstValueCalcAccs', (0, serializers_1.u8)()],
                ['dstLstValueCalcAccs', (0, serializers_1.u8)()],
                ['srcLstIndex', (0, serializers_1.u32)()],
                ['dstLstIndex', (0, serializers_1.u32)()],
            ]),
        ],
        [
            'SanctumSAddLiquidity',
            (0, serializers_1.struct)([
                ['lstValueCalcAccs', (0, serializers_1.u8)()],
                ['lstIndex', (0, serializers_1.u32)()],
            ]),
        ],
        [
            'SanctumSRemoveLiquidity',
            (0, serializers_1.struct)([
                ['lstValueCalcAccs', (0, serializers_1.u8)()],
                ['lstIndex', (0, serializers_1.u32)()],
            ]),
        ],
        ['RaydiumCP', (0, serializers_1.unit)()],
        [
            'WhirlpoolSwapV2',
            (0, serializers_1.struct)([
                ['aToB', (0, serializers_1.bool)()],
                [
                    'remainingAccountsInfo',
                    (0, serializers_1.option)((0, _1.getRemainingAccountsInfoSerializer)()),
                ],
            ]),
        ],
        ['OneIntro', (0, serializers_1.unit)()],
        ['PumpdotfunWrappedBuy', (0, serializers_1.unit)()],
        ['PumpdotfunWrappedSell', (0, serializers_1.unit)()],
        ['PerpsV2', (0, serializers_1.unit)()],
        ['PerpsV2AddLiquidity', (0, serializers_1.unit)()],
        ['PerpsV2RemoveLiquidity', (0, serializers_1.unit)()],
        ['MoonshotWrappedBuy', (0, serializers_1.unit)()],
        ['MoonshotWrappedSell', (0, serializers_1.unit)()],
        ['StabbleStableSwap', (0, serializers_1.unit)()],
        ['StabbleWeightedSwap', (0, serializers_1.unit)()],
        [
            'Obric',
            (0, serializers_1.struct)([['xToY', (0, serializers_1.bool)()]]),
        ],
    ], { description: 'Swap' });
}
function swap(kind, data) {
    return Array.isArray(data)
        ? { __kind: kind, fields: data }
        : { __kind: kind, ...(data ?? {}) };
}
function isSwap(kind, value) {
    return value.__kind === kind;
}
