"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncorrectInstructionsError = exports.RebalanceAbuseError = exports.InstructionIsCPIError = exports.InvalidRebalanceConditionError = exports.ExceededValidUtilizationRateError = exports.UnableToRebalanceError = exports.StaleProtocolDataError = exports.InvalidAutomationDataError = exports.InvalidDCASettingsError = exports.InvalidPositionSettingsError = exports.FailedAccountDeserializationError = exports.IncorrectAccountsError = void 0;
exports.getSolautoErrorFromCode = getSolautoErrorFromCode;
exports.getSolautoErrorFromName = getSolautoErrorFromName;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** IncorrectAccounts: Missing or incorrect accounts provided for the given instruction */
class IncorrectAccountsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing or incorrect accounts provided for the given instruction', program, cause);
        this.name = 'IncorrectAccounts';
        this.code = 0x0; // 0
    }
}
exports.IncorrectAccountsError = IncorrectAccountsError;
codeToErrorMap.set(0x0, IncorrectAccountsError);
nameToErrorMap.set('IncorrectAccounts', IncorrectAccountsError);
/** FailedAccountDeserialization: Failed to deserialize account data, incorrect account was likely given */
class FailedAccountDeserializationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Failed to deserialize account data, incorrect account was likely given', program, cause);
        this.name = 'FailedAccountDeserialization';
        this.code = 0x1; // 1
    }
}
exports.FailedAccountDeserializationError = FailedAccountDeserializationError;
codeToErrorMap.set(0x1, FailedAccountDeserializationError);
nameToErrorMap.set('FailedAccountDeserialization', FailedAccountDeserializationError);
/** InvalidPositionSettings: Invalid position settings given */
class InvalidPositionSettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid position settings given', program, cause);
        this.name = 'InvalidPositionSettings';
        this.code = 0x2; // 2
    }
}
exports.InvalidPositionSettingsError = InvalidPositionSettingsError;
codeToErrorMap.set(0x2, InvalidPositionSettingsError);
nameToErrorMap.set('InvalidPositionSettings', InvalidPositionSettingsError);
/** InvalidDCASettings: Invalid DCA settings given */
class InvalidDCASettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid DCA settings given', program, cause);
        this.name = 'InvalidDCASettings';
        this.code = 0x3; // 3
    }
}
exports.InvalidDCASettingsError = InvalidDCASettingsError;
codeToErrorMap.set(0x3, InvalidDCASettingsError);
nameToErrorMap.set('InvalidDCASettings', InvalidDCASettingsError);
/** InvalidAutomationData: Invalid automation data given */
class InvalidAutomationDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid automation data given', program, cause);
        this.name = 'InvalidAutomationData';
        this.code = 0x4; // 4
    }
}
exports.InvalidAutomationDataError = InvalidAutomationDataError;
codeToErrorMap.set(0x4, InvalidAutomationDataError);
nameToErrorMap.set('InvalidAutomationData', InvalidAutomationDataError);
/** StaleProtocolData: Stale protocol data. Refresh instruction must be invoked before taking a protocol action */
class StaleProtocolDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Stale protocol data. Refresh instruction must be invoked before taking a protocol action', program, cause);
        this.name = 'StaleProtocolData';
        this.code = 0x5; // 5
    }
}
exports.StaleProtocolDataError = StaleProtocolDataError;
codeToErrorMap.set(0x5, StaleProtocolDataError);
nameToErrorMap.set('StaleProtocolData', StaleProtocolDataError);
/** UnableToRebalance: Unable to adjust position to the desired utilization rate */
class UnableToRebalanceError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Unable to adjust position to the desired utilization rate', program, cause);
        this.name = 'UnableToRebalance';
        this.code = 0x6; // 6
    }
}
exports.UnableToRebalanceError = UnableToRebalanceError;
codeToErrorMap.set(0x6, UnableToRebalanceError);
nameToErrorMap.set('UnableToRebalance', UnableToRebalanceError);
/** ExceededValidUtilizationRate: Desired action brought the utilization rate to an unsafe amount */
class ExceededValidUtilizationRateError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Desired action brought the utilization rate to an unsafe amount', program, cause);
        this.name = 'ExceededValidUtilizationRate';
        this.code = 0x7; // 7
    }
}
exports.ExceededValidUtilizationRateError = ExceededValidUtilizationRateError;
codeToErrorMap.set(0x7, ExceededValidUtilizationRateError);
nameToErrorMap.set('ExceededValidUtilizationRate', ExceededValidUtilizationRateError);
/** InvalidRebalanceCondition: Invalid position condition to rebalance */
class InvalidRebalanceConditionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid position condition to rebalance', program, cause);
        this.name = 'InvalidRebalanceCondition';
        this.code = 0x8; // 8
    }
}
exports.InvalidRebalanceConditionError = InvalidRebalanceConditionError;
codeToErrorMap.set(0x8, InvalidRebalanceConditionError);
nameToErrorMap.set('InvalidRebalanceCondition', InvalidRebalanceConditionError);
/** InstructionIsCPI: Unable to invoke instruction through a CPI */
class InstructionIsCPIError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Unable to invoke instruction through a CPI', program, cause);
        this.name = 'InstructionIsCPI';
        this.code = 0x9; // 9
    }
}
exports.InstructionIsCPIError = InstructionIsCPIError;
codeToErrorMap.set(0x9, InstructionIsCPIError);
nameToErrorMap.set('InstructionIsCPI', InstructionIsCPIError);
/** RebalanceAbuse: Too many rebalance instruction invocations in the same transaction */
class RebalanceAbuseError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Too many rebalance instruction invocations in the same transaction', program, cause);
        this.name = 'RebalanceAbuse';
        this.code = 0xa; // 10
    }
}
exports.RebalanceAbuseError = RebalanceAbuseError;
codeToErrorMap.set(0xa, RebalanceAbuseError);
nameToErrorMap.set('RebalanceAbuse', RebalanceAbuseError);
/** IncorrectInstructions: Incorrect set of instructions in the transaction */
class IncorrectInstructionsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect set of instructions in the transaction', program, cause);
        this.name = 'IncorrectInstructions';
        this.code = 0xb; // 11
    }
}
exports.IncorrectInstructionsError = IncorrectInstructionsError;
codeToErrorMap.set(0xb, IncorrectInstructionsError);
nameToErrorMap.set('IncorrectInstructions', IncorrectInstructionsError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSolautoErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSolautoErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
