"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncorrectDebtAdjustmentError = exports.IncorrectInstructionsError = exports.InstructionIsCPIError = exports.InvalidRebalanceConditionError = exports.InvalidAutomationDataError = exports.InvalidDCASettingsError = exports.InvalidPositionSettingsError = exports.FailedAccountDeserializationError = exports.IncorrectAccountsError = void 0;
exports.getSolautoErrorFromCode = getSolautoErrorFromCode;
exports.getSolautoErrorFromName = getSolautoErrorFromName;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** IncorrectAccounts: Missing or incorrect accounts provided for the given instruction */
class IncorrectAccountsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Missing or incorrect accounts provided for the given instruction', program, cause);
        this.name = 'IncorrectAccounts';
        this.code = 0x0; // 0
    }
}
exports.IncorrectAccountsError = IncorrectAccountsError;
codeToErrorMap.set(0x0, IncorrectAccountsError);
nameToErrorMap.set('IncorrectAccounts', IncorrectAccountsError);
/** FailedAccountDeserialization: Failed to deserialize account data */
class FailedAccountDeserializationError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Failed to deserialize account data', program, cause);
        this.name = 'FailedAccountDeserialization';
        this.code = 0x1; // 1
    }
}
exports.FailedAccountDeserializationError = FailedAccountDeserializationError;
codeToErrorMap.set(0x1, FailedAccountDeserializationError);
nameToErrorMap.set('FailedAccountDeserialization', FailedAccountDeserializationError);
/** InvalidPositionSettings: Invalid position settings provided */
class InvalidPositionSettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid position settings provided', program, cause);
        this.name = 'InvalidPositionSettings';
        this.code = 0x2; // 2
    }
}
exports.InvalidPositionSettingsError = InvalidPositionSettingsError;
codeToErrorMap.set(0x2, InvalidPositionSettingsError);
nameToErrorMap.set('InvalidPositionSettings', InvalidPositionSettingsError);
/** InvalidDCASettings: Invalid DCA configuration provided */
class InvalidDCASettingsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid DCA configuration provided', program, cause);
        this.name = 'InvalidDCASettings';
        this.code = 0x3; // 3
    }
}
exports.InvalidDCASettingsError = InvalidDCASettingsError;
codeToErrorMap.set(0x3, InvalidDCASettingsError);
nameToErrorMap.set('InvalidDCASettings', InvalidDCASettingsError);
/** InvalidAutomationData: Invalid automation settings provided */
class InvalidAutomationDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid automation settings provided', program, cause);
        this.name = 'InvalidAutomationData';
        this.code = 0x4; // 4
    }
}
exports.InvalidAutomationDataError = InvalidAutomationDataError;
codeToErrorMap.set(0x4, InvalidAutomationDataError);
nameToErrorMap.set('InvalidAutomationData', InvalidAutomationDataError);
/** InvalidRebalanceCondition: Invalid position condition to rebalance */
class InvalidRebalanceConditionError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid position condition to rebalance', program, cause);
        this.name = 'InvalidRebalanceCondition';
        this.code = 0x5; // 5
    }
}
exports.InvalidRebalanceConditionError = InvalidRebalanceConditionError;
codeToErrorMap.set(0x5, InvalidRebalanceConditionError);
nameToErrorMap.set('InvalidRebalanceCondition', InvalidRebalanceConditionError);
/** InstructionIsCPI: Unable to invoke instruction through a CPI */
class InstructionIsCPIError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Unable to invoke instruction through a CPI', program, cause);
        this.name = 'InstructionIsCPI';
        this.code = 0x6; // 6
    }
}
exports.InstructionIsCPIError = InstructionIsCPIError;
codeToErrorMap.set(0x6, InstructionIsCPIError);
nameToErrorMap.set('InstructionIsCPI', InstructionIsCPIError);
/** IncorrectInstructions: Incorrect set of instructions in the transaction */
class IncorrectInstructionsError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect set of instructions in the transaction', program, cause);
        this.name = 'IncorrectInstructions';
        this.code = 0x7; // 7
    }
}
exports.IncorrectInstructionsError = IncorrectInstructionsError;
codeToErrorMap.set(0x7, IncorrectInstructionsError);
nameToErrorMap.set('IncorrectInstructions', IncorrectInstructionsError);
/** IncorrectDebtAdjustment: Incorrect swap amount provided. Likely due to high price volatility */
class IncorrectDebtAdjustmentError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incorrect swap amount provided. Likely due to high price volatility', program, cause);
        this.name = 'IncorrectDebtAdjustment';
        this.code = 0x8; // 8
    }
}
exports.IncorrectDebtAdjustmentError = IncorrectDebtAdjustmentError;
codeToErrorMap.set(0x8, IncorrectDebtAdjustmentError);
nameToErrorMap.set('IncorrectDebtAdjustment', IncorrectDebtAdjustmentError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getSolautoErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getSolautoErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
