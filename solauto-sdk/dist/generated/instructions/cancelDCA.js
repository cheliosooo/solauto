"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCancelDCAInstructionDataSerializer = getCancelDCAInstructionDataSerializer;
exports.cancelDCA = cancelDCA;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getCancelDCAInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.u8)()]], {
        description: 'CancelDCAInstructionData',
    }), (value) => ({ ...value, discriminator: 5 }));
}
// Instruction.
function cancelDCA(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('solauto', 'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV');
    // Accounts.
    const resolvedAccounts = {
        signer: {
            index: 0,
            isWritable: false,
            value: input.signer ?? null,
        },
        systemProgram: {
            index: 1,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 2,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        ataProgram: {
            index: 3,
            isWritable: false,
            value: input.ataProgram ?? null,
        },
        solautoPosition: {
            index: 4,
            isWritable: true,
            value: input.solautoPosition ?? null,
        },
        dcaMint: {
            index: 5,
            isWritable: false,
            value: input.dcaMint ?? null,
        },
        positionDcaTa: {
            index: 6,
            isWritable: true,
            value: input.positionDcaTa ?? null,
        },
        signerDcaTa: {
            index: 7,
            isWritable: true,
            value: input.signerDcaTa ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.ataProgram.value) {
        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.ataProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCancelDCAInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
