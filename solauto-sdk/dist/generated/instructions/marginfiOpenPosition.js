"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMarginfiOpenPositionInstructionDataSerializer = getMarginfiOpenPositionInstructionDataSerializer;
exports.marginfiOpenPosition = marginfiOpenPosition;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getMarginfiOpenPositionInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['positionType', (0, types_1.getPositionTypeSerializer)()],
        ['positionData', (0, types_1.getUpdatePositionDataSerializer)()],
        ['marginfiAccountSeedIdx', (0, serializers_1.option)((0, serializers_1.u64)())],
    ], { description: 'MarginfiOpenPositionInstructionData' }), (value) => ({ ...value, discriminator: 6 }));
}
// Instruction.
function marginfiOpenPosition(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('solauto', 'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV');
    // Accounts.
    const resolvedAccounts = {
        signer: {
            index: 0,
            isWritable: false,
            value: input.signer ?? null,
        },
        marginfiProgram: {
            index: 1,
            isWritable: false,
            value: input.marginfiProgram ?? null,
        },
        systemProgram: {
            index: 2,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        tokenProgram: {
            index: 3,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        ataProgram: {
            index: 4,
            isWritable: false,
            value: input.ataProgram ?? null,
        },
        rent: { index: 5, isWritable: false, value: input.rent ?? null },
        signerReferralState: {
            index: 6,
            isWritable: false,
            value: input.signerReferralState ?? null,
        },
        referredByState: {
            index: 7,
            isWritable: false,
            value: input.referredByState ?? null,
        },
        referredBySupplyTa: {
            index: 8,
            isWritable: true,
            value: input.referredBySupplyTa ?? null,
        },
        solautoPosition: {
            index: 9,
            isWritable: true,
            value: input.solautoPosition ?? null,
        },
        marginfiGroup: {
            index: 10,
            isWritable: false,
            value: input.marginfiGroup ?? null,
        },
        marginfiAccount: {
            index: 11,
            isWritable: true,
            value: input.marginfiAccount ?? null,
        },
        supplyMint: {
            index: 12,
            isWritable: false,
            value: input.supplyMint ?? null,
        },
        supplyBank: {
            index: 13,
            isWritable: false,
            value: input.supplyBank ?? null,
        },
        positionSupplyTa: {
            index: 14,
            isWritable: true,
            value: input.positionSupplyTa ?? null,
        },
        debtMint: {
            index: 15,
            isWritable: false,
            value: input.debtMint ?? null,
        },
        debtBank: {
            index: 16,
            isWritable: false,
            value: input.debtBank ?? null,
        },
        positionDebtTa: {
            index: 17,
            isWritable: true,
            value: input.positionDebtTa ?? null,
        },
        signerDebtTa: {
            index: 18,
            isWritable: true,
            value: input.signerDebtTa ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.ataProgram.value) {
        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.ataProgram.isWritable = false;
    }
    if (!resolvedAccounts.rent.value) {
        resolvedAccounts.rent.value = (0, umi_1.publicKey)('SysvarRent111111111111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getMarginfiOpenPositionInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
