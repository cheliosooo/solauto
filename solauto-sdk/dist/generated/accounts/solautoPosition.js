"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSolautoPositionAccountDataSerializer = getSolautoPositionAccountDataSerializer;
exports.deserializeSolautoPosition = deserializeSolautoPosition;
exports.fetchSolautoPosition = fetchSolautoPosition;
exports.safeFetchSolautoPosition = safeFetchSolautoPosition;
exports.fetchAllSolautoPosition = fetchAllSolautoPosition;
exports.safeFetchAllSolautoPosition = safeFetchAllSolautoPosition;
exports.getSolautoPositionGpaBuilder = getSolautoPositionGpaBuilder;
exports.getSolautoPositionSize = getSolautoPositionSize;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getSolautoPositionAccountDataSerializer() {
    return (0, serializers_1.struct)([
        ['bump', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 1 })],
        ['positionId', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 1 })],
        ['selfManaged', (0, types_1.getPodBoolSerializer)()],
        ['padding1', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 5 })],
        ['authority', (0, serializers_1.publicKey)()],
        ['position', (0, types_1.getPositionDataSerializer)()],
        ['state', (0, types_1.getPositionStateSerializer)()],
        ['rebalance', (0, types_1.getRebalanceDataSerializer)()],
        ['padding', (0, serializers_1.array)((0, serializers_1.u32)(), { size: 32 })],
    ], { description: 'SolautoPositionAccountData' });
}
function deserializeSolautoPosition(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getSolautoPositionAccountDataSerializer());
}
async function fetchSolautoPosition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'SolautoPosition');
    return deserializeSolautoPosition(maybeAccount);
}
async function safeFetchSolautoPosition(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeSolautoPosition(maybeAccount) : null;
}
async function fetchAllSolautoPosition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'SolautoPosition');
        return deserializeSolautoPosition(maybeAccount);
    });
}
async function safeFetchAllSolautoPosition(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeSolautoPosition(maybeAccount));
}
function getSolautoPositionGpaBuilder(context) {
    const programId = context.programs.getPublicKey('solauto', 'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        bump: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 1 })],
        positionId: [1, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 1 })],
        selfManaged: [2, (0, types_1.getPodBoolSerializer)()],
        padding1: [3, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 5 })],
        authority: [8, (0, serializers_1.publicKey)()],
        position: [40, (0, types_1.getPositionDataSerializer)()],
        state: [360, (0, types_1.getPositionStateSerializer)()],
        rebalance: [648, (0, types_1.getRebalanceDataSerializer)()],
        padding: [704, (0, serializers_1.array)((0, serializers_1.u32)(), { size: 32 })],
    })
        .deserializeUsing((account) => deserializeSolautoPosition(account));
}
function getSolautoPositionSize() {
    return 832;
}
