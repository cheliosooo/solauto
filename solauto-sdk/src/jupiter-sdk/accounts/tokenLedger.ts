/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type TokenLedger = Account<TokenLedgerAccountData>;

export type TokenLedgerAccountData = {
  discriminator: Array<number>;
  tokenAccount: PublicKey;
  amount: bigint;
};

export type TokenLedgerAccountDataArgs = {
  tokenAccount: PublicKey;
  amount: number | bigint;
};

export function getTokenLedgerAccountDataSerializer(): Serializer<
  TokenLedgerAccountDataArgs,
  TokenLedgerAccountData
> {
  return mapSerializer<TokenLedgerAccountDataArgs, any, TokenLedgerAccountData>(
    struct<TokenLedgerAccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['tokenAccount', publicKeySerializer()],
        ['amount', u64()],
      ],
      { description: 'TokenLedgerAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [156, 247, 9, 188, 54, 108, 85, 77],
    })
  ) as Serializer<TokenLedgerAccountDataArgs, TokenLedgerAccountData>;
}

export function deserializeTokenLedger(rawAccount: RpcAccount): TokenLedger {
  return deserializeAccount(rawAccount, getTokenLedgerAccountDataSerializer());
}

export async function fetchTokenLedger(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenLedger> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'TokenLedger');
  return deserializeTokenLedger(maybeAccount);
}

export async function safeFetchTokenLedger(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<TokenLedger | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeTokenLedger(maybeAccount) : null;
}

export async function fetchAllTokenLedger(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenLedger[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'TokenLedger');
    return deserializeTokenLedger(maybeAccount);
  });
}

export async function safeFetchAllTokenLedger(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<TokenLedger[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeTokenLedger(maybeAccount as RpcAccount));
}

export function getTokenLedgerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      tokenAccount: PublicKey;
      amount: number | bigint;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      tokenAccount: [8, publicKeySerializer()],
      amount: [40, u64()],
    })
    .deserializeUsing<TokenLedger>((account) => deserializeTokenLedger(account))
    .whereField('discriminator', [156, 247, 9, 188, 54, 108, 85, 77]);
}

export function getTokenLedgerSize(): number {
  return 48;
}
