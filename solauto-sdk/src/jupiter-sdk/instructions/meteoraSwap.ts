/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MeteoraSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  pool: PublicKey | Pda;
  userSourceToken: PublicKey | Pda;
  userDestinationToken: PublicKey | Pda;
  aVault: PublicKey | Pda;
  bVault: PublicKey | Pda;
  aTokenVault: PublicKey | Pda;
  bTokenVault: PublicKey | Pda;
  aVaultLpMint: PublicKey | Pda;
  bVaultLpMint: PublicKey | Pda;
  aVaultLp: PublicKey | Pda;
  bVaultLp: PublicKey | Pda;
  adminTokenFee: PublicKey | Pda;
  user: PublicKey | Pda;
  vaultProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type MeteoraSwapInstructionData = { discriminator: Array<number> };

export type MeteoraSwapInstructionDataArgs = {};

export function getMeteoraSwapInstructionDataSerializer(): Serializer<
  MeteoraSwapInstructionDataArgs,
  MeteoraSwapInstructionData
> {
  return mapSerializer<
    MeteoraSwapInstructionDataArgs,
    any,
    MeteoraSwapInstructionData
  >(
    struct<MeteoraSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'MeteoraSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [127, 125, 226, 12, 81, 24, 204, 35],
    })
  ) as Serializer<MeteoraSwapInstructionDataArgs, MeteoraSwapInstructionData>;
}

// Instruction.
export function meteoraSwap(
  context: Pick<Context, 'programs'>,
  input: MeteoraSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    pool: { index: 1, isWritable: true as boolean, value: input.pool ?? null },
    userSourceToken: {
      index: 2,
      isWritable: true as boolean,
      value: input.userSourceToken ?? null,
    },
    userDestinationToken: {
      index: 3,
      isWritable: true as boolean,
      value: input.userDestinationToken ?? null,
    },
    aVault: {
      index: 4,
      isWritable: true as boolean,
      value: input.aVault ?? null,
    },
    bVault: {
      index: 5,
      isWritable: true as boolean,
      value: input.bVault ?? null,
    },
    aTokenVault: {
      index: 6,
      isWritable: true as boolean,
      value: input.aTokenVault ?? null,
    },
    bTokenVault: {
      index: 7,
      isWritable: true as boolean,
      value: input.bTokenVault ?? null,
    },
    aVaultLpMint: {
      index: 8,
      isWritable: true as boolean,
      value: input.aVaultLpMint ?? null,
    },
    bVaultLpMint: {
      index: 9,
      isWritable: true as boolean,
      value: input.bVaultLpMint ?? null,
    },
    aVaultLp: {
      index: 10,
      isWritable: true as boolean,
      value: input.aVaultLp ?? null,
    },
    bVaultLp: {
      index: 11,
      isWritable: true as boolean,
      value: input.bVaultLp ?? null,
    },
    adminTokenFee: {
      index: 12,
      isWritable: true as boolean,
      value: input.adminTokenFee ?? null,
    },
    user: {
      index: 13,
      isWritable: false as boolean,
      value: input.user ?? null,
    },
    vaultProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.vaultProgram ?? null,
    },
    tokenProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMeteoraSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
