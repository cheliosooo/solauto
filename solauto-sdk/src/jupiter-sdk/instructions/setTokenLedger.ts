/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SetTokenLedgerInstructionAccounts = {
  tokenLedger: PublicKey | Pda;
  tokenAccount: PublicKey | Pda;
};

// Data.
export type SetTokenLedgerInstructionData = { discriminator: Array<number> };

export type SetTokenLedgerInstructionDataArgs = {};

export function getSetTokenLedgerInstructionDataSerializer(): Serializer<
  SetTokenLedgerInstructionDataArgs,
  SetTokenLedgerInstructionData
> {
  return mapSerializer<
    SetTokenLedgerInstructionDataArgs,
    any,
    SetTokenLedgerInstructionData
  >(
    struct<SetTokenLedgerInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SetTokenLedgerInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [228, 85, 185, 112, 78, 79, 77, 2] })
  ) as Serializer<
    SetTokenLedgerInstructionDataArgs,
    SetTokenLedgerInstructionData
  >;
}

// Instruction.
export function setTokenLedger(
  context: Pick<Context, 'programs'>,
  input: SetTokenLedgerInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenLedger: {
      index: 0,
      isWritable: true as boolean,
      value: input.tokenLedger ?? null,
    },
    tokenAccount: {
      index: 1,
      isWritable: false as boolean,
      value: input.tokenAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSetTokenLedgerInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
