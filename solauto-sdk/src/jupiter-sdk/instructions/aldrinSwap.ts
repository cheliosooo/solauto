/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type AldrinSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  pool: PublicKey | Pda;
  poolSigner: PublicKey | Pda;
  poolMint: PublicKey | Pda;
  baseTokenVault: PublicKey | Pda;
  quoteTokenVault: PublicKey | Pda;
  feePoolTokenAccount: PublicKey | Pda;
  walletAuthority: PublicKey | Pda;
  userBaseTokenAccount: PublicKey | Pda;
  userQuoteTokenAccount: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type AldrinSwapInstructionData = { discriminator: Array<number> };

export type AldrinSwapInstructionDataArgs = {};

export function getAldrinSwapInstructionDataSerializer(): Serializer<
  AldrinSwapInstructionDataArgs,
  AldrinSwapInstructionData
> {
  return mapSerializer<
    AldrinSwapInstructionDataArgs,
    any,
    AldrinSwapInstructionData
  >(
    struct<AldrinSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'AldrinSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [251, 232, 119, 166, 225, 185, 169, 161],
    })
  ) as Serializer<AldrinSwapInstructionDataArgs, AldrinSwapInstructionData>;
}

// Instruction.
export function aldrinSwap(
  context: Pick<Context, 'programs'>,
  input: AldrinSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    pool: { index: 1, isWritable: false as boolean, value: input.pool ?? null },
    poolSigner: {
      index: 2,
      isWritable: false as boolean,
      value: input.poolSigner ?? null,
    },
    poolMint: {
      index: 3,
      isWritable: true as boolean,
      value: input.poolMint ?? null,
    },
    baseTokenVault: {
      index: 4,
      isWritable: true as boolean,
      value: input.baseTokenVault ?? null,
    },
    quoteTokenVault: {
      index: 5,
      isWritable: true as boolean,
      value: input.quoteTokenVault ?? null,
    },
    feePoolTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.feePoolTokenAccount ?? null,
    },
    walletAuthority: {
      index: 7,
      isWritable: false as boolean,
      value: input.walletAuthority ?? null,
    },
    userBaseTokenAccount: {
      index: 8,
      isWritable: true as boolean,
      value: input.userBaseTokenAccount ?? null,
    },
    userQuoteTokenAccount: {
      index: 9,
      isWritable: true as boolean,
      value: input.userQuoteTokenAccount ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAldrinSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
