/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u16,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  RoutePlanStep,
  RoutePlanStepArgs,
  getRoutePlanStepSerializer,
} from '../types';

// Accounts.
export type SharedAccountsRouteWithTokenLedgerInstructionAccounts = {
  tokenProgram?: PublicKey | Pda;
  programAuthority: PublicKey | Pda;
  userTransferAuthority: Signer;
  sourceTokenAccount: PublicKey | Pda;
  programSourceTokenAccount: PublicKey | Pda;
  programDestinationTokenAccount: PublicKey | Pda;
  destinationTokenAccount: PublicKey | Pda;
  sourceMint: PublicKey | Pda;
  destinationMint: PublicKey | Pda;
  platformFeeAccount?: PublicKey | Pda;
  token2022Program?: PublicKey | Pda;
  tokenLedger: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type SharedAccountsRouteWithTokenLedgerInstructionData = {
  discriminator: Array<number>;
  id: number;
  routePlan: Array<RoutePlanStep>;
  quotedOutAmount: bigint;
  slippageBps: number;
  platformFeeBps: number;
};

export type SharedAccountsRouteWithTokenLedgerInstructionDataArgs = {
  id: number;
  routePlan: Array<RoutePlanStepArgs>;
  quotedOutAmount: number | bigint;
  slippageBps: number;
  platformFeeBps: number;
};

export function getSharedAccountsRouteWithTokenLedgerInstructionDataSerializer(): Serializer<
  SharedAccountsRouteWithTokenLedgerInstructionDataArgs,
  SharedAccountsRouteWithTokenLedgerInstructionData
> {
  return mapSerializer<
    SharedAccountsRouteWithTokenLedgerInstructionDataArgs,
    any,
    SharedAccountsRouteWithTokenLedgerInstructionData
  >(
    struct<SharedAccountsRouteWithTokenLedgerInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['id', u8()],
        ['routePlan', array(getRoutePlanStepSerializer())],
        ['quotedOutAmount', u64()],
        ['slippageBps', u16()],
        ['platformFeeBps', u8()],
      ],
      { description: 'SharedAccountsRouteWithTokenLedgerInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [230, 121, 143, 80, 119, 159, 106, 170],
    })
  ) as Serializer<
    SharedAccountsRouteWithTokenLedgerInstructionDataArgs,
    SharedAccountsRouteWithTokenLedgerInstructionData
  >;
}

// Args.
export type SharedAccountsRouteWithTokenLedgerInstructionArgs =
  SharedAccountsRouteWithTokenLedgerInstructionDataArgs;

// Instruction.
export function sharedAccountsRouteWithTokenLedger(
  context: Pick<Context, 'programs'>,
  input: SharedAccountsRouteWithTokenLedgerInstructionAccounts &
    SharedAccountsRouteWithTokenLedgerInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    tokenProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    programAuthority: {
      index: 1,
      isWritable: false as boolean,
      value: input.programAuthority ?? null,
    },
    userTransferAuthority: {
      index: 2,
      isWritable: false as boolean,
      value: input.userTransferAuthority ?? null,
    },
    sourceTokenAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.sourceTokenAccount ?? null,
    },
    programSourceTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.programSourceTokenAccount ?? null,
    },
    programDestinationTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.programDestinationTokenAccount ?? null,
    },
    destinationTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.destinationTokenAccount ?? null,
    },
    sourceMint: {
      index: 7,
      isWritable: false as boolean,
      value: input.sourceMint ?? null,
    },
    destinationMint: {
      index: 8,
      isWritable: false as boolean,
      value: input.destinationMint ?? null,
    },
    platformFeeAccount: {
      index: 9,
      isWritable: true as boolean,
      value: input.platformFeeAccount ?? null,
    },
    token2022Program: {
      index: 10,
      isWritable: false as boolean,
      value: input.token2022Program ?? null,
    },
    tokenLedger: {
      index: 11,
      isWritable: false as boolean,
      value: input.tokenLedger ?? null,
    },
    eventAuthority: {
      index: 12,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 13,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: SharedAccountsRouteWithTokenLedgerInstructionArgs = {
    ...input,
  };

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getSharedAccountsRouteWithTokenLedgerInstructionDataSerializer().serialize(
      resolvedArgs as SharedAccountsRouteWithTokenLedgerInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
