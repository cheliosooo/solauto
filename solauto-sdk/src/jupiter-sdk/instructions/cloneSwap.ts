/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CloneSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  user: PublicKey | Pda;
  clone: PublicKey | Pda;
  pools: PublicKey | Pda;
  oracles: PublicKey | Pda;
  userCollateralTokenAccount: PublicKey | Pda;
  userOnassetTokenAccount: PublicKey | Pda;
  onassetMint: PublicKey | Pda;
  collateralMint: PublicKey | Pda;
  collateralVault: PublicKey | Pda;
  treasuryOnassetTokenAccount: PublicKey | Pda;
  treasuryCollateralTokenAccount: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  cloneStaking: PublicKey | Pda;
  userStakingAccount: PublicKey | Pda;
  cloneStakingProgram: PublicKey | Pda;
};

// Data.
export type CloneSwapInstructionData = { discriminator: Array<number> };

export type CloneSwapInstructionDataArgs = {};

export function getCloneSwapInstructionDataSerializer(): Serializer<
  CloneSwapInstructionDataArgs,
  CloneSwapInstructionData
> {
  return mapSerializer<
    CloneSwapInstructionDataArgs,
    any,
    CloneSwapInstructionData
  >(
    struct<CloneSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'CloneSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [85, 201, 154, 92, 133, 31, 142, 85],
    })
  ) as Serializer<CloneSwapInstructionDataArgs, CloneSwapInstructionData>;
}

// Instruction.
export function cloneSwap(
  context: Pick<Context, 'programs'>,
  input: CloneSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    user: { index: 1, isWritable: false as boolean, value: input.user ?? null },
    clone: {
      index: 2,
      isWritable: true as boolean,
      value: input.clone ?? null,
    },
    pools: {
      index: 3,
      isWritable: true as boolean,
      value: input.pools ?? null,
    },
    oracles: {
      index: 4,
      isWritable: true as boolean,
      value: input.oracles ?? null,
    },
    userCollateralTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.userCollateralTokenAccount ?? null,
    },
    userOnassetTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.userOnassetTokenAccount ?? null,
    },
    onassetMint: {
      index: 7,
      isWritable: true as boolean,
      value: input.onassetMint ?? null,
    },
    collateralMint: {
      index: 8,
      isWritable: false as boolean,
      value: input.collateralMint ?? null,
    },
    collateralVault: {
      index: 9,
      isWritable: true as boolean,
      value: input.collateralVault ?? null,
    },
    treasuryOnassetTokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.treasuryOnassetTokenAccount ?? null,
    },
    treasuryCollateralTokenAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.treasuryCollateralTokenAccount ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    cloneStaking: {
      index: 13,
      isWritable: false as boolean,
      value: input.cloneStaking ?? null,
    },
    userStakingAccount: {
      index: 14,
      isWritable: false as boolean,
      value: input.userStakingAccount ?? null,
    },
    cloneStakingProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.cloneStakingProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCloneSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
