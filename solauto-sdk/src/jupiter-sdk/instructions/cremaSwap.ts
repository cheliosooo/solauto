/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CremaSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  clmmConfig: PublicKey | Pda;
  clmmpool: PublicKey | Pda;
  tokenA: PublicKey | Pda;
  tokenB: PublicKey | Pda;
  accountA: PublicKey | Pda;
  accountB: PublicKey | Pda;
  tokenAVault: PublicKey | Pda;
  tokenBVault: PublicKey | Pda;
  tickArrayMap: PublicKey | Pda;
  owner: PublicKey | Pda;
  partner: PublicKey | Pda;
  partnerAtaA: PublicKey | Pda;
  partnerAtaB: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type CremaSwapInstructionData = { discriminator: Array<number> };

export type CremaSwapInstructionDataArgs = {};

export function getCremaSwapInstructionDataSerializer(): Serializer<
  CremaSwapInstructionDataArgs,
  CremaSwapInstructionData
> {
  return mapSerializer<
    CremaSwapInstructionDataArgs,
    any,
    CremaSwapInstructionData
  >(
    struct<CremaSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'CremaSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [169, 220, 41, 250, 35, 190, 133, 198],
    })
  ) as Serializer<CremaSwapInstructionDataArgs, CremaSwapInstructionData>;
}

// Instruction.
export function cremaSwap(
  context: Pick<Context, 'programs'>,
  input: CremaSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    clmmConfig: {
      index: 1,
      isWritable: false as boolean,
      value: input.clmmConfig ?? null,
    },
    clmmpool: {
      index: 2,
      isWritable: true as boolean,
      value: input.clmmpool ?? null,
    },
    tokenA: {
      index: 3,
      isWritable: false as boolean,
      value: input.tokenA ?? null,
    },
    tokenB: {
      index: 4,
      isWritable: false as boolean,
      value: input.tokenB ?? null,
    },
    accountA: {
      index: 5,
      isWritable: true as boolean,
      value: input.accountA ?? null,
    },
    accountB: {
      index: 6,
      isWritable: true as boolean,
      value: input.accountB ?? null,
    },
    tokenAVault: {
      index: 7,
      isWritable: true as boolean,
      value: input.tokenAVault ?? null,
    },
    tokenBVault: {
      index: 8,
      isWritable: true as boolean,
      value: input.tokenBVault ?? null,
    },
    tickArrayMap: {
      index: 9,
      isWritable: true as boolean,
      value: input.tickArrayMap ?? null,
    },
    owner: {
      index: 10,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    partner: {
      index: 11,
      isWritable: false as boolean,
      value: input.partner ?? null,
    },
    partnerAtaA: {
      index: 12,
      isWritable: true as boolean,
      value: input.partnerAtaA ?? null,
    },
    partnerAtaB: {
      index: 13,
      isWritable: true as boolean,
      value: input.partnerAtaB ?? null,
    },
    tokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCremaSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
