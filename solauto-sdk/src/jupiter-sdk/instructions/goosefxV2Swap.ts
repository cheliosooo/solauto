/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type GoosefxV2SwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  pair: PublicKey | Pda;
  poolRegistry: PublicKey | Pda;
  userWallet: PublicKey | Pda;
  sslPoolInSigner: PublicKey | Pda;
  sslPoolOutSigner: PublicKey | Pda;
  userAtaIn: PublicKey | Pda;
  userAtaOut: PublicKey | Pda;
  sslOutMainVault: PublicKey | Pda;
  sslOutSecondaryVault: PublicKey | Pda;
  sslInMainVault: PublicKey | Pda;
  sslInSecondaryVault: PublicKey | Pda;
  sslOutFeeVault: PublicKey | Pda;
  feeDestination: PublicKey | Pda;
  outputTokenPriceHistory: PublicKey | Pda;
  outputTokenOracle: PublicKey | Pda;
  inputTokenPriceHistory: PublicKey | Pda;
  inputTokenOracle: PublicKey | Pda;
  eventEmitter: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type GoosefxV2SwapInstructionData = { discriminator: Array<number> };

export type GoosefxV2SwapInstructionDataArgs = {};

export function getGoosefxV2SwapInstructionDataSerializer(): Serializer<
  GoosefxV2SwapInstructionDataArgs,
  GoosefxV2SwapInstructionData
> {
  return mapSerializer<
    GoosefxV2SwapInstructionDataArgs,
    any,
    GoosefxV2SwapInstructionData
  >(
    struct<GoosefxV2SwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'GoosefxV2SwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [178, 108, 208, 137, 154, 194, 168, 213],
    })
  ) as Serializer<
    GoosefxV2SwapInstructionDataArgs,
    GoosefxV2SwapInstructionData
  >;
}

// Instruction.
export function goosefxV2Swap(
  context: Pick<Context, 'programs'>,
  input: GoosefxV2SwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    pair: { index: 1, isWritable: true as boolean, value: input.pair ?? null },
    poolRegistry: {
      index: 2,
      isWritable: true as boolean,
      value: input.poolRegistry ?? null,
    },
    userWallet: {
      index: 3,
      isWritable: false as boolean,
      value: input.userWallet ?? null,
    },
    sslPoolInSigner: {
      index: 4,
      isWritable: false as boolean,
      value: input.sslPoolInSigner ?? null,
    },
    sslPoolOutSigner: {
      index: 5,
      isWritable: false as boolean,
      value: input.sslPoolOutSigner ?? null,
    },
    userAtaIn: {
      index: 6,
      isWritable: true as boolean,
      value: input.userAtaIn ?? null,
    },
    userAtaOut: {
      index: 7,
      isWritable: true as boolean,
      value: input.userAtaOut ?? null,
    },
    sslOutMainVault: {
      index: 8,
      isWritable: true as boolean,
      value: input.sslOutMainVault ?? null,
    },
    sslOutSecondaryVault: {
      index: 9,
      isWritable: true as boolean,
      value: input.sslOutSecondaryVault ?? null,
    },
    sslInMainVault: {
      index: 10,
      isWritable: true as boolean,
      value: input.sslInMainVault ?? null,
    },
    sslInSecondaryVault: {
      index: 11,
      isWritable: true as boolean,
      value: input.sslInSecondaryVault ?? null,
    },
    sslOutFeeVault: {
      index: 12,
      isWritable: true as boolean,
      value: input.sslOutFeeVault ?? null,
    },
    feeDestination: {
      index: 13,
      isWritable: true as boolean,
      value: input.feeDestination ?? null,
    },
    outputTokenPriceHistory: {
      index: 14,
      isWritable: true as boolean,
      value: input.outputTokenPriceHistory ?? null,
    },
    outputTokenOracle: {
      index: 15,
      isWritable: false as boolean,
      value: input.outputTokenOracle ?? null,
    },
    inputTokenPriceHistory: {
      index: 16,
      isWritable: true as boolean,
      value: input.inputTokenPriceHistory ?? null,
    },
    inputTokenOracle: {
      index: 17,
      isWritable: false as boolean,
      value: input.inputTokenOracle ?? null,
    },
    eventEmitter: {
      index: 18,
      isWritable: true as boolean,
      value: input.eventEmitter ?? null,
    },
    tokenProgram: {
      index: 19,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getGoosefxV2SwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
