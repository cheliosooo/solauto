/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MarinadeUnstakeInstructionAccounts = {
  marinadeFinanceProgram: PublicKey | Pda;
  state: PublicKey | Pda;
  msolMint: PublicKey | Pda;
  liqPoolSolLegPda: PublicKey | Pda;
  liqPoolMsolLeg: PublicKey | Pda;
  treasuryMsolAccount: PublicKey | Pda;
  getMsolFrom: PublicKey | Pda;
  getMsolFromAuthority: PublicKey | Pda;
  transferSolTo: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  userWsolTokenAccount: PublicKey | Pda;
};

// Data.
export type MarinadeUnstakeInstructionData = { discriminator: Array<number> };

export type MarinadeUnstakeInstructionDataArgs = {};

export function getMarinadeUnstakeInstructionDataSerializer(): Serializer<
  MarinadeUnstakeInstructionDataArgs,
  MarinadeUnstakeInstructionData
> {
  return mapSerializer<
    MarinadeUnstakeInstructionDataArgs,
    any,
    MarinadeUnstakeInstructionData
  >(
    struct<MarinadeUnstakeInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'MarinadeUnstakeInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [41, 120, 15, 0, 113, 219, 42, 1] })
  ) as Serializer<
    MarinadeUnstakeInstructionDataArgs,
    MarinadeUnstakeInstructionData
  >;
}

// Instruction.
export function marinadeUnstake(
  context: Pick<Context, 'programs'>,
  input: MarinadeUnstakeInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    marinadeFinanceProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.marinadeFinanceProgram ?? null,
    },
    state: {
      index: 1,
      isWritable: true as boolean,
      value: input.state ?? null,
    },
    msolMint: {
      index: 2,
      isWritable: true as boolean,
      value: input.msolMint ?? null,
    },
    liqPoolSolLegPda: {
      index: 3,
      isWritable: true as boolean,
      value: input.liqPoolSolLegPda ?? null,
    },
    liqPoolMsolLeg: {
      index: 4,
      isWritable: true as boolean,
      value: input.liqPoolMsolLeg ?? null,
    },
    treasuryMsolAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.treasuryMsolAccount ?? null,
    },
    getMsolFrom: {
      index: 6,
      isWritable: true as boolean,
      value: input.getMsolFrom ?? null,
    },
    getMsolFromAuthority: {
      index: 7,
      isWritable: false as boolean,
      value: input.getMsolFromAuthority ?? null,
    },
    transferSolTo: {
      index: 8,
      isWritable: true as boolean,
      value: input.transferSolTo ?? null,
    },
    systemProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    userWsolTokenAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.userWsolTokenAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMarinadeUnstakeInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
