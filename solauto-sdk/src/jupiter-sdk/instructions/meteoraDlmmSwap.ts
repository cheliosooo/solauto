/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MeteoraDlmmSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  lbPair: PublicKey | Pda;
  binArrayBitmapExtension: PublicKey | Pda;
  reserveX: PublicKey | Pda;
  reserveY: PublicKey | Pda;
  userTokenIn: PublicKey | Pda;
  userTokenOut: PublicKey | Pda;
  tokenXMint: PublicKey | Pda;
  tokenYMint: PublicKey | Pda;
  oracle: PublicKey | Pda;
  hostFeeIn: PublicKey | Pda;
  user: PublicKey | Pda;
  tokenXProgram: PublicKey | Pda;
  tokenYProgram: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type MeteoraDlmmSwapInstructionData = { discriminator: Array<number> };

export type MeteoraDlmmSwapInstructionDataArgs = {};

export function getMeteoraDlmmSwapInstructionDataSerializer(): Serializer<
  MeteoraDlmmSwapInstructionDataArgs,
  MeteoraDlmmSwapInstructionData
> {
  return mapSerializer<
    MeteoraDlmmSwapInstructionDataArgs,
    any,
    MeteoraDlmmSwapInstructionData
  >(
    struct<MeteoraDlmmSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'MeteoraDlmmSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [127, 64, 37, 138, 173, 243, 207, 84],
    })
  ) as Serializer<
    MeteoraDlmmSwapInstructionDataArgs,
    MeteoraDlmmSwapInstructionData
  >;
}

// Instruction.
export function meteoraDlmmSwap(
  context: Pick<Context, 'programs'>,
  input: MeteoraDlmmSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    lbPair: {
      index: 1,
      isWritable: true as boolean,
      value: input.lbPair ?? null,
    },
    binArrayBitmapExtension: {
      index: 2,
      isWritable: false as boolean,
      value: input.binArrayBitmapExtension ?? null,
    },
    reserveX: {
      index: 3,
      isWritable: true as boolean,
      value: input.reserveX ?? null,
    },
    reserveY: {
      index: 4,
      isWritable: true as boolean,
      value: input.reserveY ?? null,
    },
    userTokenIn: {
      index: 5,
      isWritable: true as boolean,
      value: input.userTokenIn ?? null,
    },
    userTokenOut: {
      index: 6,
      isWritable: true as boolean,
      value: input.userTokenOut ?? null,
    },
    tokenXMint: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenXMint ?? null,
    },
    tokenYMint: {
      index: 8,
      isWritable: false as boolean,
      value: input.tokenYMint ?? null,
    },
    oracle: {
      index: 9,
      isWritable: true as boolean,
      value: input.oracle ?? null,
    },
    hostFeeIn: {
      index: 10,
      isWritable: false as boolean,
      value: input.hostFeeIn ?? null,
    },
    user: {
      index: 11,
      isWritable: false as boolean,
      value: input.user ?? null,
    },
    tokenXProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenXProgram ?? null,
    },
    tokenYProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenYProgram ?? null,
    },
    eventAuthority: {
      index: 14,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 15,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMeteoraDlmmSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
