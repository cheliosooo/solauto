/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type GoosefxSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  controller: PublicKey | Pda;
  pair: PublicKey | Pda;
  sslIn: PublicKey | Pda;
  sslOut: PublicKey | Pda;
  liabilityVaultIn: PublicKey | Pda;
  swappedLiabilityVaultIn: PublicKey | Pda;
  liabilityVaultOut: PublicKey | Pda;
  swappedLiabilityVaultOut: PublicKey | Pda;
  userInAta: PublicKey | Pda;
  userOutAta: PublicKey | Pda;
  feeCollectorAta: PublicKey | Pda;
  userWallet: PublicKey | Pda;
  feeCollector: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type GoosefxSwapInstructionData = { discriminator: Array<number> };

export type GoosefxSwapInstructionDataArgs = {};

export function getGoosefxSwapInstructionDataSerializer(): Serializer<
  GoosefxSwapInstructionDataArgs,
  GoosefxSwapInstructionData
> {
  return mapSerializer<
    GoosefxSwapInstructionDataArgs,
    any,
    GoosefxSwapInstructionData
  >(
    struct<GoosefxSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'GoosefxSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [222, 136, 46, 123, 189, 125, 124, 122],
    })
  ) as Serializer<GoosefxSwapInstructionDataArgs, GoosefxSwapInstructionData>;
}

// Instruction.
export function goosefxSwap(
  context: Pick<Context, 'programs'>,
  input: GoosefxSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    controller: {
      index: 1,
      isWritable: false as boolean,
      value: input.controller ?? null,
    },
    pair: { index: 2, isWritable: true as boolean, value: input.pair ?? null },
    sslIn: {
      index: 3,
      isWritable: true as boolean,
      value: input.sslIn ?? null,
    },
    sslOut: {
      index: 4,
      isWritable: true as boolean,
      value: input.sslOut ?? null,
    },
    liabilityVaultIn: {
      index: 5,
      isWritable: true as boolean,
      value: input.liabilityVaultIn ?? null,
    },
    swappedLiabilityVaultIn: {
      index: 6,
      isWritable: true as boolean,
      value: input.swappedLiabilityVaultIn ?? null,
    },
    liabilityVaultOut: {
      index: 7,
      isWritable: true as boolean,
      value: input.liabilityVaultOut ?? null,
    },
    swappedLiabilityVaultOut: {
      index: 8,
      isWritable: true as boolean,
      value: input.swappedLiabilityVaultOut ?? null,
    },
    userInAta: {
      index: 9,
      isWritable: true as boolean,
      value: input.userInAta ?? null,
    },
    userOutAta: {
      index: 10,
      isWritable: true as boolean,
      value: input.userOutAta ?? null,
    },
    feeCollectorAta: {
      index: 11,
      isWritable: true as boolean,
      value: input.feeCollectorAta ?? null,
    },
    userWallet: {
      index: 12,
      isWritable: false as boolean,
      value: input.userWallet ?? null,
    },
    feeCollector: {
      index: 13,
      isWritable: false as boolean,
      value: input.feeCollector ?? null,
    },
    tokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getGoosefxSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
