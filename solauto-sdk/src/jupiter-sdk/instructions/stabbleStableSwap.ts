/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type StabbleStableSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  user: PublicKey | Pda;
  userTokenIn: PublicKey | Pda;
  userTokenOut: PublicKey | Pda;
  vaultTokenIn: PublicKey | Pda;
  vaultTokenOut: PublicKey | Pda;
  beneficiaryTokenOut: PublicKey | Pda;
  pool: PublicKey | Pda;
  withdrawAuthority: PublicKey | Pda;
  vault: PublicKey | Pda;
  vaultAuthority: PublicKey | Pda;
  vaultProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type StabbleStableSwapInstructionData = { discriminator: Array<number> };

export type StabbleStableSwapInstructionDataArgs = {};

export function getStabbleStableSwapInstructionDataSerializer(): Serializer<
  StabbleStableSwapInstructionDataArgs,
  StabbleStableSwapInstructionData
> {
  return mapSerializer<
    StabbleStableSwapInstructionDataArgs,
    any,
    StabbleStableSwapInstructionData
  >(
    struct<StabbleStableSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'StabbleStableSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [144, 73, 163, 148, 143, 34, 40, 144],
    })
  ) as Serializer<
    StabbleStableSwapInstructionDataArgs,
    StabbleStableSwapInstructionData
  >;
}

// Instruction.
export function stabbleStableSwap(
  context: Pick<Context, 'programs'>,
  input: StabbleStableSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    user: { index: 1, isWritable: false as boolean, value: input.user ?? null },
    userTokenIn: {
      index: 2,
      isWritable: true as boolean,
      value: input.userTokenIn ?? null,
    },
    userTokenOut: {
      index: 3,
      isWritable: true as boolean,
      value: input.userTokenOut ?? null,
    },
    vaultTokenIn: {
      index: 4,
      isWritable: true as boolean,
      value: input.vaultTokenIn ?? null,
    },
    vaultTokenOut: {
      index: 5,
      isWritable: true as boolean,
      value: input.vaultTokenOut ?? null,
    },
    beneficiaryTokenOut: {
      index: 6,
      isWritable: true as boolean,
      value: input.beneficiaryTokenOut ?? null,
    },
    pool: { index: 7, isWritable: true as boolean, value: input.pool ?? null },
    withdrawAuthority: {
      index: 8,
      isWritable: false as boolean,
      value: input.withdrawAuthority ?? null,
    },
    vault: {
      index: 9,
      isWritable: false as boolean,
      value: input.vault ?? null,
    },
    vaultAuthority: {
      index: 10,
      isWritable: false as boolean,
      value: input.vaultAuthority ?? null,
    },
    vaultProgram: {
      index: 11,
      isWritable: false as boolean,
      value: input.vaultProgram ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getStabbleStableSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
