/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type PerpsV2RemoveLiquidityInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  owner: PublicKey | Pda;
  fundingOrReceivingAccount: PublicKey | Pda;
  lpTokenAccount: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  custody: PublicKey | Pda;
  custodyDovesPriceAccount: PublicKey | Pda;
  custodyPythnetPriceAccount: PublicKey | Pda;
  custodyTokenAccount: PublicKey | Pda;
  lpTokenMint: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type PerpsV2RemoveLiquidityInstructionData = {
  discriminator: Array<number>;
};

export type PerpsV2RemoveLiquidityInstructionDataArgs = {};

export function getPerpsV2RemoveLiquidityInstructionDataSerializer(): Serializer<
  PerpsV2RemoveLiquidityInstructionDataArgs,
  PerpsV2RemoveLiquidityInstructionData
> {
  return mapSerializer<
    PerpsV2RemoveLiquidityInstructionDataArgs,
    any,
    PerpsV2RemoveLiquidityInstructionData
  >(
    struct<PerpsV2RemoveLiquidityInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'PerpsV2RemoveLiquidityInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [16, 103, 98, 99, 106, 36, 5, 105] })
  ) as Serializer<
    PerpsV2RemoveLiquidityInstructionDataArgs,
    PerpsV2RemoveLiquidityInstructionData
  >;
}

// Instruction.
export function perpsV2RemoveLiquidity(
  context: Pick<Context, 'programs'>,
  input: PerpsV2RemoveLiquidityInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    owner: {
      index: 1,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    fundingOrReceivingAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.fundingOrReceivingAccount ?? null,
    },
    lpTokenAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.lpTokenAccount ?? null,
    },
    transferAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 5,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 6, isWritable: true as boolean, value: input.pool ?? null },
    custody: {
      index: 7,
      isWritable: true as boolean,
      value: input.custody ?? null,
    },
    custodyDovesPriceAccount: {
      index: 8,
      isWritable: false as boolean,
      value: input.custodyDovesPriceAccount ?? null,
    },
    custodyPythnetPriceAccount: {
      index: 9,
      isWritable: false as boolean,
      value: input.custodyPythnetPriceAccount ?? null,
    },
    custodyTokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.custodyTokenAccount ?? null,
    },
    lpTokenMint: {
      index: 11,
      isWritable: true as boolean,
      value: input.lpTokenMint ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    eventAuthority: {
      index: 13,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 14,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getPerpsV2RemoveLiquidityInstructionDataSerializer().serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
