/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type WhirlpoolSwapV2InstructionAccounts = {
  swapProgram: PublicKey | Pda;
  tokenProgramA: PublicKey | Pda;
  tokenProgramB: PublicKey | Pda;
  memoProgram: PublicKey | Pda;
  tokenAuthority: PublicKey | Pda;
  whirlpool: PublicKey | Pda;
  tokenMintA: PublicKey | Pda;
  tokenMintB: PublicKey | Pda;
  tokenOwnerAccountA: PublicKey | Pda;
  tokenVaultA: PublicKey | Pda;
  tokenOwnerAccountB: PublicKey | Pda;
  tokenVaultB: PublicKey | Pda;
  tickArray0: PublicKey | Pda;
  tickArray1: PublicKey | Pda;
  tickArray2: PublicKey | Pda;
  /** Oracle is currently unused and will be enabled on subsequent updates */
  oracle: PublicKey | Pda;
};

// Data.
export type WhirlpoolSwapV2InstructionData = { discriminator: Array<number> };

export type WhirlpoolSwapV2InstructionDataArgs = {};

export function getWhirlpoolSwapV2InstructionDataSerializer(): Serializer<
  WhirlpoolSwapV2InstructionDataArgs,
  WhirlpoolSwapV2InstructionData
> {
  return mapSerializer<
    WhirlpoolSwapV2InstructionDataArgs,
    any,
    WhirlpoolSwapV2InstructionData
  >(
    struct<WhirlpoolSwapV2InstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'WhirlpoolSwapV2InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [56, 166, 129, 9, 157, 205, 118, 217],
    })
  ) as Serializer<
    WhirlpoolSwapV2InstructionDataArgs,
    WhirlpoolSwapV2InstructionData
  >;
}

// Instruction.
export function whirlpoolSwapV2(
  context: Pick<Context, 'programs'>,
  input: WhirlpoolSwapV2InstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    tokenProgramA: {
      index: 1,
      isWritable: false as boolean,
      value: input.tokenProgramA ?? null,
    },
    tokenProgramB: {
      index: 2,
      isWritable: false as boolean,
      value: input.tokenProgramB ?? null,
    },
    memoProgram: {
      index: 3,
      isWritable: false as boolean,
      value: input.memoProgram ?? null,
    },
    tokenAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.tokenAuthority ?? null,
    },
    whirlpool: {
      index: 5,
      isWritable: true as boolean,
      value: input.whirlpool ?? null,
    },
    tokenMintA: {
      index: 6,
      isWritable: false as boolean,
      value: input.tokenMintA ?? null,
    },
    tokenMintB: {
      index: 7,
      isWritable: false as boolean,
      value: input.tokenMintB ?? null,
    },
    tokenOwnerAccountA: {
      index: 8,
      isWritable: true as boolean,
      value: input.tokenOwnerAccountA ?? null,
    },
    tokenVaultA: {
      index: 9,
      isWritable: true as boolean,
      value: input.tokenVaultA ?? null,
    },
    tokenOwnerAccountB: {
      index: 10,
      isWritable: true as boolean,
      value: input.tokenOwnerAccountB ?? null,
    },
    tokenVaultB: {
      index: 11,
      isWritable: true as boolean,
      value: input.tokenVaultB ?? null,
    },
    tickArray0: {
      index: 12,
      isWritable: true as boolean,
      value: input.tickArray0 ?? null,
    },
    tickArray1: {
      index: 13,
      isWritable: true as boolean,
      value: input.tickArray1 ?? null,
    },
    tickArray2: {
      index: 14,
      isWritable: true as boolean,
      value: input.tickArray2 ?? null,
    },
    oracle: {
      index: 15,
      isWritable: true as boolean,
      value: input.oracle ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWhirlpoolSwapV2InstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
