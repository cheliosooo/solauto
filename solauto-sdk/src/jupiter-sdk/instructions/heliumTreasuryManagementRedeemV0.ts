/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type HeliumTreasuryManagementRedeemV0InstructionAccounts = {
  swapProgram: PublicKey | Pda;
  treasuryManagement: PublicKey | Pda;
  treasuryMint: PublicKey | Pda;
  supplyMint: PublicKey | Pda;
  treasury: PublicKey | Pda;
  circuitBreaker: PublicKey | Pda;
  from: PublicKey | Pda;
  to: PublicKey | Pda;
  owner: PublicKey | Pda;
  circuitBreakerProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type HeliumTreasuryManagementRedeemV0InstructionData = {
  discriminator: Array<number>;
};

export type HeliumTreasuryManagementRedeemV0InstructionDataArgs = {};

export function getHeliumTreasuryManagementRedeemV0InstructionDataSerializer(): Serializer<
  HeliumTreasuryManagementRedeemV0InstructionDataArgs,
  HeliumTreasuryManagementRedeemV0InstructionData
> {
  return mapSerializer<
    HeliumTreasuryManagementRedeemV0InstructionDataArgs,
    any,
    HeliumTreasuryManagementRedeemV0InstructionData
  >(
    struct<HeliumTreasuryManagementRedeemV0InstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'HeliumTreasuryManagementRedeemV0InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [163, 159, 163, 25, 243, 161, 108, 74],
    })
  ) as Serializer<
    HeliumTreasuryManagementRedeemV0InstructionDataArgs,
    HeliumTreasuryManagementRedeemV0InstructionData
  >;
}

// Instruction.
export function heliumTreasuryManagementRedeemV0(
  context: Pick<Context, 'programs'>,
  input: HeliumTreasuryManagementRedeemV0InstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    treasuryManagement: {
      index: 1,
      isWritable: false as boolean,
      value: input.treasuryManagement ?? null,
    },
    treasuryMint: {
      index: 2,
      isWritable: false as boolean,
      value: input.treasuryMint ?? null,
    },
    supplyMint: {
      index: 3,
      isWritable: true as boolean,
      value: input.supplyMint ?? null,
    },
    treasury: {
      index: 4,
      isWritable: true as boolean,
      value: input.treasury ?? null,
    },
    circuitBreaker: {
      index: 5,
      isWritable: true as boolean,
      value: input.circuitBreaker ?? null,
    },
    from: { index: 6, isWritable: true as boolean, value: input.from ?? null },
    to: { index: 7, isWritable: true as boolean, value: input.to ?? null },
    owner: {
      index: 8,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    circuitBreakerProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.circuitBreakerProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getHeliumTreasuryManagementRedeemV0InstructionDataSerializer().serialize(
      {}
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
