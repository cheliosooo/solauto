/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type MarcoPoloSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  state: PublicKey | Pda;
  pool: PublicKey | Pda;
  tokenX: PublicKey | Pda;
  tokenY: PublicKey | Pda;
  poolXAccount: PublicKey | Pda;
  poolYAccount: PublicKey | Pda;
  swapperXAccount: PublicKey | Pda;
  swapperYAccount: PublicKey | Pda;
  swapper: PublicKey | Pda;
  referrerXAccount: PublicKey | Pda;
  referrerYAccount: PublicKey | Pda;
  referrer: PublicKey | Pda;
  programAuthority: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type MarcoPoloSwapInstructionData = { discriminator: Array<number> };

export type MarcoPoloSwapInstructionDataArgs = {};

export function getMarcoPoloSwapInstructionDataSerializer(): Serializer<
  MarcoPoloSwapInstructionDataArgs,
  MarcoPoloSwapInstructionData
> {
  return mapSerializer<
    MarcoPoloSwapInstructionDataArgs,
    any,
    MarcoPoloSwapInstructionData
  >(
    struct<MarcoPoloSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'MarcoPoloSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [241, 147, 94, 15, 58, 108, 179, 68],
    })
  ) as Serializer<
    MarcoPoloSwapInstructionDataArgs,
    MarcoPoloSwapInstructionData
  >;
}

// Instruction.
export function marcoPoloSwap(
  context: Pick<Context, 'programs'>,
  input: MarcoPoloSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    state: {
      index: 1,
      isWritable: false as boolean,
      value: input.state ?? null,
    },
    pool: { index: 2, isWritable: true as boolean, value: input.pool ?? null },
    tokenX: {
      index: 3,
      isWritable: false as boolean,
      value: input.tokenX ?? null,
    },
    tokenY: {
      index: 4,
      isWritable: false as boolean,
      value: input.tokenY ?? null,
    },
    poolXAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.poolXAccount ?? null,
    },
    poolYAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.poolYAccount ?? null,
    },
    swapperXAccount: {
      index: 7,
      isWritable: true as boolean,
      value: input.swapperXAccount ?? null,
    },
    swapperYAccount: {
      index: 8,
      isWritable: true as boolean,
      value: input.swapperYAccount ?? null,
    },
    swapper: {
      index: 9,
      isWritable: true as boolean,
      value: input.swapper ?? null,
    },
    referrerXAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.referrerXAccount ?? null,
    },
    referrerYAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.referrerYAccount ?? null,
    },
    referrer: {
      index: 12,
      isWritable: true as boolean,
      value: input.referrer ?? null,
    },
    programAuthority: {
      index: 13,
      isWritable: false as boolean,
      value: input.programAuthority ?? null,
    },
    systemProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 16,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    rent: {
      index: 17,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMarcoPoloSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
