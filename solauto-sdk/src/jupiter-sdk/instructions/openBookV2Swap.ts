/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type OpenBookV2SwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  signer: PublicKey | Pda;
  penaltyPayer: PublicKey | Pda;
  market: PublicKey | Pda;
  marketAuthority: PublicKey | Pda;
  bids: PublicKey | Pda;
  asks: PublicKey | Pda;
  marketBaseVault: PublicKey | Pda;
  marketQuoteVault: PublicKey | Pda;
  eventHeap: PublicKey | Pda;
  userBaseAccount: PublicKey | Pda;
  userQuoteAccount: PublicKey | Pda;
  oracleA: PublicKey | Pda;
  oracleB: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  openOrdersAdmin: PublicKey | Pda;
};

// Data.
export type OpenBookV2SwapInstructionData = { discriminator: Array<number> };

export type OpenBookV2SwapInstructionDataArgs = {};

export function getOpenBookV2SwapInstructionDataSerializer(): Serializer<
  OpenBookV2SwapInstructionDataArgs,
  OpenBookV2SwapInstructionData
> {
  return mapSerializer<
    OpenBookV2SwapInstructionDataArgs,
    any,
    OpenBookV2SwapInstructionData
  >(
    struct<OpenBookV2SwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'OpenBookV2SwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [135, 26, 163, 43, 198, 221, 29, 67],
    })
  ) as Serializer<
    OpenBookV2SwapInstructionDataArgs,
    OpenBookV2SwapInstructionData
  >;
}

// Instruction.
export function openBookV2Swap(
  context: Pick<Context, 'programs'>,
  input: OpenBookV2SwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    signer: {
      index: 1,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    penaltyPayer: {
      index: 2,
      isWritable: true as boolean,
      value: input.penaltyPayer ?? null,
    },
    market: {
      index: 3,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    marketAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.marketAuthority ?? null,
    },
    bids: { index: 5, isWritable: true as boolean, value: input.bids ?? null },
    asks: { index: 6, isWritable: true as boolean, value: input.asks ?? null },
    marketBaseVault: {
      index: 7,
      isWritable: true as boolean,
      value: input.marketBaseVault ?? null,
    },
    marketQuoteVault: {
      index: 8,
      isWritable: true as boolean,
      value: input.marketQuoteVault ?? null,
    },
    eventHeap: {
      index: 9,
      isWritable: true as boolean,
      value: input.eventHeap ?? null,
    },
    userBaseAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.userBaseAccount ?? null,
    },
    userQuoteAccount: {
      index: 11,
      isWritable: true as boolean,
      value: input.userQuoteAccount ?? null,
    },
    oracleA: {
      index: 12,
      isWritable: false as boolean,
      value: input.oracleA ?? null,
    },
    oracleB: {
      index: 13,
      isWritable: false as boolean,
      value: input.oracleB ?? null,
    },
    tokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    systemProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    openOrdersAdmin: {
      index: 16,
      isWritable: false as boolean,
      value: input.openOrdersAdmin ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getOpenBookV2SwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
