/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type PerpsSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  owner: PublicKey | Pda;
  fundingAccount: PublicKey | Pda;
  receivingAccount: PublicKey | Pda;
  transferAuthority: PublicKey | Pda;
  perpetuals: PublicKey | Pda;
  pool: PublicKey | Pda;
  receivingCustody: PublicKey | Pda;
  receivingCustodyOracleAccount: PublicKey | Pda;
  receivingCustodyTokenAccount: PublicKey | Pda;
  dispensingCustody: PublicKey | Pda;
  dispensingCustodyOracleAccount: PublicKey | Pda;
  dispensingCustodyTokenAccount: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  eventAuthority: PublicKey | Pda;
  program: PublicKey | Pda;
};

// Data.
export type PerpsSwapInstructionData = { discriminator: Array<number> };

export type PerpsSwapInstructionDataArgs = {};

export function getPerpsSwapInstructionDataSerializer(): Serializer<
  PerpsSwapInstructionDataArgs,
  PerpsSwapInstructionData
> {
  return mapSerializer<
    PerpsSwapInstructionDataArgs,
    any,
    PerpsSwapInstructionData
  >(
    struct<PerpsSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'PerpsSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [147, 22, 108, 178, 110, 18, 171, 34],
    })
  ) as Serializer<PerpsSwapInstructionDataArgs, PerpsSwapInstructionData>;
}

// Instruction.
export function perpsSwap(
  context: Pick<Context, 'programs'>,
  input: PerpsSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    owner: {
      index: 1,
      isWritable: true as boolean,
      value: input.owner ?? null,
    },
    fundingAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.fundingAccount ?? null,
    },
    receivingAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.receivingAccount ?? null,
    },
    transferAuthority: {
      index: 4,
      isWritable: false as boolean,
      value: input.transferAuthority ?? null,
    },
    perpetuals: {
      index: 5,
      isWritable: false as boolean,
      value: input.perpetuals ?? null,
    },
    pool: { index: 6, isWritable: true as boolean, value: input.pool ?? null },
    receivingCustody: {
      index: 7,
      isWritable: true as boolean,
      value: input.receivingCustody ?? null,
    },
    receivingCustodyOracleAccount: {
      index: 8,
      isWritable: false as boolean,
      value: input.receivingCustodyOracleAccount ?? null,
    },
    receivingCustodyTokenAccount: {
      index: 9,
      isWritable: true as boolean,
      value: input.receivingCustodyTokenAccount ?? null,
    },
    dispensingCustody: {
      index: 10,
      isWritable: true as boolean,
      value: input.dispensingCustody ?? null,
    },
    dispensingCustodyOracleAccount: {
      index: 11,
      isWritable: false as boolean,
      value: input.dispensingCustodyOracleAccount ?? null,
    },
    dispensingCustodyTokenAccount: {
      index: 12,
      isWritable: true as boolean,
      value: input.dispensingCustodyTokenAccount ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    eventAuthority: {
      index: 14,
      isWritable: false as boolean,
      value: input.eventAuthority ?? null,
    },
    program: {
      index: 15,
      isWritable: false as boolean,
      value: input.program ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getPerpsSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
