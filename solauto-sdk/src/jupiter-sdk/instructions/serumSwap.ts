/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SerumSwapInstructionAccounts = {
  market: PublicKey | Pda;
  openOrders: PublicKey | Pda;
  requestQueue: PublicKey | Pda;
  eventQueue: PublicKey | Pda;
  bids: PublicKey | Pda;
  asks: PublicKey | Pda;
  coinVault: PublicKey | Pda;
  pcVault: PublicKey | Pda;
  vaultSigner: PublicKey | Pda;
  authority?: PublicKey | Pda;
  orderPayerTokenAccount: PublicKey | Pda;
  coinWallet: PublicKey | Pda;
  pcWallet: PublicKey | Pda;
  dexProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type SerumSwapInstructionData = { discriminator: Array<number> };

export type SerumSwapInstructionDataArgs = {};

export function getSerumSwapInstructionDataSerializer(): Serializer<
  SerumSwapInstructionDataArgs,
  SerumSwapInstructionData
> {
  return mapSerializer<
    SerumSwapInstructionDataArgs,
    any,
    SerumSwapInstructionData
  >(
    struct<SerumSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'SerumSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [88, 183, 70, 249, 214, 118, 82, 210],
    })
  ) as Serializer<SerumSwapInstructionDataArgs, SerumSwapInstructionData>;
}

// Instruction.
export function serumSwap(
  context: Pick<Context, 'identity' | 'programs'>,
  input: SerumSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    market: {
      index: 0,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    openOrders: {
      index: 1,
      isWritable: true as boolean,
      value: input.openOrders ?? null,
    },
    requestQueue: {
      index: 2,
      isWritable: true as boolean,
      value: input.requestQueue ?? null,
    },
    eventQueue: {
      index: 3,
      isWritable: true as boolean,
      value: input.eventQueue ?? null,
    },
    bids: { index: 4, isWritable: true as boolean, value: input.bids ?? null },
    asks: { index: 5, isWritable: true as boolean, value: input.asks ?? null },
    coinVault: {
      index: 6,
      isWritable: true as boolean,
      value: input.coinVault ?? null,
    },
    pcVault: {
      index: 7,
      isWritable: true as boolean,
      value: input.pcVault ?? null,
    },
    vaultSigner: {
      index: 8,
      isWritable: false as boolean,
      value: input.vaultSigner ?? null,
    },
    authority: {
      index: 9,
      isWritable: false as boolean,
      value: input.authority ?? null,
    },
    orderPayerTokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.orderPayerTokenAccount ?? null,
    },
    coinWallet: {
      index: 11,
      isWritable: true as boolean,
      value: input.coinWallet ?? null,
    },
    pcWallet: {
      index: 12,
      isWritable: true as boolean,
      value: input.pcWallet ?? null,
    },
    dexProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.dexProgram ?? null,
    },
    tokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    rent: {
      index: 15,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSerumSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
