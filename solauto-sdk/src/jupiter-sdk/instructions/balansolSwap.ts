/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type BalansolSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  authority?: PublicKey | Pda;
  pool: PublicKey | Pda;
  taxMan: PublicKey | Pda;
  bidMint: PublicKey | Pda;
  treasurer: PublicKey | Pda;
  srcTreasury: PublicKey | Pda;
  srcAssociatedTokenAccount: PublicKey | Pda;
  askMint: PublicKey | Pda;
  dstTreasury: PublicKey | Pda;
  dstAssociatedTokenAccount: PublicKey | Pda;
  dstTokenAccountTaxman: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  rent?: PublicKey | Pda;
};

// Data.
export type BalansolSwapInstructionData = { discriminator: Array<number> };

export type BalansolSwapInstructionDataArgs = {};

export function getBalansolSwapInstructionDataSerializer(): Serializer<
  BalansolSwapInstructionDataArgs,
  BalansolSwapInstructionData
> {
  return mapSerializer<
    BalansolSwapInstructionDataArgs,
    any,
    BalansolSwapInstructionData
  >(
    struct<BalansolSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'BalansolSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [137, 109, 253, 253, 70, 109, 11, 100],
    })
  ) as Serializer<BalansolSwapInstructionDataArgs, BalansolSwapInstructionData>;
}

// Instruction.
export function balansolSwap(
  context: Pick<Context, 'identity' | 'programs'>,
  input: BalansolSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    authority: {
      index: 1,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    pool: { index: 2, isWritable: true as boolean, value: input.pool ?? null },
    taxMan: {
      index: 3,
      isWritable: true as boolean,
      value: input.taxMan ?? null,
    },
    bidMint: {
      index: 4,
      isWritable: false as boolean,
      value: input.bidMint ?? null,
    },
    treasurer: {
      index: 5,
      isWritable: false as boolean,
      value: input.treasurer ?? null,
    },
    srcTreasury: {
      index: 6,
      isWritable: true as boolean,
      value: input.srcTreasury ?? null,
    },
    srcAssociatedTokenAccount: {
      index: 7,
      isWritable: true as boolean,
      value: input.srcAssociatedTokenAccount ?? null,
    },
    askMint: {
      index: 8,
      isWritable: false as boolean,
      value: input.askMint ?? null,
    },
    dstTreasury: {
      index: 9,
      isWritable: true as boolean,
      value: input.dstTreasury ?? null,
    },
    dstAssociatedTokenAccount: {
      index: 10,
      isWritable: true as boolean,
      value: input.dstAssociatedTokenAccount ?? null,
    },
    dstTokenAccountTaxman: {
      index: 11,
      isWritable: true as boolean,
      value: input.dstTokenAccountTaxman ?? null,
    },
    systemProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 13,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    rent: {
      index: 15,
      isWritable: false as boolean,
      value: input.rent ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity.publicKey;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getBalansolSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
