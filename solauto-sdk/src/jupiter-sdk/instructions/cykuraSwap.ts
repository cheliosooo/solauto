/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CykuraSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  signer: PublicKey | Pda;
  factoryState: PublicKey | Pda;
  poolState: PublicKey | Pda;
  inputTokenAccount: PublicKey | Pda;
  outputTokenAccount: PublicKey | Pda;
  inputVault: PublicKey | Pda;
  outputVault: PublicKey | Pda;
  lastObservationState: PublicKey | Pda;
  coreProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type CykuraSwapInstructionData = { discriminator: Array<number> };

export type CykuraSwapInstructionDataArgs = {};

export function getCykuraSwapInstructionDataSerializer(): Serializer<
  CykuraSwapInstructionDataArgs,
  CykuraSwapInstructionData
> {
  return mapSerializer<
    CykuraSwapInstructionDataArgs,
    any,
    CykuraSwapInstructionData
  >(
    struct<CykuraSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'CykuraSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [38, 241, 21, 107, 120, 59, 184, 249],
    })
  ) as Serializer<CykuraSwapInstructionDataArgs, CykuraSwapInstructionData>;
}

// Instruction.
export function cykuraSwap(
  context: Pick<Context, 'programs'>,
  input: CykuraSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    signer: {
      index: 1,
      isWritable: false as boolean,
      value: input.signer ?? null,
    },
    factoryState: {
      index: 2,
      isWritable: false as boolean,
      value: input.factoryState ?? null,
    },
    poolState: {
      index: 3,
      isWritable: true as boolean,
      value: input.poolState ?? null,
    },
    inputTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.inputTokenAccount ?? null,
    },
    outputTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.outputTokenAccount ?? null,
    },
    inputVault: {
      index: 6,
      isWritable: true as boolean,
      value: input.inputVault ?? null,
    },
    outputVault: {
      index: 7,
      isWritable: true as boolean,
      value: input.outputVault ?? null,
    },
    lastObservationState: {
      index: 8,
      isWritable: true as boolean,
      value: input.lastObservationState ?? null,
    },
    coreProgram: {
      index: 9,
      isWritable: false as boolean,
      value: input.coreProgram ?? null,
    },
    tokenProgram: {
      index: 10,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCykuraSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
