/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type RaydiumSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  ammId: PublicKey | Pda;
  ammAuthority: PublicKey | Pda;
  ammOpenOrders: PublicKey | Pda;
  poolCoinTokenAccount: PublicKey | Pda;
  poolPcTokenAccount: PublicKey | Pda;
  serumProgramId: PublicKey | Pda;
  serumMarket: PublicKey | Pda;
  serumBids: PublicKey | Pda;
  serumAsks: PublicKey | Pda;
  serumEventQueue: PublicKey | Pda;
  serumCoinVaultAccount: PublicKey | Pda;
  serumPcVaultAccount: PublicKey | Pda;
  serumVaultSigner: PublicKey | Pda;
  userSourceTokenAccount: PublicKey | Pda;
  userDestinationTokenAccount: PublicKey | Pda;
  userSourceOwner: PublicKey | Pda;
};

// Data.
export type RaydiumSwapInstructionData = { discriminator: Array<number> };

export type RaydiumSwapInstructionDataArgs = {};

export function getRaydiumSwapInstructionDataSerializer(): Serializer<
  RaydiumSwapInstructionDataArgs,
  RaydiumSwapInstructionData
> {
  return mapSerializer<
    RaydiumSwapInstructionDataArgs,
    any,
    RaydiumSwapInstructionData
  >(
    struct<RaydiumSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'RaydiumSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [177, 173, 42, 240, 184, 4, 124, 81],
    })
  ) as Serializer<RaydiumSwapInstructionDataArgs, RaydiumSwapInstructionData>;
}

// Instruction.
export function raydiumSwap(
  context: Pick<Context, 'programs'>,
  input: RaydiumSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    tokenProgram: {
      index: 1,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    ammId: {
      index: 2,
      isWritable: true as boolean,
      value: input.ammId ?? null,
    },
    ammAuthority: {
      index: 3,
      isWritable: false as boolean,
      value: input.ammAuthority ?? null,
    },
    ammOpenOrders: {
      index: 4,
      isWritable: true as boolean,
      value: input.ammOpenOrders ?? null,
    },
    poolCoinTokenAccount: {
      index: 5,
      isWritable: true as boolean,
      value: input.poolCoinTokenAccount ?? null,
    },
    poolPcTokenAccount: {
      index: 6,
      isWritable: true as boolean,
      value: input.poolPcTokenAccount ?? null,
    },
    serumProgramId: {
      index: 7,
      isWritable: false as boolean,
      value: input.serumProgramId ?? null,
    },
    serumMarket: {
      index: 8,
      isWritable: true as boolean,
      value: input.serumMarket ?? null,
    },
    serumBids: {
      index: 9,
      isWritable: true as boolean,
      value: input.serumBids ?? null,
    },
    serumAsks: {
      index: 10,
      isWritable: true as boolean,
      value: input.serumAsks ?? null,
    },
    serumEventQueue: {
      index: 11,
      isWritable: true as boolean,
      value: input.serumEventQueue ?? null,
    },
    serumCoinVaultAccount: {
      index: 12,
      isWritable: true as boolean,
      value: input.serumCoinVaultAccount ?? null,
    },
    serumPcVaultAccount: {
      index: 13,
      isWritable: true as boolean,
      value: input.serumPcVaultAccount ?? null,
    },
    serumVaultSigner: {
      index: 14,
      isWritable: false as boolean,
      value: input.serumVaultSigner ?? null,
    },
    userSourceTokenAccount: {
      index: 15,
      isWritable: true as boolean,
      value: input.userSourceTokenAccount ?? null,
    },
    userDestinationTokenAccount: {
      index: 16,
      isWritable: true as boolean,
      value: input.userDestinationTokenAccount ?? null,
    },
    userSourceOwner: {
      index: 17,
      isWritable: false as boolean,
      value: input.userSourceOwner ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getRaydiumSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
