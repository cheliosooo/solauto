/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DeltafiSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  marketConfig: PublicKey | Pda;
  swapInfo: PublicKey | Pda;
  userSourceToken: PublicKey | Pda;
  userDestinationToken: PublicKey | Pda;
  swapSourceToken: PublicKey | Pda;
  swapDestinationToken: PublicKey | Pda;
  deltafiUser: PublicKey | Pda;
  adminDestinationToken: PublicKey | Pda;
  pythPriceBase: PublicKey | Pda;
  pythPriceQuote: PublicKey | Pda;
  userAuthority: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type DeltafiSwapInstructionData = { discriminator: Array<number> };

export type DeltafiSwapInstructionDataArgs = {};

export function getDeltafiSwapInstructionDataSerializer(): Serializer<
  DeltafiSwapInstructionDataArgs,
  DeltafiSwapInstructionData
> {
  return mapSerializer<
    DeltafiSwapInstructionDataArgs,
    any,
    DeltafiSwapInstructionData
  >(
    struct<DeltafiSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'DeltafiSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [132, 230, 102, 120, 205, 9, 237, 190],
    })
  ) as Serializer<DeltafiSwapInstructionDataArgs, DeltafiSwapInstructionData>;
}

// Instruction.
export function deltafiSwap(
  context: Pick<Context, 'programs'>,
  input: DeltafiSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    marketConfig: {
      index: 1,
      isWritable: false as boolean,
      value: input.marketConfig ?? null,
    },
    swapInfo: {
      index: 2,
      isWritable: true as boolean,
      value: input.swapInfo ?? null,
    },
    userSourceToken: {
      index: 3,
      isWritable: true as boolean,
      value: input.userSourceToken ?? null,
    },
    userDestinationToken: {
      index: 4,
      isWritable: true as boolean,
      value: input.userDestinationToken ?? null,
    },
    swapSourceToken: {
      index: 5,
      isWritable: true as boolean,
      value: input.swapSourceToken ?? null,
    },
    swapDestinationToken: {
      index: 6,
      isWritable: true as boolean,
      value: input.swapDestinationToken ?? null,
    },
    deltafiUser: {
      index: 7,
      isWritable: true as boolean,
      value: input.deltafiUser ?? null,
    },
    adminDestinationToken: {
      index: 8,
      isWritable: true as boolean,
      value: input.adminDestinationToken ?? null,
    },
    pythPriceBase: {
      index: 9,
      isWritable: false as boolean,
      value: input.pythPriceBase ?? null,
    },
    pythPriceQuote: {
      index: 10,
      isWritable: false as boolean,
      value: input.pythPriceQuote ?? null,
    },
    userAuthority: {
      index: 11,
      isWritable: false as boolean,
      value: input.userAuthority ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDeltafiSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
