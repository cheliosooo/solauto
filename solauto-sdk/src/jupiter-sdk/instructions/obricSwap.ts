/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ObricSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  tradingPair: PublicKey | Pda;
  mintX: PublicKey | Pda;
  mintY: PublicKey | Pda;
  reserveX: PublicKey | Pda;
  reserveY: PublicKey | Pda;
  userTokenAccountX: PublicKey | Pda;
  userTokenAccountY: PublicKey | Pda;
  protocolFee: PublicKey | Pda;
  xPriceFeed: PublicKey | Pda;
  yPriceFeed: PublicKey | Pda;
  user: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
};

// Data.
export type ObricSwapInstructionData = { discriminator: Array<number> };

export type ObricSwapInstructionDataArgs = {};

export function getObricSwapInstructionDataSerializer(): Serializer<
  ObricSwapInstructionDataArgs,
  ObricSwapInstructionData
> {
  return mapSerializer<
    ObricSwapInstructionDataArgs,
    any,
    ObricSwapInstructionData
  >(
    struct<ObricSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'ObricSwapInstructionData' }
    ),
    (value) => ({ ...value, discriminator: [65, 93, 96, 169, 190, 214, 95, 3] })
  ) as Serializer<ObricSwapInstructionDataArgs, ObricSwapInstructionData>;
}

// Instruction.
export function obricSwap(
  context: Pick<Context, 'programs'>,
  input: ObricSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    tradingPair: {
      index: 1,
      isWritable: true as boolean,
      value: input.tradingPair ?? null,
    },
    mintX: {
      index: 2,
      isWritable: false as boolean,
      value: input.mintX ?? null,
    },
    mintY: {
      index: 3,
      isWritable: false as boolean,
      value: input.mintY ?? null,
    },
    reserveX: {
      index: 4,
      isWritable: true as boolean,
      value: input.reserveX ?? null,
    },
    reserveY: {
      index: 5,
      isWritable: true as boolean,
      value: input.reserveY ?? null,
    },
    userTokenAccountX: {
      index: 6,
      isWritable: true as boolean,
      value: input.userTokenAccountX ?? null,
    },
    userTokenAccountY: {
      index: 7,
      isWritable: true as boolean,
      value: input.userTokenAccountY ?? null,
    },
    protocolFee: {
      index: 8,
      isWritable: true as boolean,
      value: input.protocolFee ?? null,
    },
    xPriceFeed: {
      index: 9,
      isWritable: false as boolean,
      value: input.xPriceFeed ?? null,
    },
    yPriceFeed: {
      index: 10,
      isWritable: false as boolean,
      value: input.yPriceFeed ?? null,
    },
    user: {
      index: 11,
      isWritable: false as boolean,
      value: input.user ?? null,
    },
    tokenProgram: {
      index: 12,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getObricSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
