/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type DradexSwapInstructionAccounts = {
  swapProgram: PublicKey | Pda;
  pair: PublicKey | Pda;
  market: PublicKey | Pda;
  eventQueue: PublicKey | Pda;
  dexUser: PublicKey | Pda;
  marketUser: PublicKey | Pda;
  bids: PublicKey | Pda;
  asks: PublicKey | Pda;
  t0Vault: PublicKey | Pda;
  t1Vault: PublicKey | Pda;
  t0User: PublicKey | Pda;
  t1User: PublicKey | Pda;
  master: PublicKey | Pda;
  signer: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
  tokenProgram?: PublicKey | Pda;
  logger: PublicKey | Pda;
};

// Data.
export type DradexSwapInstructionData = { discriminator: Array<number> };

export type DradexSwapInstructionDataArgs = {};

export function getDradexSwapInstructionDataSerializer(): Serializer<
  DradexSwapInstructionDataArgs,
  DradexSwapInstructionData
> {
  return mapSerializer<
    DradexSwapInstructionDataArgs,
    any,
    DradexSwapInstructionData
  >(
    struct<DradexSwapInstructionData>(
      [['discriminator', array(u8(), { size: 8 })]],
      { description: 'DradexSwapInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [34, 146, 160, 38, 51, 85, 58, 151],
    })
  ) as Serializer<DradexSwapInstructionDataArgs, DradexSwapInstructionData>;
}

// Instruction.
export function dradexSwap(
  context: Pick<Context, 'programs'>,
  input: DradexSwapInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    swapProgram: {
      index: 0,
      isWritable: false as boolean,
      value: input.swapProgram ?? null,
    },
    pair: { index: 1, isWritable: true as boolean, value: input.pair ?? null },
    market: {
      index: 2,
      isWritable: true as boolean,
      value: input.market ?? null,
    },
    eventQueue: {
      index: 3,
      isWritable: true as boolean,
      value: input.eventQueue ?? null,
    },
    dexUser: {
      index: 4,
      isWritable: false as boolean,
      value: input.dexUser ?? null,
    },
    marketUser: {
      index: 5,
      isWritable: true as boolean,
      value: input.marketUser ?? null,
    },
    bids: { index: 6, isWritable: true as boolean, value: input.bids ?? null },
    asks: { index: 7, isWritable: true as boolean, value: input.asks ?? null },
    t0Vault: {
      index: 8,
      isWritable: true as boolean,
      value: input.t0Vault ?? null,
    },
    t1Vault: {
      index: 9,
      isWritable: true as boolean,
      value: input.t1Vault ?? null,
    },
    t0User: {
      index: 10,
      isWritable: true as boolean,
      value: input.t0User ?? null,
    },
    t1User: {
      index: 11,
      isWritable: true as boolean,
      value: input.t1User ?? null,
    },
    master: {
      index: 12,
      isWritable: false as boolean,
      value: input.master ?? null,
    },
    signer: {
      index: 13,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    systemProgram: {
      index: 14,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    tokenProgram: {
      index: 15,
      isWritable: false as boolean,
      value: input.tokenProgram ?? null,
    },
    logger: {
      index: 16,
      isWritable: false as boolean,
      value: input.logger ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Default values.
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.tokenProgram.value) {
    resolvedAccounts.tokenProgram.value = context.programs.getPublicKey(
      'splToken',
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
    );
    resolvedAccounts.tokenProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getDradexSwapInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
