/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type ClaimTokenInstructionAccounts = {
  payer?: Signer;
  wallet: PublicKey | Pda;
  programAuthority: PublicKey | Pda;
  programTokenAccount: PublicKey | Pda;
  destinationTokenAccount: PublicKey | Pda;
  mint: PublicKey | Pda;
  associatedTokenTokenProgram: PublicKey | Pda;
  associatedTokenProgram: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type ClaimTokenInstructionData = {
  discriminator: Array<number>;
  id: number;
};

export type ClaimTokenInstructionDataArgs = { id: number };

export function getClaimTokenInstructionDataSerializer(): Serializer<
  ClaimTokenInstructionDataArgs,
  ClaimTokenInstructionData
> {
  return mapSerializer<
    ClaimTokenInstructionDataArgs,
    any,
    ClaimTokenInstructionData
  >(
    struct<ClaimTokenInstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['id', u8()],
      ],
      { description: 'ClaimTokenInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [116, 206, 27, 191, 166, 19, 0, 73],
    })
  ) as Serializer<ClaimTokenInstructionDataArgs, ClaimTokenInstructionData>;
}

// Args.
export type ClaimTokenInstructionArgs = ClaimTokenInstructionDataArgs;

// Instruction.
export function claimToken(
  context: Pick<Context, 'payer' | 'programs'>,
  input: ClaimTokenInstructionAccounts & ClaimTokenInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'jupiter',
    'JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'
  );

  // Accounts.
  const resolvedAccounts = {
    payer: {
      index: 0,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    wallet: {
      index: 1,
      isWritable: false as boolean,
      value: input.wallet ?? null,
    },
    programAuthority: {
      index: 2,
      isWritable: false as boolean,
      value: input.programAuthority ?? null,
    },
    programTokenAccount: {
      index: 3,
      isWritable: true as boolean,
      value: input.programTokenAccount ?? null,
    },
    destinationTokenAccount: {
      index: 4,
      isWritable: true as boolean,
      value: input.destinationTokenAccount ?? null,
    },
    mint: { index: 5, isWritable: false as boolean, value: input.mint ?? null },
    associatedTokenTokenProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.associatedTokenTokenProgram ?? null,
    },
    associatedTokenProgram: {
      index: 7,
      isWritable: false as boolean,
      value: input.associatedTokenProgram ?? null,
    },
    systemProgram: {
      index: 8,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: ClaimTokenInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getClaimTokenInstructionDataSerializer().serialize(
    resolvedArgs as ClaimTokenInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
