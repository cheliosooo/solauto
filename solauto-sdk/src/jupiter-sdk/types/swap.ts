/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  dataEnum,
  option,
  struct,
  u32,
  u64,
  u8,
  unit,
} from '@metaplex-foundation/umi/serializers';
import {
  RemainingAccountsInfo,
  RemainingAccountsInfoArgs,
  Side,
  SideArgs,
  getRemainingAccountsInfoSerializer,
  getSideSerializer,
} from '.';

export type Swap =
  | { __kind: 'Saber' }
  | { __kind: 'SaberAddDecimalsDeposit' }
  | { __kind: 'SaberAddDecimalsWithdraw' }
  | { __kind: 'TokenSwap' }
  | { __kind: 'Sencha' }
  | { __kind: 'Step' }
  | { __kind: 'Cropper' }
  | { __kind: 'Raydium' }
  | { __kind: 'Crema'; aToB: boolean }
  | { __kind: 'Lifinity' }
  | { __kind: 'Mercurial' }
  | { __kind: 'Cykura' }
  | { __kind: 'Serum'; side: Side }
  | { __kind: 'MarinadeDeposit' }
  | { __kind: 'MarinadeUnstake' }
  | { __kind: 'Aldrin'; side: Side }
  | { __kind: 'AldrinV2'; side: Side }
  | { __kind: 'Whirlpool'; aToB: boolean }
  | { __kind: 'Invariant'; xToY: boolean }
  | { __kind: 'Meteora' }
  | { __kind: 'GooseFX' }
  | { __kind: 'DeltaFi'; stable: boolean }
  | { __kind: 'Balansol' }
  | { __kind: 'MarcoPolo'; xToY: boolean }
  | { __kind: 'Dradex'; side: Side }
  | { __kind: 'LifinityV2' }
  | { __kind: 'RaydiumClmm' }
  | { __kind: 'Openbook'; side: Side }
  | { __kind: 'Phoenix'; side: Side }
  | { __kind: 'Symmetry'; fromTokenId: bigint; toTokenId: bigint }
  | { __kind: 'TokenSwapV2' }
  | { __kind: 'HeliumTreasuryManagementRedeemV0' }
  | { __kind: 'StakeDexStakeWrappedSol' }
  | { __kind: 'StakeDexSwapViaStake'; bridgeStakeSeed: number }
  | { __kind: 'GooseFXV2' }
  | { __kind: 'Perps' }
  | { __kind: 'PerpsAddLiquidity' }
  | { __kind: 'PerpsRemoveLiquidity' }
  | { __kind: 'MeteoraDlmm' }
  | { __kind: 'OpenBookV2'; side: Side }
  | { __kind: 'RaydiumClmmV2' }
  | {
      __kind: 'StakeDexPrefundWithdrawStakeAndDepositStake';
      bridgeStakeSeed: number;
    }
  | {
      __kind: 'Clone';
      poolIndex: number;
      quantityIsInput: boolean;
      quantityIsCollateral: boolean;
    }
  | {
      __kind: 'SanctumS';
      srcLstValueCalcAccs: number;
      dstLstValueCalcAccs: number;
      srcLstIndex: number;
      dstLstIndex: number;
    }
  | {
      __kind: 'SanctumSAddLiquidity';
      lstValueCalcAccs: number;
      lstIndex: number;
    }
  | {
      __kind: 'SanctumSRemoveLiquidity';
      lstValueCalcAccs: number;
      lstIndex: number;
    }
  | { __kind: 'RaydiumCP' }
  | {
      __kind: 'WhirlpoolSwapV2';
      aToB: boolean;
      remainingAccountsInfo: Option<RemainingAccountsInfo>;
    }
  | { __kind: 'OneIntro' }
  | { __kind: 'PumpdotfunWrappedBuy' }
  | { __kind: 'PumpdotfunWrappedSell' }
  | { __kind: 'PerpsV2' }
  | { __kind: 'PerpsV2AddLiquidity' }
  | { __kind: 'PerpsV2RemoveLiquidity' }
  | { __kind: 'MoonshotWrappedBuy' }
  | { __kind: 'MoonshotWrappedSell' }
  | { __kind: 'StabbleStableSwap' }
  | { __kind: 'StabbleWeightedSwap' }
  | { __kind: 'Obric'; xToY: boolean };

export type SwapArgs =
  | { __kind: 'Saber' }
  | { __kind: 'SaberAddDecimalsDeposit' }
  | { __kind: 'SaberAddDecimalsWithdraw' }
  | { __kind: 'TokenSwap' }
  | { __kind: 'Sencha' }
  | { __kind: 'Step' }
  | { __kind: 'Cropper' }
  | { __kind: 'Raydium' }
  | { __kind: 'Crema'; aToB: boolean }
  | { __kind: 'Lifinity' }
  | { __kind: 'Mercurial' }
  | { __kind: 'Cykura' }
  | { __kind: 'Serum'; side: SideArgs }
  | { __kind: 'MarinadeDeposit' }
  | { __kind: 'MarinadeUnstake' }
  | { __kind: 'Aldrin'; side: SideArgs }
  | { __kind: 'AldrinV2'; side: SideArgs }
  | { __kind: 'Whirlpool'; aToB: boolean }
  | { __kind: 'Invariant'; xToY: boolean }
  | { __kind: 'Meteora' }
  | { __kind: 'GooseFX' }
  | { __kind: 'DeltaFi'; stable: boolean }
  | { __kind: 'Balansol' }
  | { __kind: 'MarcoPolo'; xToY: boolean }
  | { __kind: 'Dradex'; side: SideArgs }
  | { __kind: 'LifinityV2' }
  | { __kind: 'RaydiumClmm' }
  | { __kind: 'Openbook'; side: SideArgs }
  | { __kind: 'Phoenix'; side: SideArgs }
  | {
      __kind: 'Symmetry';
      fromTokenId: number | bigint;
      toTokenId: number | bigint;
    }
  | { __kind: 'TokenSwapV2' }
  | { __kind: 'HeliumTreasuryManagementRedeemV0' }
  | { __kind: 'StakeDexStakeWrappedSol' }
  | { __kind: 'StakeDexSwapViaStake'; bridgeStakeSeed: number }
  | { __kind: 'GooseFXV2' }
  | { __kind: 'Perps' }
  | { __kind: 'PerpsAddLiquidity' }
  | { __kind: 'PerpsRemoveLiquidity' }
  | { __kind: 'MeteoraDlmm' }
  | { __kind: 'OpenBookV2'; side: SideArgs }
  | { __kind: 'RaydiumClmmV2' }
  | {
      __kind: 'StakeDexPrefundWithdrawStakeAndDepositStake';
      bridgeStakeSeed: number;
    }
  | {
      __kind: 'Clone';
      poolIndex: number;
      quantityIsInput: boolean;
      quantityIsCollateral: boolean;
    }
  | {
      __kind: 'SanctumS';
      srcLstValueCalcAccs: number;
      dstLstValueCalcAccs: number;
      srcLstIndex: number;
      dstLstIndex: number;
    }
  | {
      __kind: 'SanctumSAddLiquidity';
      lstValueCalcAccs: number;
      lstIndex: number;
    }
  | {
      __kind: 'SanctumSRemoveLiquidity';
      lstValueCalcAccs: number;
      lstIndex: number;
    }
  | { __kind: 'RaydiumCP' }
  | {
      __kind: 'WhirlpoolSwapV2';
      aToB: boolean;
      remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
    }
  | { __kind: 'OneIntro' }
  | { __kind: 'PumpdotfunWrappedBuy' }
  | { __kind: 'PumpdotfunWrappedSell' }
  | { __kind: 'PerpsV2' }
  | { __kind: 'PerpsV2AddLiquidity' }
  | { __kind: 'PerpsV2RemoveLiquidity' }
  | { __kind: 'MoonshotWrappedBuy' }
  | { __kind: 'MoonshotWrappedSell' }
  | { __kind: 'StabbleStableSwap' }
  | { __kind: 'StabbleWeightedSwap' }
  | { __kind: 'Obric'; xToY: boolean };

export function getSwapSerializer(): Serializer<SwapArgs, Swap> {
  return dataEnum<Swap>(
    [
      ['Saber', unit()],
      ['SaberAddDecimalsDeposit', unit()],
      ['SaberAddDecimalsWithdraw', unit()],
      ['TokenSwap', unit()],
      ['Sencha', unit()],
      ['Step', unit()],
      ['Cropper', unit()],
      ['Raydium', unit()],
      [
        'Crema',
        struct<GetDataEnumKindContent<Swap, 'Crema'>>([['aToB', bool()]]),
      ],
      ['Lifinity', unit()],
      ['Mercurial', unit()],
      ['Cykura', unit()],
      [
        'Serum',
        struct<GetDataEnumKindContent<Swap, 'Serum'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      ['MarinadeDeposit', unit()],
      ['MarinadeUnstake', unit()],
      [
        'Aldrin',
        struct<GetDataEnumKindContent<Swap, 'Aldrin'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      [
        'AldrinV2',
        struct<GetDataEnumKindContent<Swap, 'AldrinV2'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      [
        'Whirlpool',
        struct<GetDataEnumKindContent<Swap, 'Whirlpool'>>([['aToB', bool()]]),
      ],
      [
        'Invariant',
        struct<GetDataEnumKindContent<Swap, 'Invariant'>>([['xToY', bool()]]),
      ],
      ['Meteora', unit()],
      ['GooseFX', unit()],
      [
        'DeltaFi',
        struct<GetDataEnumKindContent<Swap, 'DeltaFi'>>([['stable', bool()]]),
      ],
      ['Balansol', unit()],
      [
        'MarcoPolo',
        struct<GetDataEnumKindContent<Swap, 'MarcoPolo'>>([['xToY', bool()]]),
      ],
      [
        'Dradex',
        struct<GetDataEnumKindContent<Swap, 'Dradex'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      ['LifinityV2', unit()],
      ['RaydiumClmm', unit()],
      [
        'Openbook',
        struct<GetDataEnumKindContent<Swap, 'Openbook'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      [
        'Phoenix',
        struct<GetDataEnumKindContent<Swap, 'Phoenix'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      [
        'Symmetry',
        struct<GetDataEnumKindContent<Swap, 'Symmetry'>>([
          ['fromTokenId', u64()],
          ['toTokenId', u64()],
        ]),
      ],
      ['TokenSwapV2', unit()],
      ['HeliumTreasuryManagementRedeemV0', unit()],
      ['StakeDexStakeWrappedSol', unit()],
      [
        'StakeDexSwapViaStake',
        struct<GetDataEnumKindContent<Swap, 'StakeDexSwapViaStake'>>([
          ['bridgeStakeSeed', u32()],
        ]),
      ],
      ['GooseFXV2', unit()],
      ['Perps', unit()],
      ['PerpsAddLiquidity', unit()],
      ['PerpsRemoveLiquidity', unit()],
      ['MeteoraDlmm', unit()],
      [
        'OpenBookV2',
        struct<GetDataEnumKindContent<Swap, 'OpenBookV2'>>([
          ['side', getSideSerializer()],
        ]),
      ],
      ['RaydiumClmmV2', unit()],
      [
        'StakeDexPrefundWithdrawStakeAndDepositStake',
        struct<
          GetDataEnumKindContent<
            Swap,
            'StakeDexPrefundWithdrawStakeAndDepositStake'
          >
        >([['bridgeStakeSeed', u32()]]),
      ],
      [
        'Clone',
        struct<GetDataEnumKindContent<Swap, 'Clone'>>([
          ['poolIndex', u8()],
          ['quantityIsInput', bool()],
          ['quantityIsCollateral', bool()],
        ]),
      ],
      [
        'SanctumS',
        struct<GetDataEnumKindContent<Swap, 'SanctumS'>>([
          ['srcLstValueCalcAccs', u8()],
          ['dstLstValueCalcAccs', u8()],
          ['srcLstIndex', u32()],
          ['dstLstIndex', u32()],
        ]),
      ],
      [
        'SanctumSAddLiquidity',
        struct<GetDataEnumKindContent<Swap, 'SanctumSAddLiquidity'>>([
          ['lstValueCalcAccs', u8()],
          ['lstIndex', u32()],
        ]),
      ],
      [
        'SanctumSRemoveLiquidity',
        struct<GetDataEnumKindContent<Swap, 'SanctumSRemoveLiquidity'>>([
          ['lstValueCalcAccs', u8()],
          ['lstIndex', u32()],
        ]),
      ],
      ['RaydiumCP', unit()],
      [
        'WhirlpoolSwapV2',
        struct<GetDataEnumKindContent<Swap, 'WhirlpoolSwapV2'>>([
          ['aToB', bool()],
          [
            'remainingAccountsInfo',
            option(getRemainingAccountsInfoSerializer()),
          ],
        ]),
      ],
      ['OneIntro', unit()],
      ['PumpdotfunWrappedBuy', unit()],
      ['PumpdotfunWrappedSell', unit()],
      ['PerpsV2', unit()],
      ['PerpsV2AddLiquidity', unit()],
      ['PerpsV2RemoveLiquidity', unit()],
      ['MoonshotWrappedBuy', unit()],
      ['MoonshotWrappedSell', unit()],
      ['StabbleStableSwap', unit()],
      ['StabbleWeightedSwap', unit()],
      [
        'Obric',
        struct<GetDataEnumKindContent<Swap, 'Obric'>>([['xToY', bool()]]),
      ],
    ],
    { description: 'Swap' }
  ) as Serializer<SwapArgs, Swap>;
}

// Data Enum Helpers.
export function swap(kind: 'Saber'): GetDataEnumKind<SwapArgs, 'Saber'>;
export function swap(
  kind: 'SaberAddDecimalsDeposit'
): GetDataEnumKind<SwapArgs, 'SaberAddDecimalsDeposit'>;
export function swap(
  kind: 'SaberAddDecimalsWithdraw'
): GetDataEnumKind<SwapArgs, 'SaberAddDecimalsWithdraw'>;
export function swap(kind: 'TokenSwap'): GetDataEnumKind<SwapArgs, 'TokenSwap'>;
export function swap(kind: 'Sencha'): GetDataEnumKind<SwapArgs, 'Sencha'>;
export function swap(kind: 'Step'): GetDataEnumKind<SwapArgs, 'Step'>;
export function swap(kind: 'Cropper'): GetDataEnumKind<SwapArgs, 'Cropper'>;
export function swap(kind: 'Raydium'): GetDataEnumKind<SwapArgs, 'Raydium'>;
export function swap(
  kind: 'Crema',
  data: GetDataEnumKindContent<SwapArgs, 'Crema'>
): GetDataEnumKind<SwapArgs, 'Crema'>;
export function swap(kind: 'Lifinity'): GetDataEnumKind<SwapArgs, 'Lifinity'>;
export function swap(kind: 'Mercurial'): GetDataEnumKind<SwapArgs, 'Mercurial'>;
export function swap(kind: 'Cykura'): GetDataEnumKind<SwapArgs, 'Cykura'>;
export function swap(
  kind: 'Serum',
  data: GetDataEnumKindContent<SwapArgs, 'Serum'>
): GetDataEnumKind<SwapArgs, 'Serum'>;
export function swap(
  kind: 'MarinadeDeposit'
): GetDataEnumKind<SwapArgs, 'MarinadeDeposit'>;
export function swap(
  kind: 'MarinadeUnstake'
): GetDataEnumKind<SwapArgs, 'MarinadeUnstake'>;
export function swap(
  kind: 'Aldrin',
  data: GetDataEnumKindContent<SwapArgs, 'Aldrin'>
): GetDataEnumKind<SwapArgs, 'Aldrin'>;
export function swap(
  kind: 'AldrinV2',
  data: GetDataEnumKindContent<SwapArgs, 'AldrinV2'>
): GetDataEnumKind<SwapArgs, 'AldrinV2'>;
export function swap(
  kind: 'Whirlpool',
  data: GetDataEnumKindContent<SwapArgs, 'Whirlpool'>
): GetDataEnumKind<SwapArgs, 'Whirlpool'>;
export function swap(
  kind: 'Invariant',
  data: GetDataEnumKindContent<SwapArgs, 'Invariant'>
): GetDataEnumKind<SwapArgs, 'Invariant'>;
export function swap(kind: 'Meteora'): GetDataEnumKind<SwapArgs, 'Meteora'>;
export function swap(kind: 'GooseFX'): GetDataEnumKind<SwapArgs, 'GooseFX'>;
export function swap(
  kind: 'DeltaFi',
  data: GetDataEnumKindContent<SwapArgs, 'DeltaFi'>
): GetDataEnumKind<SwapArgs, 'DeltaFi'>;
export function swap(kind: 'Balansol'): GetDataEnumKind<SwapArgs, 'Balansol'>;
export function swap(
  kind: 'MarcoPolo',
  data: GetDataEnumKindContent<SwapArgs, 'MarcoPolo'>
): GetDataEnumKind<SwapArgs, 'MarcoPolo'>;
export function swap(
  kind: 'Dradex',
  data: GetDataEnumKindContent<SwapArgs, 'Dradex'>
): GetDataEnumKind<SwapArgs, 'Dradex'>;
export function swap(
  kind: 'LifinityV2'
): GetDataEnumKind<SwapArgs, 'LifinityV2'>;
export function swap(
  kind: 'RaydiumClmm'
): GetDataEnumKind<SwapArgs, 'RaydiumClmm'>;
export function swap(
  kind: 'Openbook',
  data: GetDataEnumKindContent<SwapArgs, 'Openbook'>
): GetDataEnumKind<SwapArgs, 'Openbook'>;
export function swap(
  kind: 'Phoenix',
  data: GetDataEnumKindContent<SwapArgs, 'Phoenix'>
): GetDataEnumKind<SwapArgs, 'Phoenix'>;
export function swap(
  kind: 'Symmetry',
  data: GetDataEnumKindContent<SwapArgs, 'Symmetry'>
): GetDataEnumKind<SwapArgs, 'Symmetry'>;
export function swap(
  kind: 'TokenSwapV2'
): GetDataEnumKind<SwapArgs, 'TokenSwapV2'>;
export function swap(
  kind: 'HeliumTreasuryManagementRedeemV0'
): GetDataEnumKind<SwapArgs, 'HeliumTreasuryManagementRedeemV0'>;
export function swap(
  kind: 'StakeDexStakeWrappedSol'
): GetDataEnumKind<SwapArgs, 'StakeDexStakeWrappedSol'>;
export function swap(
  kind: 'StakeDexSwapViaStake',
  data: GetDataEnumKindContent<SwapArgs, 'StakeDexSwapViaStake'>
): GetDataEnumKind<SwapArgs, 'StakeDexSwapViaStake'>;
export function swap(kind: 'GooseFXV2'): GetDataEnumKind<SwapArgs, 'GooseFXV2'>;
export function swap(kind: 'Perps'): GetDataEnumKind<SwapArgs, 'Perps'>;
export function swap(
  kind: 'PerpsAddLiquidity'
): GetDataEnumKind<SwapArgs, 'PerpsAddLiquidity'>;
export function swap(
  kind: 'PerpsRemoveLiquidity'
): GetDataEnumKind<SwapArgs, 'PerpsRemoveLiquidity'>;
export function swap(
  kind: 'MeteoraDlmm'
): GetDataEnumKind<SwapArgs, 'MeteoraDlmm'>;
export function swap(
  kind: 'OpenBookV2',
  data: GetDataEnumKindContent<SwapArgs, 'OpenBookV2'>
): GetDataEnumKind<SwapArgs, 'OpenBookV2'>;
export function swap(
  kind: 'RaydiumClmmV2'
): GetDataEnumKind<SwapArgs, 'RaydiumClmmV2'>;
export function swap(
  kind: 'StakeDexPrefundWithdrawStakeAndDepositStake',
  data: GetDataEnumKindContent<
    SwapArgs,
    'StakeDexPrefundWithdrawStakeAndDepositStake'
  >
): GetDataEnumKind<SwapArgs, 'StakeDexPrefundWithdrawStakeAndDepositStake'>;
export function swap(
  kind: 'Clone',
  data: GetDataEnumKindContent<SwapArgs, 'Clone'>
): GetDataEnumKind<SwapArgs, 'Clone'>;
export function swap(
  kind: 'SanctumS',
  data: GetDataEnumKindContent<SwapArgs, 'SanctumS'>
): GetDataEnumKind<SwapArgs, 'SanctumS'>;
export function swap(
  kind: 'SanctumSAddLiquidity',
  data: GetDataEnumKindContent<SwapArgs, 'SanctumSAddLiquidity'>
): GetDataEnumKind<SwapArgs, 'SanctumSAddLiquidity'>;
export function swap(
  kind: 'SanctumSRemoveLiquidity',
  data: GetDataEnumKindContent<SwapArgs, 'SanctumSRemoveLiquidity'>
): GetDataEnumKind<SwapArgs, 'SanctumSRemoveLiquidity'>;
export function swap(kind: 'RaydiumCP'): GetDataEnumKind<SwapArgs, 'RaydiumCP'>;
export function swap(
  kind: 'WhirlpoolSwapV2',
  data: GetDataEnumKindContent<SwapArgs, 'WhirlpoolSwapV2'>
): GetDataEnumKind<SwapArgs, 'WhirlpoolSwapV2'>;
export function swap(kind: 'OneIntro'): GetDataEnumKind<SwapArgs, 'OneIntro'>;
export function swap(
  kind: 'PumpdotfunWrappedBuy'
): GetDataEnumKind<SwapArgs, 'PumpdotfunWrappedBuy'>;
export function swap(
  kind: 'PumpdotfunWrappedSell'
): GetDataEnumKind<SwapArgs, 'PumpdotfunWrappedSell'>;
export function swap(kind: 'PerpsV2'): GetDataEnumKind<SwapArgs, 'PerpsV2'>;
export function swap(
  kind: 'PerpsV2AddLiquidity'
): GetDataEnumKind<SwapArgs, 'PerpsV2AddLiquidity'>;
export function swap(
  kind: 'PerpsV2RemoveLiquidity'
): GetDataEnumKind<SwapArgs, 'PerpsV2RemoveLiquidity'>;
export function swap(
  kind: 'MoonshotWrappedBuy'
): GetDataEnumKind<SwapArgs, 'MoonshotWrappedBuy'>;
export function swap(
  kind: 'MoonshotWrappedSell'
): GetDataEnumKind<SwapArgs, 'MoonshotWrappedSell'>;
export function swap(
  kind: 'StabbleStableSwap'
): GetDataEnumKind<SwapArgs, 'StabbleStableSwap'>;
export function swap(
  kind: 'StabbleWeightedSwap'
): GetDataEnumKind<SwapArgs, 'StabbleWeightedSwap'>;
export function swap(
  kind: 'Obric',
  data: GetDataEnumKindContent<SwapArgs, 'Obric'>
): GetDataEnumKind<SwapArgs, 'Obric'>;
export function swap<K extends SwapArgs['__kind']>(
  kind: K,
  data?: any
): Extract<SwapArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isSwap<K extends Swap['__kind']>(
  kind: K,
  value: Swap
): value is Swap & { __kind: K } {
  return value.__kind === kind;
}
