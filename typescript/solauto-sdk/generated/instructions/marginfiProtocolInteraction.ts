/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  SolautoAction,
  SolautoActionArgs,
  getSolautoActionSerializer,
} from '../types';

// Accounts.
export type MarginfiProtocolInteractionInstructionAccounts = {
  signer: Signer;
  marginfiProgram: PublicKey | Pda;
  ixSysvar: PublicKey | Pda;
  solautoPosition?: PublicKey | Pda;
};

// Data.
export type MarginfiProtocolInteractionInstructionData = {
  discriminator: number;
  solautoAction: SolautoAction;
};

export type MarginfiProtocolInteractionInstructionDataArgs = {
  solautoAction: SolautoActionArgs;
};

export function getMarginfiProtocolInteractionInstructionDataSerializer(): Serializer<
  MarginfiProtocolInteractionInstructionDataArgs,
  MarginfiProtocolInteractionInstructionData
> {
  return mapSerializer<
    MarginfiProtocolInteractionInstructionDataArgs,
    any,
    MarginfiProtocolInteractionInstructionData
  >(
    struct<MarginfiProtocolInteractionInstructionData>(
      [
        ['discriminator', u8()],
        ['solautoAction', getSolautoActionSerializer()],
      ],
      { description: 'MarginfiProtocolInteractionInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 6 })
  ) as Serializer<
    MarginfiProtocolInteractionInstructionDataArgs,
    MarginfiProtocolInteractionInstructionData
  >;
}

// Args.
export type MarginfiProtocolInteractionInstructionArgs =
  MarginfiProtocolInteractionInstructionDataArgs;

// Instruction.
export function marginfiProtocolInteraction(
  context: Pick<Context, 'programs'>,
  input: MarginfiProtocolInteractionInstructionAccounts &
    MarginfiProtocolInteractionInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    marginfiProgram: {
      index: 1,
      isWritable: false as boolean,
      value: input.marginfiProgram ?? null,
    },
    ixSysvar: {
      index: 2,
      isWritable: false as boolean,
      value: input.ixSysvar ?? null,
    },
    solautoPosition: {
      index: 3,
      isWritable: true as boolean,
      value: input.solautoPosition ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MarginfiProtocolInteractionInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data =
    getMarginfiProtocolInteractionInstructionDataSerializer().serialize(
      resolvedArgs as MarginfiProtocolInteractionInstructionDataArgs
    );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
