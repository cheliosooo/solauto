/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type SolendRefreshDataInstructionAccounts = {
  signer: Signer;
  solendProgram: PublicKey | Pda;
  clock: PublicKey | Pda;
  supplyReserve: PublicKey | Pda;
  supplyReservePythPriceOracle: PublicKey | Pda;
  supplyReserveSwitchboardOracle: PublicKey | Pda;
  debtReserve?: PublicKey | Pda;
  debtReservePythPriceOracle?: PublicKey | Pda;
  debtReserveSwitchboardOracle?: PublicKey | Pda;
  lendingMarket: PublicKey | Pda;
  obligation?: PublicKey | Pda;
  solautoPosition?: PublicKey | Pda;
  positionSupplyLiquidityTa?: PublicKey | Pda;
  positionDebtLiquidityTa?: PublicKey | Pda;
};

// Data.
export type SolendRefreshDataInstructionData = { discriminator: number };

export type SolendRefreshDataInstructionDataArgs = {};

export function getSolendRefreshDataInstructionDataSerializer(): Serializer<
  SolendRefreshDataInstructionDataArgs,
  SolendRefreshDataInstructionData
> {
  return mapSerializer<
    SolendRefreshDataInstructionDataArgs,
    any,
    SolendRefreshDataInstructionData
  >(
    struct<SolendRefreshDataInstructionData>([['discriminator', u8()]], {
      description: 'SolendRefreshDataInstructionData',
    }),
    (value) => ({ ...value, discriminator: 8 })
  ) as Serializer<
    SolendRefreshDataInstructionDataArgs,
    SolendRefreshDataInstructionData
  >;
}

// Instruction.
export function solendRefreshData(
  context: Pick<Context, 'programs'>,
  input: SolendRefreshDataInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: false as boolean,
      value: input.signer ?? null,
    },
    solendProgram: {
      index: 1,
      isWritable: false as boolean,
      value: input.solendProgram ?? null,
    },
    clock: {
      index: 2,
      isWritable: false as boolean,
      value: input.clock ?? null,
    },
    supplyReserve: {
      index: 3,
      isWritable: true as boolean,
      value: input.supplyReserve ?? null,
    },
    supplyReservePythPriceOracle: {
      index: 4,
      isWritable: false as boolean,
      value: input.supplyReservePythPriceOracle ?? null,
    },
    supplyReserveSwitchboardOracle: {
      index: 5,
      isWritable: false as boolean,
      value: input.supplyReserveSwitchboardOracle ?? null,
    },
    debtReserve: {
      index: 6,
      isWritable: true as boolean,
      value: input.debtReserve ?? null,
    },
    debtReservePythPriceOracle: {
      index: 7,
      isWritable: false as boolean,
      value: input.debtReservePythPriceOracle ?? null,
    },
    debtReserveSwitchboardOracle: {
      index: 8,
      isWritable: false as boolean,
      value: input.debtReserveSwitchboardOracle ?? null,
    },
    lendingMarket: {
      index: 9,
      isWritable: false as boolean,
      value: input.lendingMarket ?? null,
    },
    obligation: {
      index: 10,
      isWritable: true as boolean,
      value: input.obligation ?? null,
    },
    solautoPosition: {
      index: 11,
      isWritable: true as boolean,
      value: input.solautoPosition ?? null,
    },
    positionSupplyLiquidityTa: {
      index: 12,
      isWritable: true as boolean,
      value: input.positionSupplyLiquidityTa ?? null,
    },
    positionDebtLiquidityTa: {
      index: 13,
      isWritable: true as boolean,
      value: input.positionDebtLiquidityTa ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getSolendRefreshDataInstructionDataSerializer().serialize({});

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
