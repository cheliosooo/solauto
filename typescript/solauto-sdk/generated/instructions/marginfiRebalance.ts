/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  OptionalLiqUtilizationRateBps,
  OptionalLiqUtilizationRateBpsArgs,
  getOptionalLiqUtilizationRateBpsSerializer,
} from '../types';

// Accounts.
export type MarginfiRebalanceInstructionAccounts = {
  signer: Signer;
  marginfiProgram: PublicKey | Pda;
  ixSysvar: PublicKey | Pda;
  solautoAdminSettings: PublicKey | Pda;
  solautoFeesReceiver: PublicKey | Pda;
  solautoPosition?: PublicKey | Pda;
};

// Data.
export type MarginfiRebalanceInstructionData = {
  discriminator: number;
  optionalLiqUtilizationRateBps: OptionalLiqUtilizationRateBps;
};

export type MarginfiRebalanceInstructionDataArgs = {
  optionalLiqUtilizationRateBps: OptionalLiqUtilizationRateBpsArgs;
};

export function getMarginfiRebalanceInstructionDataSerializer(): Serializer<
  MarginfiRebalanceInstructionDataArgs,
  MarginfiRebalanceInstructionData
> {
  return mapSerializer<
    MarginfiRebalanceInstructionDataArgs,
    any,
    MarginfiRebalanceInstructionData
  >(
    struct<MarginfiRebalanceInstructionData>(
      [
        ['discriminator', u8()],
        [
          'optionalLiqUtilizationRateBps',
          getOptionalLiqUtilizationRateBpsSerializer(),
        ],
      ],
      { description: 'MarginfiRebalanceInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 8 })
  ) as Serializer<
    MarginfiRebalanceInstructionDataArgs,
    MarginfiRebalanceInstructionData
  >;
}

// Args.
export type MarginfiRebalanceInstructionArgs =
  MarginfiRebalanceInstructionDataArgs;

// Instruction.
export function marginfiRebalance(
  context: Pick<Context, 'programs'>,
  input: MarginfiRebalanceInstructionAccounts & MarginfiRebalanceInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );

  // Accounts.
  const resolvedAccounts = {
    signer: {
      index: 0,
      isWritable: true as boolean,
      value: input.signer ?? null,
    },
    marginfiProgram: {
      index: 1,
      isWritable: false as boolean,
      value: input.marginfiProgram ?? null,
    },
    ixSysvar: {
      index: 2,
      isWritable: false as boolean,
      value: input.ixSysvar ?? null,
    },
    solautoAdminSettings: {
      index: 3,
      isWritable: false as boolean,
      value: input.solautoAdminSettings ?? null,
    },
    solautoFeesReceiver: {
      index: 4,
      isWritable: true as boolean,
      value: input.solautoFeesReceiver ?? null,
    },
    solautoPosition: {
      index: 5,
      isWritable: true as boolean,
      value: input.solautoPosition ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MarginfiRebalanceInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMarginfiRebalanceInstructionDataSerializer().serialize(
    resolvedArgs as MarginfiRebalanceInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
