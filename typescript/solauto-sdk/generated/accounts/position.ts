/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bool,
  option,
  publicKey as publicKeySerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  PositionData,
  PositionDataArgs,
  getPositionDataSerializer,
} from '../types';

export type Position = Account<PositionAccountData>;

export type PositionAccountData = {
  positionId: number;
  authority: PublicKey;
  selfManaged: boolean;
  position: Option<PositionData>;
};

export type PositionAccountDataArgs = {
  positionId: number;
  authority: PublicKey;
  selfManaged: boolean;
  position: OptionOrNullable<PositionDataArgs>;
};

export function getPositionAccountDataSerializer(): Serializer<
  PositionAccountDataArgs,
  PositionAccountData
> {
  return struct<PositionAccountData>(
    [
      ['positionId', u8()],
      ['authority', publicKeySerializer()],
      ['selfManaged', bool()],
      ['position', option(getPositionDataSerializer())],
    ],
    { description: 'PositionAccountData' }
  ) as Serializer<PositionAccountDataArgs, PositionAccountData>;
}

export function deserializePosition(rawAccount: RpcAccount): Position {
  return deserializeAccount(rawAccount, getPositionAccountDataSerializer());
}

export async function fetchPosition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Position> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'Position');
  return deserializePosition(maybeAccount);
}

export async function safeFetchPosition(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<Position | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePosition(maybeAccount) : null;
}

export async function fetchAllPosition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Position[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'Position');
    return deserializePosition(maybeAccount);
  });
}

export async function safeFetchAllPosition(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<Position[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializePosition(maybeAccount as RpcAccount));
}

export function getPositionGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      positionId: number;
      authority: PublicKey;
      selfManaged: boolean;
      position: OptionOrNullable<PositionDataArgs>;
    }>({
      positionId: [0, u8()],
      authority: [1, publicKeySerializer()],
      selfManaged: [33, bool()],
      position: [34, option(getPositionDataSerializer())],
    })
    .deserializeUsing<Position>((account) => deserializePosition(account));
}
