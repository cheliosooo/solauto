/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  OptionOrNullable,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  option,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type ReferralStateAccount = Account<ReferralStateAccountAccountData>;

export type ReferralStateAccountAccountData = {
  authority: PublicKey;
  referredByState: Option<PublicKey>;
  destFeesMint: PublicKey;
};

export type ReferralStateAccountAccountDataArgs = {
  authority: PublicKey;
  referredByState: OptionOrNullable<PublicKey>;
  destFeesMint: PublicKey;
};

export function getReferralStateAccountAccountDataSerializer(): Serializer<
  ReferralStateAccountAccountDataArgs,
  ReferralStateAccountAccountData
> {
  return struct<ReferralStateAccountAccountData>(
    [
      ['authority', publicKeySerializer()],
      ['referredByState', option(publicKeySerializer())],
      ['destFeesMint', publicKeySerializer()],
    ],
    { description: 'ReferralStateAccountAccountData' }
  ) as Serializer<
    ReferralStateAccountAccountDataArgs,
    ReferralStateAccountAccountData
  >;
}

export function deserializeReferralStateAccount(
  rawAccount: RpcAccount
): ReferralStateAccount {
  return deserializeAccount(
    rawAccount,
    getReferralStateAccountAccountDataSerializer()
  );
}

export async function fetchReferralStateAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReferralStateAccount> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'ReferralStateAccount');
  return deserializeReferralStateAccount(maybeAccount);
}

export async function safeFetchReferralStateAccount(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<ReferralStateAccount | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeReferralStateAccount(maybeAccount)
    : null;
}

export async function fetchAllReferralStateAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReferralStateAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'ReferralStateAccount');
    return deserializeReferralStateAccount(maybeAccount);
  });
}

export async function safeFetchAllReferralStateAccount(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<ReferralStateAccount[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeReferralStateAccount(maybeAccount as RpcAccount)
    );
}

export function getReferralStateAccountGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      authority: PublicKey;
      referredByState: OptionOrNullable<PublicKey>;
      destFeesMint: PublicKey;
    }>({
      authority: [0, publicKeySerializer()],
      referredByState: [32, option(publicKeySerializer())],
      destFeesMint: [null, publicKeySerializer()],
    })
    .deserializeUsing<ReferralStateAccount>((account) =>
      deserializeReferralStateAccount(account)
    );
}
