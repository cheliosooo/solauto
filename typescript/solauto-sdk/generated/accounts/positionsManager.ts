/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type PositionsManager = Account<PositionsManagerAccountData>;

export type PositionsManagerAccountData = { openPositions: Array<PublicKey> };

export type PositionsManagerAccountDataArgs = PositionsManagerAccountData;

export function getPositionsManagerAccountDataSerializer(): Serializer<
  PositionsManagerAccountDataArgs,
  PositionsManagerAccountData
> {
  return struct<PositionsManagerAccountData>(
    [['openPositions', array(publicKeySerializer())]],
    { description: 'PositionsManagerAccountData' }
  ) as Serializer<PositionsManagerAccountDataArgs, PositionsManagerAccountData>;
}

export function deserializePositionsManager(
  rawAccount: RpcAccount
): PositionsManager {
  return deserializeAccount(
    rawAccount,
    getPositionsManagerAccountDataSerializer()
  );
}

export async function fetchPositionsManager(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PositionsManager> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'PositionsManager');
  return deserializePositionsManager(maybeAccount);
}

export async function safeFetchPositionsManager(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<PositionsManager | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializePositionsManager(maybeAccount) : null;
}

export async function fetchAllPositionsManager(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PositionsManager[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'PositionsManager');
    return deserializePositionsManager(maybeAccount);
  });
}

export async function safeFetchAllPositionsManager(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<PositionsManager[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializePositionsManager(maybeAccount as RpcAccount)
    );
}

export function getPositionsManagerGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ openPositions: Array<PublicKey> }>({
      openPositions: [0, array(publicKeySerializer())],
    })
    .deserializeUsing<PositionsManager>((account) =>
      deserializePositionsManager(account)
    );
}
