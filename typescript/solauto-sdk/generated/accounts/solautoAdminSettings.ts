/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';

export type SolautoAdminSettings = Account<SolautoAdminSettingsAccountData>;

export type SolautoAdminSettingsAccountData = {
  feesWallet: PublicKey;
  feesTokenMint: PublicKey;
};

export type SolautoAdminSettingsAccountDataArgs =
  SolautoAdminSettingsAccountData;

export function getSolautoAdminSettingsAccountDataSerializer(): Serializer<
  SolautoAdminSettingsAccountDataArgs,
  SolautoAdminSettingsAccountData
> {
  return struct<SolautoAdminSettingsAccountData>(
    [
      ['feesWallet', publicKeySerializer()],
      ['feesTokenMint', publicKeySerializer()],
    ],
    { description: 'SolautoAdminSettingsAccountData' }
  ) as Serializer<
    SolautoAdminSettingsAccountDataArgs,
    SolautoAdminSettingsAccountData
  >;
}

export function deserializeSolautoAdminSettings(
  rawAccount: RpcAccount
): SolautoAdminSettings {
  return deserializeAccount(
    rawAccount,
    getSolautoAdminSettingsAccountDataSerializer()
  );
}

export async function fetchSolautoAdminSettings(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SolautoAdminSettings> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'SolautoAdminSettings');
  return deserializeSolautoAdminSettings(maybeAccount);
}

export async function safeFetchSolautoAdminSettings(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<SolautoAdminSettings | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeSolautoAdminSettings(maybeAccount)
    : null;
}

export async function fetchAllSolautoAdminSettings(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SolautoAdminSettings[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'SolautoAdminSettings');
    return deserializeSolautoAdminSettings(maybeAccount);
  });
}

export async function safeFetchAllSolautoAdminSettings(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<SolautoAdminSettings[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeSolautoAdminSettings(maybeAccount as RpcAccount)
    );
}

export function getSolautoAdminSettingsGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'solauto',
    'AutoyKBRaHSBHy9RsmXCZMy6nNFAg5FYijrvZyQcNLV'
  );
  return gpaBuilder(context, programId)
    .registerFields<{ feesWallet: PublicKey; feesTokenMint: PublicKey }>({
      feesWallet: [0, publicKeySerializer()],
      feesTokenMint: [32, publicKeySerializer()],
    })
    .deserializeUsing<SolautoAdminSettings>((account) =>
      deserializeSolautoAdminSettings(account)
    );
}

export function getSolautoAdminSettingsSize(): number {
  return 64;
}
