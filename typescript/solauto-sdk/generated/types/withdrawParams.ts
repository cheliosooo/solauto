/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  u64,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type WithdrawParams =
  | { __kind: 'All' }
  | { __kind: 'Partial'; fields: [bigint] };

export type WithdrawParamsArgs =
  | { __kind: 'All' }
  | { __kind: 'Partial'; fields: [number | bigint] };

export function getWithdrawParamsSerializer(): Serializer<
  WithdrawParamsArgs,
  WithdrawParams
> {
  return dataEnum<WithdrawParams>(
    [
      ['All', unit()],
      [
        'Partial',
        struct<GetDataEnumKindContent<WithdrawParams, 'Partial'>>([
          ['fields', tuple([u64()])],
        ]),
      ],
    ],
    { description: 'WithdrawParams' }
  ) as Serializer<WithdrawParamsArgs, WithdrawParams>;
}

// Data Enum Helpers.
export function withdrawParams(
  kind: 'All'
): GetDataEnumKind<WithdrawParamsArgs, 'All'>;
export function withdrawParams(
  kind: 'Partial',
  data: GetDataEnumKindContent<WithdrawParamsArgs, 'Partial'>['fields']
): GetDataEnumKind<WithdrawParamsArgs, 'Partial'>;
export function withdrawParams<K extends WithdrawParamsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<WithdrawParamsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isWithdrawParams<K extends WithdrawParams['__kind']>(
  kind: K,
  value: WithdrawParams
): value is WithdrawParams & { __kind: K } {
  return value.__kind === kind;
}
