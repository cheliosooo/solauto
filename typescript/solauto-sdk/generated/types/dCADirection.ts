/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  option,
  struct,
  tuple,
  u64,
  unit,
} from '@metaplex-foundation/umi/serializers';

export type DCADirection =
  | { __kind: 'In'; fields: [Option<bigint>] }
  | { __kind: 'Out' };

export type DCADirectionArgs =
  | { __kind: 'In'; fields: [OptionOrNullable<number | bigint>] }
  | { __kind: 'Out' };

export function getDCADirectionSerializer(): Serializer<
  DCADirectionArgs,
  DCADirection
> {
  return dataEnum<DCADirection>(
    [
      [
        'In',
        struct<GetDataEnumKindContent<DCADirection, 'In'>>([
          ['fields', tuple([option(u64())])],
        ]),
      ],
      ['Out', unit()],
    ],
    { description: 'DCADirection' }
  ) as Serializer<DCADirectionArgs, DCADirection>;
}

// Data Enum Helpers.
export function dCADirection(
  kind: 'In',
  data: GetDataEnumKindContent<DCADirectionArgs, 'In'>['fields']
): GetDataEnumKind<DCADirectionArgs, 'In'>;
export function dCADirection(
  kind: 'Out'
): GetDataEnumKind<DCADirectionArgs, 'Out'>;
export function dCADirection<K extends DCADirectionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DCADirectionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isDCADirection<K extends DCADirection['__kind']>(
  kind: K,
  value: DCADirection
): value is DCADirection & { __kind: K } {
  return value.__kind === kind;
}
